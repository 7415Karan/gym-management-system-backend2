// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  password String
  role     Role
  clubId   String?
  club     Club?   @relation(fields: [clubId], references: [id])
}

model Club {
  id        String     @id @default(uuid())
  name      String
  location  String?
  users     User[] // ðŸ‘ˆ back relation
  members   Member[]
  trainers  Trainer[]
  locations Location[]

  schedules ClassSchedule[]
  invoices  Invoice[]

  communications Communication[]
}

model Trainer {
  id      String   @id @default(uuid())
  name    String
  email   String   @unique
  clubId  String
  club    Club     @relation(fields: [clubId], references: [id])
  members Member[]

  schedules ClassSchedule[]
}

enum Role {
  super_admin
  franchise_admin
  trainer
  staff
}

model Member {
  id          String    @id @default(uuid())
  firstName   String
  lastName    String
  email       String    @unique
  phone       String?
  work        String?
  dateOfBirth DateTime?
  gender      String
  avatarUrl   String?
  keyFob      String?
  tags        String?
  note        String?

  memberType String // 'member' or 'prospect'

  // Address
  street        String?
  city          String?
  state         String?
  zip           String?
  addressSearch String?

  // Marketing
  salesRep        String?
  sourcePromotion String?
  referredBy      String?

  // Additional

  joiningDate     DateTime?
  occupation      String?
  organization    String?
  involvementType String?

  // Emergency Contact
  emergency Json?

  //medical information
  medicalInfo       String?
  allergies         String?
  medications       String?
  chronicConditions String?
  injuries          String?
  doctorContact     String?
  lastExamDate      DateTime?

  clubId String
  club   Club   @relation(fields: [clubId], references: [id])

  trainerId String? // optiona
  trainer   Trainer? @relation(fields: [trainerId], references: [id])

  createdAt DateTime @default(now())

  membership Membership[]

  paymentMethod PaymentMethod?

  invoice Invoice[]

  bookings Booking[]

  attendances Attendance[]

  communications Communication[]
}

model Membership {
  id        String   @id @default(uuid())
  planName  String
  startDate DateTime
  endDate   DateTime
  autoRenew Boolean
  status    String
  member    Member   @relation(fields: [memberId], references: [id])
  memberId  String
}

model MembershipPlan {
  id             String   @id @default(uuid())
  name           String   @unique
  description    String?
  price          Float
  durationInDays Int
  createdAt      DateTime @default(now())
}

model PaymentMethod {
  id                    String @id @default(uuid())
  stripePaymentMethodId String
  cardBrand             String
  last4                 String
  expMonth              Int
  expYear               Int
  member                Member @relation(fields: [memberId], references: [id])
  memberId              String @unique
}

model Invoice {
  id       String        @id @default(uuid())
  member   Member        @relation(fields: [memberId], references: [id])
  memberId String
  planName String
  amount   Float
  status   InvoiceStatus
  issuedAt DateTime      @default(now())
  dueDate  DateTime

  clubId String
  club   Club   @relation(fields: [clubId], references: [id])
}

enum InvoiceStatus {
  paid
  unpaid
  overdue
  failed
}

model ClassSchedule {
  id          String   @id @default(uuid())
  title       String
  date        DateTime
  duration    Int // in minutes
  location    String?
  trainerId   String
  trainer     Trainer  @relation(fields: [trainerId], references: [id])
  maxCapacity Int

  bookings  Booking[]
  createdAt DateTime  @default(now())

  clubId String
  club   Club   @relation(fields: [clubId], references: [id])

  attendances Attendance[]
}

model Booking {
  id         String        @id @default(uuid())
  memberId   String
  member     Member        @relation(fields: [memberId], references: [id])
  schedule   ClassSchedule @relation(fields: [scheduleId], references: [id])
  scheduleId String
  status     String // 'confirmed' | 'canceled' | 'waitlisted'
  attended   Boolean       @default(false)
  createdAt  DateTime      @default(now())
}

model Location {
  id        String   @id @default(cuid())
  name      String
  clubId    String
  club      Club     @relation(fields: [clubId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attendance {
  id         String   @id @default(cuid())
  scheduleId String
  memberId   String
  status     String // "present" | "absent"
  markedAt   DateTime @default(now())

  schedule ClassSchedule @relation(fields: [scheduleId], references: [id])
  member   Member        @relation(fields: [memberId], references: [id])

  @@unique([memberId, scheduleId])
}

model Communication {
  id        String            @id @default(uuid())
  type      CommunicationType
  content   String?
  note      String
  createdAt DateTime          @default(now())

  memberId String
  member   Member @relation(fields: [memberId], references: [id])

  clubId String
  club   Club   @relation(fields: [clubId], references: [id])
}

enum CommunicationType {
  note
  email
  sms
  push
  call
  meeting
}
