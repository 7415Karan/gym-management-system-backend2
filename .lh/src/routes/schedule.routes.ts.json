{
    "sourceFile": "src/routes/schedule.routes.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1752403852448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752488600680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,5 +68,42 @@\n     res.status(500).json({ error: 'Failed to delete schedule' });\r\n   }\r\n });\r\n \r\n+// backend example for /api/schedules route\r\n+router.get('/api/schedules', async (req: Request, res: Response) => {\r\n+  const { date, classId, trainerId, clubId } = req.query;\r\n+\r\n+  try {\r\n+    const dateFilter =\r\n+      date\r\n+        ? {\r\n+            gte: new Date(`${date}T00:00:00.000Z`),\r\n+            lt: new Date(`${date}T23:59:59.999Z`),\r\n+          }\r\n+        : undefined;\r\n+\r\n+    const schedules = await prisma.classSchedule.findMany({\r\n+      where: {\r\n+        ...(classId && { id: classId as string }),\r\n+        ...(trainerId && { trainerId: trainerId as string }),\r\n+        ...(date && { date: dateFilter }),\r\n+        ...(clubId && { clubId: clubId as string }),\r\n+      },\r\n+      include: {\r\n+        trainer: true,\r\n+        members: true,\r\n+      },\r\n+      orderBy: {\r\n+        date: 'asc',\r\n+      },\r\n+    });\r\n+\r\n+    res.json(schedules);\r\n+  } catch (err) {\r\n+    console.error('Attendance fetch error:', err);\r\n+    res.status(500).json({ message: 'Error fetching attendance records' });\r\n+  }\r\n+});\r\n+\r\n+\r\n export default router;\r\n"
                },
                {
                    "date": 1752490243068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,42 +68,7 @@\n     res.status(500).json({ error: 'Failed to delete schedule' });\r\n   }\r\n });\r\n \r\n-// backend example for /api/schedules route\r\n-router.get('/api/schedules', async (req: Request, res: Response) => {\r\n-  const { date, classId, trainerId, clubId } = req.query;\r\n \r\n-  try {\r\n-    const dateFilter =\r\n-      date\r\n-        ? {\r\n-            gte: new Date(`${date}T00:00:00.000Z`),\r\n-            lt: new Date(`${date}T23:59:59.999Z`),\r\n-          }\r\n-        : undefined;\r\n \r\n-    const schedules = await prisma.classSchedule.findMany({\r\n-      where: {\r\n-        ...(classId && { id: classId as string }),\r\n-        ...(trainerId && { trainerId: trainerId as string }),\r\n-        ...(date && { date: dateFilter }),\r\n-        ...(clubId && { clubId: clubId as string }),\r\n-      },\r\n-      include: {\r\n-        trainer: true,\r\n-        members: true,\r\n-      },\r\n-      orderBy: {\r\n-        date: 'asc',\r\n-      },\r\n-    });\r\n-\r\n-    res.json(schedules);\r\n-  } catch (err) {\r\n-    console.error('Attendance fetch error:', err);\r\n-    res.status(500).json({ message: 'Error fetching attendance records' });\r\n-  }\r\n-});\r\n-\r\n-\r\n export default router;\r\n"
                },
                {
                    "date": 1752490846809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,16 +7,38 @@\n const router = express.Router();\r\n const prisma = new PrismaClient();\r\n \r\n // GET all schedules for a club\r\n+// router.get('/', async (req: Request, res: Response) => {\r\n+//   const { clubId } = req.query;\r\n+//   if (!clubId) return res.status(400).json({ error: 'Club ID is required' });\r\n+\r\n+//   try {\r\n+//     const schedules = await prisma.classSchedule.findMany({\r\n+//       where: { clubId: String(clubId) },\r\n+//       include: { trainer: true },\r\n+//       orderBy: { date: 'asc' },\r\n+//     });\r\n+//     res.json(schedules);\r\n+//   } catch (err) {\r\n+//     console.error('Fetch schedules error:', err);\r\n+//     res.status(500).json({ error: 'Failed to fetch schedules' });\r\n+//   }\r\n+// });\r\n+// GET all schedules for a club\r\n router.get('/', async (req: Request, res: Response) => {\r\n   const { clubId } = req.query;\r\n   if (!clubId) return res.status(400).json({ error: 'Club ID is required' });\r\n \r\n   try {\r\n     const schedules = await prisma.classSchedule.findMany({\r\n       where: { clubId: String(clubId) },\r\n-      include: { trainer: true },\r\n+      include: {\r\n+        trainer: true,\r\n+        bookings: {\r\n+          include: { member: true },\r\n+        }\r\n+      },\r\n       orderBy: { date: 'asc' },\r\n     });\r\n     res.json(schedules);\r\n   } catch (err) {\r\n@@ -24,8 +46,9 @@\n     res.status(500).json({ error: 'Failed to fetch schedules' });\r\n   }\r\n });\r\n \r\n+\r\n // POST create new schedule\r\n router.post('/', async (req: Request, res: Response) => {\r\n   const {\r\n     title,\r\n"
                },
                {
                    "date": 1752491796329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,41 +6,73 @@\n \r\n const router = express.Router();\r\n const prisma = new PrismaClient();\r\n \r\n-// GET all schedules for a club\r\n+\r\n // router.get('/', async (req: Request, res: Response) => {\r\n //   const { clubId } = req.query;\r\n //   if (!clubId) return res.status(400).json({ error: 'Club ID is required' });\r\n \r\n //   try {\r\n //     const schedules = await prisma.classSchedule.findMany({\r\n //       where: { clubId: String(clubId) },\r\n-//       include: { trainer: true },\r\n+//       include: {\r\n+//         trainer: true,\r\n+//         bookings: {\r\n+//           include: { member: true },\r\n+//         }\r\n+//       },\r\n //       orderBy: { date: 'asc' },\r\n //     });\r\n //     res.json(schedules);\r\n //   } catch (err) {\r\n //     console.error('Fetch schedules error:', err);\r\n //     res.status(500).json({ error: 'Failed to fetch schedules' });\r\n //   }\r\n // });\r\n-// GET all schedules for a club\r\n+\r\n+// In schedule.routes.ts, update your GET route:\r\n router.get('/', async (req: Request, res: Response) => {\r\n-  const { clubId } = req.query;\r\n+  const { clubId, date, trainerId, classId } = req.query;\r\n+  \r\n   if (!clubId) return res.status(400).json({ error: 'Club ID is required' });\r\n \r\n   try {\r\n+    const whereClause: any = { clubId: String(clubId) };\r\n+    \r\n+    // Add date filtering if provided\r\n+    if (date) {\r\n+      const filterDate = new Date(String(date));\r\n+      const nextDay = new Date(filterDate);\r\n+      nextDay.setDate(nextDay.getDate() + 1);\r\n+      \r\n+      whereClause.date = {\r\n+        gte: filterDate,\r\n+        lt: nextDay\r\n+      };\r\n+    }\r\n+    \r\n+    // Add trainer filtering if provided\r\n+    if (trainerId) {\r\n+      whereClause.trainerId = String(trainerId);\r\n+    }\r\n+    \r\n+    // Add specific class filtering if provided (though this might be redundant)\r\n+    if (classId) {\r\n+      whereClause.id = String(classId);\r\n+    }\r\n+\r\n     const schedules = await prisma.classSchedule.findMany({\r\n-      where: { clubId: String(clubId) },\r\n+      where: whereClause,\r\n       include: {\r\n         trainer: true,\r\n         bookings: {\r\n           include: { member: true },\r\n         }\r\n       },\r\n       orderBy: { date: 'asc' },\r\n     });\r\n+    \r\n     res.json(schedules);\r\n   } catch (err) {\r\n     console.error('Fetch schedules error:', err);\r\n     res.status(500).json({ error: 'Failed to fetch schedules' });\r\n"
                }
            ],
            "date": 1752403852447,
            "name": "Commit-0",
            "content": "//src/routes/schedule.routes.ts\r\n\r\nimport express from 'express';\r\nimport { PrismaClient } from '@prisma/client';\r\nimport { Request, Response } from 'express';\r\n\r\nconst router = express.Router();\r\nconst prisma = new PrismaClient();\r\n\r\n// GET all schedules for a club\r\nrouter.get('/', async (req: Request, res: Response) => {\r\n  const { clubId } = req.query;\r\n  if (!clubId) return res.status(400).json({ error: 'Club ID is required' });\r\n\r\n  try {\r\n    const schedules = await prisma.classSchedule.findMany({\r\n      where: { clubId: String(clubId) },\r\n      include: { trainer: true },\r\n      orderBy: { date: 'asc' },\r\n    });\r\n    res.json(schedules);\r\n  } catch (err) {\r\n    console.error('Fetch schedules error:', err);\r\n    res.status(500).json({ error: 'Failed to fetch schedules' });\r\n  }\r\n});\r\n\r\n// POST create new schedule\r\nrouter.post('/', async (req: Request, res: Response) => {\r\n  const {\r\n    title,\r\n    date,\r\n    duration,\r\n    location,\r\n    trainerId,\r\n    maxCapacity,\r\n    clubId,\r\n  } = req.body;\r\n\r\n  try {\r\n    const newSchedule = await prisma.classSchedule.create({\r\n      data: {\r\n        title,\r\n        date: new Date(date),\r\n        duration,\r\n        location,\r\n        trainerId,\r\n        maxCapacity,\r\n        clubId,\r\n      },\r\n    });\r\n    res.status(201).json(newSchedule);\r\n  } catch (err) {\r\n    console.error('Create schedule error:', err);\r\n    res.status(500).json({ error: 'Failed to create schedule' });\r\n  }\r\n});\r\n\r\n// DELETE a schedule by ID\r\nrouter.delete('/:id', async (req: Request, res: Response) => {\r\n  const { id } = req.params;\r\n\r\n  try {\r\n    await prisma.classSchedule.delete({ where: { id } });\r\n    res.status(204).end();\r\n  } catch (err) {\r\n    console.error('Delete schedule error:', err);\r\n    res.status(500).json({ error: 'Failed to delete schedule' });\r\n  }\r\n});\r\n\r\nexport default router;\r\n"
        }
    ]
}