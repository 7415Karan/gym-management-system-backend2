{
    "sourceFile": "src/routes/billing.routes.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1752358300670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752359693987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+//src/routes/billing.routes.ts\r\n import express from 'express';\r\n import { PrismaClient } from '@prisma/client';\r\n import { Request, Response } from 'express';\r\n \r\n@@ -9,19 +10,22 @@\n   try {\r\n     const { memberId } = req.params;\r\n     const { cardNumber, expiry, cvc } = req.body;\r\n \r\n-    // ðŸ”§ fake parsing for local storage (replace with Stripe integration later)\r\n     const last4 = cardNumber.slice(-4);\r\n-    const [expMonth, expYear] = expiry.split('/');\r\n+    const [expMonthStr, expYearStr] = expiry.split('/');\r\n \r\n+    const brand = 'visa'; // placeholder â€” you'd detect brand in real Stripe integration\r\n+    const stripePaymentMethodId = `fake_${Math.random().toString(36).substring(2, 10)}`; // mock ID\r\n+\r\n     const method = await prisma.paymentMethod.create({\r\n       data: {\r\n         memberId,\r\n-        cardBrand: 'visa',\r\n+        stripePaymentMethodId,\r\n+        cardBrand: brand,\r\n         last4,\r\n-        expMonth: parseInt(expMonth),\r\n-        expYear: parseInt(`20${expYear}`),\r\n+        expMonth: parseInt(expMonthStr),\r\n+        expYear: parseInt('20' + expYearStr), // e.g., 25 -> 2025\r\n       },\r\n     });\r\n \r\n     res.status(201).json(method);\r\n"
                },
                {
                    "date": 1752360136398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,4 +33,6 @@\n     console.error('Save Payment Method Error:', err);\r\n     res.status(500).json({ error: 'Failed to save payment method' });\r\n   }\r\n });\r\n+\r\n+export default router; \r\n"
                },
                {
                    "date": 1752360435084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,5 +34,33 @@\n     res.status(500).json({ error: 'Failed to save payment method' });\r\n   }\r\n });\r\n \r\n+router.get('/:memberId', async (req: Request, res: Response) => {\r\n+  const { memberId } = req.params;\r\n+\r\n+  try {\r\n+    const member = await prisma.member.findUnique({\r\n+      where: { id: memberId },\r\n+      include: {\r\n+        paymentMethod: true,\r\n+        // If you add invoice model later, include it here too\r\n+        // invoices: true,\r\n+      },\r\n+    });\r\n+\r\n+    if (!member) {\r\n+      return res.status(404).json({ error: 'Member not found' });\r\n+    }\r\n+\r\n+    res.json({\r\n+      paymentMethod: member.paymentMethod,\r\n+      invoices: [], // Temporary â€” until invoices are added\r\n+    });\r\n+  } catch (err) {\r\n+    console.error('Fetch billing error:', err);\r\n+    res.status(500).json({ error: 'Failed to fetch billing data' });\r\n+  }\r\n+});\r\n+\r\n+\r\n export default router; \r\n"
                },
                {
                    "date": 1752373112927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,5 +62,22 @@\n   }\r\n });\r\n \r\n \r\n+router.get('/:memberId', async (req, res) => {\r\n+  const { memberId } = req.params;\r\n+\r\n+  try {\r\n+    const [paymentMethod, invoices] = await Promise.all([\r\n+      prisma.paymentMethod.findUnique({ where: { memberId } }),\r\n+      prisma.invoice.findMany({ where: { memberId }, orderBy: { issuedAt: 'desc' } }),\r\n+    ]);\r\n+\r\n+    res.json({ paymentMethod, invoices });\r\n+  } catch (err) {\r\n+    console.error('Billing fetch error:', err);\r\n+    res.status(500).json({ error: 'Failed to load billing data' });\r\n+  }\r\n+});\r\n+\r\n+\r\n export default router; \r\n"
                },
                {
                    "date": 1752373264608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,21 +63,26 @@\n });\r\n \r\n \r\n router.get('/:memberId', async (req, res) => {\r\n-  const { memberId } = req.params;\r\n-\r\n   try {\r\n-    const [paymentMethod, invoices] = await Promise.all([\r\n-      prisma.paymentMethod.findUnique({ where: { memberId } }),\r\n-      prisma.invoice.findMany({ where: { memberId }, orderBy: { issuedAt: 'desc' } }),\r\n-    ]);\r\n+    const { memberId } = req.params;\r\n \r\n+    const paymentMethod = await prisma.paymentMethod.findUnique({\r\n+      where: { memberId },\r\n+    });\r\n+\r\n+    const invoices = await prisma.invoice.findMany({\r\n+      where: { memberId },\r\n+      orderBy: { issuedAt: 'desc' },\r\n+    });\r\n+\r\n     res.json({ paymentMethod, invoices });\r\n   } catch (err) {\r\n-    console.error('Billing fetch error:', err);\r\n-    res.status(500).json({ error: 'Failed to load billing data' });\r\n+    console.error('Fetch billing error:', err);\r\n+    res.status(500).json({ error: 'Failed to fetch billing data' });\r\n   }\r\n });\r\n \r\n \r\n+\r\n export default router; \r\n"
                },
                {
                    "date": 1752373378556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,106 @@\n+//src/routes/billing.routes.ts\r\n+import express from 'express';\r\n+import { PrismaClient } from '@prisma/client';\r\n+import { Request, Response } from 'express';\r\n+\r\n+const router = express.Router();\r\n+const prisma = new PrismaClient();\r\n+\r\n+router.post('/:memberId/payment-method', async (req, res) => {\r\n+  try {\r\n+    const { memberId } = req.params;\r\n+    const { cardNumber, expiry, cvc } = req.body;\r\n+\r\n+    const last4 = cardNumber.slice(-4);\r\n+    const [expMonthStr, expYearStr] = expiry.split('/');\r\n+\r\n+    const brand = 'visa'; // placeholder â€” you'd detect brand in real Stripe integration\r\n+    const stripePaymentMethodId = `fake_${Math.random().toString(36).substring(2, 10)}`; // mock ID\r\n+\r\n+    const method = await prisma.paymentMethod.create({\r\n+      data: {\r\n+        memberId,\r\n+        stripePaymentMethodId,\r\n+        cardBrand: brand,\r\n+        last4,\r\n+        expMonth: parseInt(expMonthStr),\r\n+        expYear: parseInt('20' + expYearStr), // e.g., 25 -> 2025\r\n+      },\r\n+    });\r\n+\r\n+    res.status(201).json(method);\r\n+  } catch (err) {\r\n+    console.error('Save Payment Method Error:', err);\r\n+    res.status(500).json({ error: 'Failed to save payment method' });\r\n+  }\r\n+});\r\n+\r\n+router.get('/:memberId', async (req: Request, res: Response) => {\r\n+  const { memberId } = req.params;\r\n+\r\n+  try {\r\n+    const member = await prisma.member.findUnique({\r\n+      where: { id: memberId },\r\n+      include: {\r\n+        paymentMethod: true,\r\n+        // If you add invoice model later, include it here too\r\n+        // invoices: true,\r\n+      },\r\n+    });\r\n+\r\n+    if (!member) {\r\n+      return res.status(404).json({ error: 'Member not found' });\r\n+    }\r\n+\r\n+    res.json({\r\n+      paymentMethod: member.paymentMethod,\r\n+      invoices: [], // Temporary â€” until invoices are added\r\n+    });\r\n+  } catch (err) {\r\n+    console.error('Fetch billing error:', err);\r\n+    res.status(500).json({ error: 'Failed to fetch billing data' });\r\n+  }\r\n+});\r\n+\r\n+\r\n+router.get('/:memberId', async (req, res) => {\r\n+  try {\r\n+    const { memberId } = req.params;\r\n+\r\n+    const paymentMethod = await prisma.paymentMethod.findUnique({\r\n+      where: { memberId },\r\n+    });\r\n+\r\n+    const invoices = await prisma.invoice.findMany({\r\n+      where: { memberId },\r\n+      orderBy: { issuedAt: 'desc' },\r\n+    });\r\n+\r\n+    res.json({ paymentMethod, invoices });\r\n+  } catch (err) {\r\n+    console.error('Fetch billing error:', err);\r\n+    res.status(500).json({ error: 'Failed to fetch billing data' });\r\n+  }\r\n+});\r\n+\r\n+// PATCH /api/billing/invoices/:id/pay\r\n+router.patch('/invoices/:id/pay', async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+\r\n+    const invoice = await prisma.invoice.update({\r\n+      where: { id },\r\n+      data: { status: 'paid' },\r\n+    });\r\n+\r\n+    res.json(invoice);\r\n+  } catch (err) {\r\n+    console.error('Invoice payment error:', err);\r\n+    res.status(500).json({ error: 'Failed to mark invoice as paid' });\r\n+  }\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+export default router; \r\n"
                },
                {
                    "date": 1752375680523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,34 +34,34 @@\n     res.status(500).json({ error: 'Failed to save payment method' });\r\n   }\r\n });\r\n \r\n-router.get('/:memberId', async (req: Request, res: Response) => {\r\n-  const { memberId } = req.params;\r\n+// router.get('/:memberId', async (req: Request, res: Response) => {\r\n+//   const { memberId } = req.params;\r\n \r\n-  try {\r\n-    const member = await prisma.member.findUnique({\r\n-      where: { id: memberId },\r\n-      include: {\r\n-        paymentMethod: true,\r\n-        // If you add invoice model later, include it here too\r\n-        // invoices: true,\r\n-      },\r\n-    });\r\n+//   try {\r\n+//     const member = await prisma.member.findUnique({\r\n+//       where: { id: memberId },\r\n+//       include: {\r\n+//         paymentMethod: true,\r\n+//         // If you add invoice model later, include it here too\r\n+//         // invoices: true,\r\n+//       },\r\n+//     });\r\n \r\n-    if (!member) {\r\n-      return res.status(404).json({ error: 'Member not found' });\r\n-    }\r\n+//     if (!member) {\r\n+//       return res.status(404).json({ error: 'Member not found' });\r\n+//     }\r\n \r\n-    res.json({\r\n-      paymentMethod: member.paymentMethod,\r\n-      invoices: [], // Temporary â€” until invoices are added\r\n-    });\r\n-  } catch (err) {\r\n-    console.error('Fetch billing error:', err);\r\n-    res.status(500).json({ error: 'Failed to fetch billing data' });\r\n-  }\r\n-});\r\n+//     res.json({\r\n+//       paymentMethod: member.paymentMethod,\r\n+//       invoices: [], // Temporary â€” until invoices are added\r\n+//     });\r\n+//   } catch (err) {\r\n+//     console.error('Fetch billing error:', err);\r\n+//     res.status(500).json({ error: 'Failed to fetch billing data' });\r\n+//   }\r\n+// });\r\n \r\n \r\n router.get('/:memberId', async (req, res) => {\r\n   try {\r\n@@ -103,92 +103,4 @@\n \r\n \r\n \r\n export default router; \r\n-//src/routes/billing.routes.ts\r\n-import express from 'express';\r\n-import { PrismaClient } from '@prisma/client';\r\n-import { Request, Response } from 'express';\r\n-\r\n-const router = express.Router();\r\n-const prisma = new PrismaClient();\r\n-\r\n-router.post('/:memberId/payment-method', async (req, res) => {\r\n-  try {\r\n-    const { memberId } = req.params;\r\n-    const { cardNumber, expiry, cvc } = req.body;\r\n-\r\n-    const last4 = cardNumber.slice(-4);\r\n-    const [expMonthStr, expYearStr] = expiry.split('/');\r\n-\r\n-    const brand = 'visa'; // placeholder â€” you'd detect brand in real Stripe integration\r\n-    const stripePaymentMethodId = `fake_${Math.random().toString(36).substring(2, 10)}`; // mock ID\r\n-\r\n-    const method = await prisma.paymentMethod.create({\r\n-      data: {\r\n-        memberId,\r\n-        stripePaymentMethodId,\r\n-        cardBrand: brand,\r\n-        last4,\r\n-        expMonth: parseInt(expMonthStr),\r\n-        expYear: parseInt('20' + expYearStr), // e.g., 25 -> 2025\r\n-      },\r\n-    });\r\n-\r\n-    res.status(201).json(method);\r\n-  } catch (err) {\r\n-    console.error('Save Payment Method Error:', err);\r\n-    res.status(500).json({ error: 'Failed to save payment method' });\r\n-  }\r\n-});\r\n-\r\n-router.get('/:memberId', async (req: Request, res: Response) => {\r\n-  const { memberId } = req.params;\r\n-\r\n-  try {\r\n-    const member = await prisma.member.findUnique({\r\n-      where: { id: memberId },\r\n-      include: {\r\n-        paymentMethod: true,\r\n-        // If you add invoice model later, include it here too\r\n-        // invoices: true,\r\n-      },\r\n-    });\r\n-\r\n-    if (!member) {\r\n-      return res.status(404).json({ error: 'Member not found' });\r\n-    }\r\n-\r\n-    res.json({\r\n-      paymentMethod: member.paymentMethod,\r\n-      invoices: [], // Temporary â€” until invoices are added\r\n-    });\r\n-  } catch (err) {\r\n-    console.error('Fetch billing error:', err);\r\n-    res.status(500).json({ error: 'Failed to fetch billing data' });\r\n-  }\r\n-});\r\n-\r\n-\r\n-router.get('/:memberId', async (req, res) => {\r\n-  try {\r\n-    const { memberId } = req.params;\r\n-\r\n-    const paymentMethod = await prisma.paymentMethod.findUnique({\r\n-      where: { memberId },\r\n-    });\r\n-\r\n-    const invoices = await prisma.invoice.findMany({\r\n-      where: { memberId },\r\n-      orderBy: { issuedAt: 'desc' },\r\n-    });\r\n-\r\n-    res.json({ paymentMethod, invoices });\r\n-  } catch (err) {\r\n-    console.error('Fetch billing error:', err);\r\n-    res.status(500).json({ error: 'Failed to fetch billing data' });\r\n-  }\r\n-});\r\n-\r\n-\r\n-\r\n-export default router; \r\n"
                }
            ],
            "date": 1752358300670,
            "name": "Commit-0",
            "content": "import express from 'express';\r\nimport { PrismaClient } from '@prisma/client';\r\nimport { Request, Response } from 'express';\r\n\r\nconst router = express.Router();\r\nconst prisma = new PrismaClient();\r\n\r\nrouter.post('/:memberId/payment-method', async (req, res) => {\r\n  try {\r\n    const { memberId } = req.params;\r\n    const { cardNumber, expiry, cvc } = req.body;\r\n\r\n    // ðŸ”§ fake parsing for local storage (replace with Stripe integration later)\r\n    const last4 = cardNumber.slice(-4);\r\n    const [expMonth, expYear] = expiry.split('/');\r\n\r\n    const method = await prisma.paymentMethod.create({\r\n      data: {\r\n        memberId,\r\n        cardBrand: 'visa',\r\n        last4,\r\n        expMonth: parseInt(expMonth),\r\n        expYear: parseInt(`20${expYear}`),\r\n      },\r\n    });\r\n\r\n    res.status(201).json(method);\r\n  } catch (err) {\r\n    console.error('Save Payment Method Error:', err);\r\n    res.status(500).json({ error: 'Failed to save payment method' });\r\n  }\r\n});\r\n"
        }
    ]
}