{
    "sourceFile": "src/routes/member.routes.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1752209752670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752212225456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,68 @@\n import express from 'express';\r\n-import { createMember } from '../controllers/member.controller';\r\n-import { validateMember } from '../middlewares/validateMember';\r\n+import { PrismaClient } from '@prisma/client';\r\n \r\n const router = express.Router();\r\n+const prisma = new PrismaClient();\r\n \r\n-router.post('/members', validateMember, createMember);\r\n+router.post('/members', async (req, res) => {\r\n+  try {\r\n+    const {\r\n+      firstName, lastName, email, phone, work, dateOfBirth, gender, avatar,\r\n+      club, keyFob, tags, note, memberType,\r\n+      address, marketing, additional, emergency,\r\n+      medicalInfo,\r\n+    } = req.body;\r\n \r\n+    const newMember = await prisma.member.create({\r\n+      data: {\r\n+        firstName,\r\n+        lastName,\r\n+        email,\r\n+        phone,\r\n+        work,\r\n+        dateOfBirth: dateOfBirth ? new Date(dateOfBirth) : null,\r\n+        gender,\r\n+        avatarUrl: avatar || null,\r\n+        keyFob,\r\n+        tags,\r\n+        note,\r\n+        memberType,\r\n+\r\n+        // Address\r\n+        street: address?.street || null,\r\n+        city: address?.city || null,\r\n+        state: address?.state || null,\r\n+        zip: address?.zip || null,\r\n+        addressSearch: address?.search || null,\r\n+\r\n+        // Marketing\r\n+        salesRep: marketing?.salesRep || null,\r\n+        sourcePromotion: marketing?.sourcePromotion || null,\r\n+        referredBy: marketing?.referredBy || null,\r\n+\r\n+        // Additional\r\n+        trainerId: additional?.trainerId || null,\r\n+        joiningDate: additional?.joiningDate ? new Date(additional.joiningDate) : null,\r\n+        occupation: additional?.occupation || null,\r\n+        organization: additional?.organization || null,\r\n+        involvementType: additional?.involvementType || null,\r\n+\r\n+        // Emergency\r\n+        emergencyName: emergency?.name || null,\r\n+        emergencyRelationship: emergency?.relationship || null,\r\n+        emergencyPhone: emergency?.phone || null,\r\n+        emergencyEmail: emergency?.email || null,\r\n+\r\n+        medicalInfo,\r\n+        clubId: club,\r\n+      },\r\n+    });\r\n+\r\n+    res.status(201).json(newMember);\r\n+  } catch (err) {\r\n+    console.error('Add Member Error:', err);\r\n+    res.status(500).json({ error: 'Failed to create member' });\r\n+  }\r\n+});\r\n+\r\n export default router;\r\n"
                },
                {
                    "date": 1752213377360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n \r\n const router = express.Router();\r\n const prisma = new PrismaClient();\r\n \r\n-router.post('/members', async (req, res) => {\r\n+router.post('/', async (req, res) => {\r\n   try {\r\n     const {\r\n       firstName, lastName, email, phone, work, dateOfBirth, gender, avatar,\r\n       club, keyFob, tags, note, memberType,\r\n"
                },
                {
                    "date": 1752214917703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,5 +64,67 @@\n     res.status(500).json({ error: 'Failed to create member' });\r\n   }\r\n });\r\n \r\n+router.get('/', async (req, res) => {\r\n+  try {\r\n+    const { tab = 'all', search = '', page = 1, limit = 10, clubId } = req.query;\r\n+    const skip = (Number(page) - 1) * Number(limit);\r\n+\r\n+    let whereClause: any = {\r\n+      clubId: String(clubId),\r\n+    };\r\n+\r\n+    if (search) {\r\n+      whereClause.OR = [\r\n+        { firstName: { contains: search, mode: 'insensitive' } },\r\n+        { lastName: { contains: search, mode: 'insensitive' } },\r\n+        { email: { contains: search, mode: 'insensitive' } },\r\n+      ];\r\n+    }\r\n+\r\n+    switch (tab) {\r\n+      case 'active':\r\n+        whereClause.memberType = 'member';\r\n+        break;\r\n+      case 'expired':\r\n+        whereClause.memberType = 'member';\r\n+        whereClause.keyFob = null;\r\n+        break;\r\n+      case 'prospect':\r\n+        whereClause.memberType = 'prospect';\r\n+        break;\r\n+      case 'recent':\r\n+        const thirtyDaysAgo = new Date();\r\n+        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\r\n+        whereClause.createdAt = { gte: thirtyDaysAgo };\r\n+        break;\r\n+      default:\r\n+        break;\r\n+    }\r\n+\r\n+    const [members, total] = await Promise.all([\r\n+      prisma.member.findMany({\r\n+        where: whereClause,\r\n+        orderBy: { createdAt: 'desc' },\r\n+        skip,\r\n+        take: Number(limit),\r\n+      }),\r\n+      prisma.member.count({ where: whereClause }),\r\n+    ]);\r\n+\r\n+    res.json({\r\n+      data: members,\r\n+      meta: {\r\n+        total,\r\n+        page: Number(page),\r\n+        pageSize: Number(limit),\r\n+      },\r\n+    });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ error: 'Failed to fetch members' });\r\n+  }\r\n+});\r\n+\r\n+\r\n export default router;\r\n"
                },
                {
                    "date": 1752218281891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,6 +125,29 @@\n     res.status(500).json({ error: 'Failed to fetch members' });\r\n   }\r\n });\r\n \r\n+// GET /api/members/:id\r\n+router.get('/:id', async (req, res) => {\r\n+  const { id } = req.params;\r\n \r\n+  try {\r\n+    const member = await prisma.member.findUnique({\r\n+      where: { id },\r\n+      include: {\r\n+        trainer: true,\r\n+        club: true,\r\n+      },\r\n+    });\r\n+\r\n+    if (!member) return res.status(404).json({ error: 'Member not found' });\r\n+\r\n+    res.json(member);\r\n+  } catch (err) {\r\n+    console.error('Fetch member detail error:', err);\r\n+    res.status(500).json({ error: 'Failed to fetch member details' });\r\n+  }\r\n+});\r\n+\r\n+\r\n+\r\n export default router;\r\n"
                }
            ],
            "date": 1752209752670,
            "name": "Commit-0",
            "content": "import express from 'express';\r\nimport { createMember } from '../controllers/member.controller';\r\nimport { validateMember } from '../middlewares/validateMember';\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post('/members', validateMember, createMember);\r\n\r\nexport default router;\r\n"
        }
    ]
}