{
    "sourceFile": "src/routes/member.routes.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 30,
            "patches": [
                {
                    "date": 1752209752670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752212225456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,68 @@\n import express from 'express';\r\n-import { createMember } from '../controllers/member.controller';\r\n-import { validateMember } from '../middlewares/validateMember';\r\n+import { PrismaClient } from '@prisma/client';\r\n \r\n const router = express.Router();\r\n+const prisma = new PrismaClient();\r\n \r\n-router.post('/members', validateMember, createMember);\r\n+router.post('/members', async (req, res) => {\r\n+  try {\r\n+    const {\r\n+      firstName, lastName, email, phone, work, dateOfBirth, gender, avatar,\r\n+      club, keyFob, tags, note, memberType,\r\n+      address, marketing, additional, emergency,\r\n+      medicalInfo,\r\n+    } = req.body;\r\n \r\n+    const newMember = await prisma.member.create({\r\n+      data: {\r\n+        firstName,\r\n+        lastName,\r\n+        email,\r\n+        phone,\r\n+        work,\r\n+        dateOfBirth: dateOfBirth ? new Date(dateOfBirth) : null,\r\n+        gender,\r\n+        avatarUrl: avatar || null,\r\n+        keyFob,\r\n+        tags,\r\n+        note,\r\n+        memberType,\r\n+\r\n+        // Address\r\n+        street: address?.street || null,\r\n+        city: address?.city || null,\r\n+        state: address?.state || null,\r\n+        zip: address?.zip || null,\r\n+        addressSearch: address?.search || null,\r\n+\r\n+        // Marketing\r\n+        salesRep: marketing?.salesRep || null,\r\n+        sourcePromotion: marketing?.sourcePromotion || null,\r\n+        referredBy: marketing?.referredBy || null,\r\n+\r\n+        // Additional\r\n+        trainerId: additional?.trainerId || null,\r\n+        joiningDate: additional?.joiningDate ? new Date(additional.joiningDate) : null,\r\n+        occupation: additional?.occupation || null,\r\n+        organization: additional?.organization || null,\r\n+        involvementType: additional?.involvementType || null,\r\n+\r\n+        // Emergency\r\n+        emergencyName: emergency?.name || null,\r\n+        emergencyRelationship: emergency?.relationship || null,\r\n+        emergencyPhone: emergency?.phone || null,\r\n+        emergencyEmail: emergency?.email || null,\r\n+\r\n+        medicalInfo,\r\n+        clubId: club,\r\n+      },\r\n+    });\r\n+\r\n+    res.status(201).json(newMember);\r\n+  } catch (err) {\r\n+    console.error('Add Member Error:', err);\r\n+    res.status(500).json({ error: 'Failed to create member' });\r\n+  }\r\n+});\r\n+\r\n export default router;\r\n"
                },
                {
                    "date": 1752213377360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n \r\n const router = express.Router();\r\n const prisma = new PrismaClient();\r\n \r\n-router.post('/members', async (req, res) => {\r\n+router.post('/', async (req, res) => {\r\n   try {\r\n     const {\r\n       firstName, lastName, email, phone, work, dateOfBirth, gender, avatar,\r\n       club, keyFob, tags, note, memberType,\r\n"
                },
                {
                    "date": 1752214917703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,5 +64,67 @@\n     res.status(500).json({ error: 'Failed to create member' });\r\n   }\r\n });\r\n \r\n+router.get('/', async (req, res) => {\r\n+  try {\r\n+    const { tab = 'all', search = '', page = 1, limit = 10, clubId } = req.query;\r\n+    const skip = (Number(page) - 1) * Number(limit);\r\n+\r\n+    let whereClause: any = {\r\n+      clubId: String(clubId),\r\n+    };\r\n+\r\n+    if (search) {\r\n+      whereClause.OR = [\r\n+        { firstName: { contains: search, mode: 'insensitive' } },\r\n+        { lastName: { contains: search, mode: 'insensitive' } },\r\n+        { email: { contains: search, mode: 'insensitive' } },\r\n+      ];\r\n+    }\r\n+\r\n+    switch (tab) {\r\n+      case 'active':\r\n+        whereClause.memberType = 'member';\r\n+        break;\r\n+      case 'expired':\r\n+        whereClause.memberType = 'member';\r\n+        whereClause.keyFob = null;\r\n+        break;\r\n+      case 'prospect':\r\n+        whereClause.memberType = 'prospect';\r\n+        break;\r\n+      case 'recent':\r\n+        const thirtyDaysAgo = new Date();\r\n+        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\r\n+        whereClause.createdAt = { gte: thirtyDaysAgo };\r\n+        break;\r\n+      default:\r\n+        break;\r\n+    }\r\n+\r\n+    const [members, total] = await Promise.all([\r\n+      prisma.member.findMany({\r\n+        where: whereClause,\r\n+        orderBy: { createdAt: 'desc' },\r\n+        skip,\r\n+        take: Number(limit),\r\n+      }),\r\n+      prisma.member.count({ where: whereClause }),\r\n+    ]);\r\n+\r\n+    res.json({\r\n+      data: members,\r\n+      meta: {\r\n+        total,\r\n+        page: Number(page),\r\n+        pageSize: Number(limit),\r\n+      },\r\n+    });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ error: 'Failed to fetch members' });\r\n+  }\r\n+});\r\n+\r\n+\r\n export default router;\r\n"
                },
                {
                    "date": 1752218281891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,6 +125,29 @@\n     res.status(500).json({ error: 'Failed to fetch members' });\r\n   }\r\n });\r\n \r\n+// GET /api/members/:id\r\n+router.get('/:id', async (req, res) => {\r\n+  const { id } = req.params;\r\n \r\n+  try {\r\n+    const member = await prisma.member.findUnique({\r\n+      where: { id },\r\n+      include: {\r\n+        trainer: true,\r\n+        club: true,\r\n+      },\r\n+    });\r\n+\r\n+    if (!member) return res.status(404).json({ error: 'Member not found' });\r\n+\r\n+    res.json(member);\r\n+  } catch (err) {\r\n+    console.error('Fetch member detail error:', err);\r\n+    res.status(500).json({ error: 'Failed to fetch member details' });\r\n+  }\r\n+});\r\n+\r\n+\r\n+\r\n export default router;\r\n"
                },
                {
                    "date": 1752292982034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,173 @@\n+import express from 'express';\r\n+import { PrismaClient } from '@prisma/client';\r\n+import { Request, Response } from 'express';\r\n+\r\n+const router = express.Router();\r\n+const prisma = new PrismaClient();\r\n+\r\n+router.post('/', async (req, res) => {\r\n+  try {\r\n+    const {\r\n+      firstName, lastName, email, phone, work, dateOfBirth, gender, avatar,\r\n+      club, keyFob, tags, note, memberType,\r\n+      address, marketing, additional, emergency,\r\n+      medicalInfo,\r\n+    } = req.body;\r\n+\r\n+    const newMember = await prisma.member.create({\r\n+      data: {\r\n+        firstName,\r\n+        lastName,\r\n+        email,\r\n+        phone,\r\n+        work,\r\n+        dateOfBirth: dateOfBirth ? new Date(dateOfBirth) : null,\r\n+        gender,\r\n+        avatarUrl: avatar || null,\r\n+        keyFob,\r\n+        tags,\r\n+        note,\r\n+        memberType,\r\n+\r\n+        // Address\r\n+        street: address?.street || null,\r\n+        city: address?.city || null,\r\n+        state: address?.state || null,\r\n+        zip: address?.zip || null,\r\n+        addressSearch: address?.search || null,\r\n+\r\n+        // Marketing\r\n+        salesRep: marketing?.salesRep || null,\r\n+        sourcePromotion: marketing?.sourcePromotion || null,\r\n+        referredBy: marketing?.referredBy || null,\r\n+\r\n+        // Additional\r\n+        trainerId: additional?.trainerId || null,\r\n+        joiningDate: additional?.joiningDate ? new Date(additional.joiningDate) : null,\r\n+        occupation: additional?.occupation || null,\r\n+        organization: additional?.organization || null,\r\n+        involvementType: additional?.involvementType || null,\r\n+\r\n+        // Emergency\r\n+        emergencyName: emergency?.name || null,\r\n+        emergencyRelationship: emergency?.relationship || null,\r\n+        emergencyPhone: emergency?.phone || null,\r\n+        emergencyEmail: emergency?.email || null,\r\n+\r\n+        medicalInfo,\r\n+        clubId: club,\r\n+      },\r\n+    });\r\n+\r\n+    res.status(201).json(newMember);\r\n+  } catch (err) {\r\n+    console.error('Add Member Error:', err);\r\n+    res.status(500).json({ error: 'Failed to create member' });\r\n+  }\r\n+});\r\n+\r\n+router.get('/', async (req, res) => {\r\n+  try {\r\n+    const { tab = 'all', search = '', page = 1, limit = 10, clubId } = req.query;\r\n+    const skip = (Number(page) - 1) * Number(limit);\r\n+\r\n+    let whereClause: any = {\r\n+      clubId: String(clubId),\r\n+    };\r\n+\r\n+    if (search) {\r\n+      whereClause.OR = [\r\n+        { firstName: { contains: search, mode: 'insensitive' } },\r\n+        { lastName: { contains: search, mode: 'insensitive' } },\r\n+        { email: { contains: search, mode: 'insensitive' } },\r\n+      ];\r\n+    }\r\n+\r\n+    switch (tab) {\r\n+      case 'active':\r\n+        whereClause.memberType = 'member';\r\n+        break;\r\n+      case 'expired':\r\n+        whereClause.memberType = 'member';\r\n+        whereClause.keyFob = null;\r\n+        break;\r\n+      case 'prospect':\r\n+        whereClause.memberType = 'prospect';\r\n+        break;\r\n+      case 'recent':\r\n+        const thirtyDaysAgo = new Date();\r\n+        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\r\n+        whereClause.createdAt = { gte: thirtyDaysAgo };\r\n+        break;\r\n+      default:\r\n+        break;\r\n+    }\r\n+\r\n+    const [members, total] = await Promise.all([\r\n+      prisma.member.findMany({\r\n+        where: whereClause,\r\n+        orderBy: { createdAt: 'desc' },\r\n+        skip,\r\n+        take: Number(limit),\r\n+      }),\r\n+      prisma.member.count({ where: whereClause }),\r\n+    ]);\r\n+\r\n+    res.json({\r\n+      data: members,\r\n+      meta: {\r\n+        total,\r\n+        page: Number(page),\r\n+        pageSize: Number(limit),\r\n+      },\r\n+    });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ error: 'Failed to fetch members' });\r\n+  }\r\n+});\r\n+\r\n+// GET /api/members/:id\r\n+router.get('/:id', async (req, res) => {\r\n+  const { id } = req.params;\r\n+\r\n+  try {\r\n+    const member = await prisma.member.findUnique({\r\n+      where: { id },\r\n+      include: {\r\n+        trainer: true,\r\n+        club: true,\r\n+      },\r\n+    });\r\n+\r\n+    if (!member) return res.status(404).json({ error: 'Member not found' });\r\n+\r\n+    res.json(member);\r\n+  } catch (err) {\r\n+    console.error('Fetch member detail error:', err);\r\n+    res.status(500).json({ error: 'Failed to fetch member details' });\r\n+  }\r\n+});\r\n+\r\n+//update member\r\n+\r\n+export const updateMemberById = async (req: Request, res: Response) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    const updatedData = req.body;\r\n+\r\n+    const updated = await prisma.member.update({\r\n+      where: { id },\r\n+      data: updatedData\r\n+    });\r\n+\r\n+    return res.status(200).json(updated);\r\n+  } catch (err) {\r\n+    console.error('Error updating member:', err);\r\n+    return res.status(500).json({ error: 'Failed to update member' });\r\n+  }\r\n+};\r\n+\r\n+\r\n+\r\n+export default router;\r\n"
                },
                {
                    "date": 1752293244097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,177 +150,67 @@\n });\r\n \r\n //update member\r\n \r\n-export const updateMemberById = async (req: Request, res: Response) => {\r\n+// PUT /api/members/:id\r\n+router.put('/:id', async (req: Request, res: Response) => {\r\n   try {\r\n     const { id } = req.params;\r\n     const updatedData = req.body;\r\n \r\n     const updated = await prisma.member.update({\r\n       where: { id },\r\n-      data: updatedData\r\n-    });\r\n-\r\n-    return res.status(200).json(updated);\r\n-  } catch (err) {\r\n-    console.error('Error updating member:', err);\r\n-    return res.status(500).json({ error: 'Failed to update member' });\r\n-  }\r\n-};\r\n-\r\n-\r\n-\r\n-export default router;\r\n-import express from 'express';\r\n-import { PrismaClient } from '@prisma/client';\r\n-\r\n-const router = express.Router();\r\n-const prisma = new PrismaClient();\r\n-\r\n-router.post('/', async (req, res) => {\r\n-  try {\r\n-    const {\r\n-      firstName, lastName, email, phone, work, dateOfBirth, gender, avatar,\r\n-      club, keyFob, tags, note, memberType,\r\n-      address, marketing, additional, emergency,\r\n-      medicalInfo,\r\n-    } = req.body;\r\n-\r\n-    const newMember = await prisma.member.create({\r\n       data: {\r\n-        firstName,\r\n-        lastName,\r\n-        email,\r\n-        phone,\r\n-        work,\r\n-        dateOfBirth: dateOfBirth ? new Date(dateOfBirth) : null,\r\n-        gender,\r\n-        avatarUrl: avatar || null,\r\n-        keyFob,\r\n-        tags,\r\n-        note,\r\n-        memberType,\r\n+        firstName: updatedData.firstName,\r\n+        lastName: updatedData.lastName,\r\n+        email: updatedData.email,\r\n+        phone: updatedData.phone,\r\n+        work: updatedData.work,\r\n+        dateOfBirth: updatedData.dateOfBirth ? new Date(updatedData.dateOfBirth) : null,\r\n+        gender: updatedData.gender,\r\n+        avatarUrl: updatedData.avatar || null,\r\n+        keyFob: updatedData.keyFob,\r\n+        tags: updatedData.tags,\r\n+        note: updatedData.note,\r\n+        memberType: updatedData.memberType,\r\n \r\n         // Address\r\n-        street: address?.street || null,\r\n-        city: address?.city || null,\r\n-        state: address?.state || null,\r\n-        zip: address?.zip || null,\r\n-        addressSearch: address?.search || null,\r\n+        street: updatedData.address?.street || null,\r\n+        city: updatedData.address?.city || null,\r\n+        state: updatedData.address?.state || null,\r\n+        zip: updatedData.address?.zip || null,\r\n+        addressSearch: updatedData.address?.search || null,\r\n \r\n         // Marketing\r\n-        salesRep: marketing?.salesRep || null,\r\n-        sourcePromotion: marketing?.sourcePromotion || null,\r\n-        referredBy: marketing?.referredBy || null,\r\n+        salesRep: updatedData.marketing?.salesRep || null,\r\n+        sourcePromotion: updatedData.marketing?.sourcePromotion || null,\r\n+        referredBy: updatedData.marketing?.referredBy || null,\r\n \r\n         // Additional\r\n-        trainerId: additional?.trainerId || null,\r\n-        joiningDate: additional?.joiningDate ? new Date(additional.joiningDate) : null,\r\n-        occupation: additional?.occupation || null,\r\n-        organization: additional?.organization || null,\r\n-        involvementType: additional?.involvementType || null,\r\n+        trainerId: updatedData.additional?.trainerId || null,\r\n+        joiningDate: updatedData.additional?.joiningDate ? new Date(updatedData.additional.joiningDate) : null,\r\n+        occupation: updatedData.additional?.occupation || null,\r\n+        organization: updatedData.additional?.organization || null,\r\n+        involvementType: updatedData.additional?.involvementType || null,\r\n \r\n         // Emergency\r\n-        emergencyName: emergency?.name || null,\r\n-        emergencyRelationship: emergency?.relationship || null,\r\n-        emergencyPhone: emergency?.phone || null,\r\n-        emergencyEmail: emergency?.email || null,\r\n+        emergencyName: updatedData.emergency?.name || null,\r\n+        emergencyRelationship: updatedData.emergency?.relationship || null,\r\n+        emergencyPhone: updatedData.emergency?.phone || null,\r\n+        emergencyEmail: updatedData.emergency?.email || null,\r\n \r\n-        medicalInfo,\r\n-        clubId: club,\r\n+        medicalInfo: updatedData.medicalInfo,\r\n+        clubId: updatedData.club,\r\n       },\r\n     });\r\n \r\n-    res.status(201).json(newMember);\r\n+    return res.status(200).json(updated);\r\n   } catch (err) {\r\n-    console.error('Add Member Error:', err);\r\n-    res.status(500).json({ error: 'Failed to create member' });\r\n+    console.error('Error updating member:', err);\r\n+    return res.status(500).json({ error: 'Failed to update member' });\r\n   }\r\n });\r\n \r\n-router.get('/', async (req, res) => {\r\n-  try {\r\n-    const { tab = 'all', search = '', page = 1, limit = 10, clubId } = req.query;\r\n-    const skip = (Number(page) - 1) * Number(limit);\r\n \r\n-    let whereClause: any = {\r\n-      clubId: String(clubId),\r\n-    };\r\n \r\n-    if (search) {\r\n-      whereClause.OR = [\r\n-        { firstName: { contains: search, mode: 'insensitive' } },\r\n-        { lastName: { contains: search, mode: 'insensitive' } },\r\n-        { email: { contains: search, mode: 'insensitive' } },\r\n-      ];\r\n-    }\r\n \r\n-    switch (tab) {\r\n-      case 'active':\r\n-        whereClause.memberType = 'member';\r\n-        break;\r\n-      case 'expired':\r\n-        whereClause.memberType = 'member';\r\n-        whereClause.keyFob = null;\r\n-        break;\r\n-      case 'prospect':\r\n-        whereClause.memberType = 'prospect';\r\n-        break;\r\n-      case 'recent':\r\n-        const thirtyDaysAgo = new Date();\r\n-        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\r\n-        whereClause.createdAt = { gte: thirtyDaysAgo };\r\n-        break;\r\n-      default:\r\n-        break;\r\n-    }\r\n-\r\n-    const [members, total] = await Promise.all([\r\n-      prisma.member.findMany({\r\n-        where: whereClause,\r\n-        orderBy: { createdAt: 'desc' },\r\n-        skip,\r\n-        take: Number(limit),\r\n-      }),\r\n-      prisma.member.count({ where: whereClause }),\r\n-    ]);\r\n-\r\n-    res.json({\r\n-      data: members,\r\n-      meta: {\r\n-        total,\r\n-        page: Number(page),\r\n-        pageSize: Number(limit),\r\n-      },\r\n-    });\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ error: 'Failed to fetch members' });\r\n-  }\r\n-});\r\n-\r\n-// GET /api/members/:id\r\n-router.get('/:id', async (req, res) => {\r\n-  const { id } = req.params;\r\n-\r\n-  try {\r\n-    const member = await prisma.member.findUnique({\r\n-      where: { id },\r\n-      include: {\r\n-        trainer: true,\r\n-        club: true,\r\n-      },\r\n-    });\r\n-\r\n-    if (!member) return res.status(404).json({ error: 'Member not found' });\r\n-\r\n-    res.json(member);\r\n-  } catch (err) {\r\n-    console.error('Fetch member detail error:', err);\r\n-    res.status(500).json({ error: 'Failed to fetch member details' });\r\n-  }\r\n-});\r\n-\r\n-\r\n-\r\n export default router;\r\n"
                },
                {
                    "date": 1752294039463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,63 +4,73 @@\n \r\n const router = express.Router();\r\n const prisma = new PrismaClient();\r\n \r\n-router.post('/', async (req, res) => {\r\n-  try {\r\n-    const {\r\n-      firstName, lastName, email, phone, work, dateOfBirth, gender, avatar,\r\n-      club, keyFob, tags, note, memberType,\r\n-      address, marketing, additional, emergency,\r\n-      medicalInfo,\r\n-    } = req.body;\r\n+// router.post('/', async (req, res) => {\r\n+//   try {\r\n+//     const {\r\n+//       firstName, lastName, email, phone, work, dateOfBirth, gender, avatar,\r\n+//       club, keyFob, tags, note, memberType,\r\n+//       address, marketing, additional, emergency,\r\n+//       medicalInfo,\r\n+//     } = req.body;\r\n \r\n-    const newMember = await prisma.member.create({\r\n-      data: {\r\n-        firstName,\r\n-        lastName,\r\n-        email,\r\n-        phone,\r\n-        work,\r\n-        dateOfBirth: dateOfBirth ? new Date(dateOfBirth) : null,\r\n-        gender,\r\n-        avatarUrl: avatar || null,\r\n-        keyFob,\r\n-        tags,\r\n-        note,\r\n-        memberType,\r\n+//     const newMember = await prisma.member.create({\r\n+//       data: {\r\n+//         firstName,\r\n+//         lastName,\r\n+//         email,\r\n+//         phone,\r\n+//         work,\r\n+//         dateOfBirth: dateOfBirth ? new Date(dateOfBirth) : null,\r\n+//         gender,\r\n+//         avatarUrl: avatar || null,\r\n+//         keyFob,\r\n+//         tags,\r\n+//         note,\r\n+//         memberType,\r\n \r\n-        // Address\r\n-        street: address?.street || null,\r\n-        city: address?.city || null,\r\n-        state: address?.state || null,\r\n-        zip: address?.zip || null,\r\n-        addressSearch: address?.search || null,\r\n+//         // Address\r\n+//         street: address?.street || null,\r\n+//         city: address?.city || null,\r\n+//         state: address?.state || null,\r\n+//         zip: address?.zip || null,\r\n+//         addressSearch: address?.search || null,\r\n \r\n-        // Marketing\r\n-        salesRep: marketing?.salesRep || null,\r\n-        sourcePromotion: marketing?.sourcePromotion || null,\r\n-        referredBy: marketing?.referredBy || null,\r\n+//         // Marketing\r\n+//         salesRep: marketing?.salesRep || null,\r\n+//         sourcePromotion: marketing?.sourcePromotion || null,\r\n+//         referredBy: marketing?.referredBy || null,\r\n \r\n-        // Additional\r\n-        trainerId: additional?.trainerId || null,\r\n-        joiningDate: additional?.joiningDate ? new Date(additional.joiningDate) : null,\r\n-        occupation: additional?.occupation || null,\r\n-        organization: additional?.organization || null,\r\n-        involvementType: additional?.involvementType || null,\r\n+//         // Additional\r\n+//         trainerId: additional?.trainerId || null,\r\n+//         joiningDate: additional?.joiningDate ? new Date(additional.joiningDate) : null,\r\n+//         occupation: additional?.occupation || null,\r\n+//         organization: additional?.organization || null,\r\n+//         involvementType: additional?.involvementType || null,\r\n \r\n-        // Emergency\r\n-        emergencyName: emergency?.name || null,\r\n-        emergencyRelationship: emergency?.relationship || null,\r\n-        emergencyPhone: emergency?.phone || null,\r\n-        emergencyEmail: emergency?.email || null,\r\n+//         // Emergency\r\n+//         emergencyName: emergency?.name || null,\r\n+//         emergencyRelationship: emergency?.relationship || null,\r\n+//         emergencyPhone: emergency?.phone || null,\r\n+//         emergencyEmail: emergency?.email || null,\r\n \r\n-        medicalInfo,\r\n-        clubId: club,\r\n-      },\r\n-    });\r\n+//         medicalInfo,\r\n+//         clubId: club,\r\n+//       },\r\n+//     });\r\n \r\n-    res.status(201).json(newMember);\r\n+//     res.status(201).json(newMember);\r\n+//   } catch (err) {\r\n+//     console.error('Add Member Error:', err);\r\n+//     res.status(500).json({ error: 'Failed to create member' });\r\n+//   }\r\n+// });\r\n+\r\n+router.post('/', async (req, res) => {\r\n+  try {\r\n+    console.log('📦 Incoming Payload:', JSON.stringify(req.body, null, 2));\r\n+    return res.status(200).json({ msg: 'Received for debugging' }); // ⛔ don't create yet\r\n   } catch (err) {\r\n     console.error('Add Member Error:', err);\r\n     res.status(500).json({ error: 'Failed to create member' });\r\n   }\r\n"
                },
                {
                    "date": 1752294658831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,76 +1,67 @@\n+//src>routes>member.routes.ts\r\n import express from 'express';\r\n import { PrismaClient } from '@prisma/client';\r\n import { Request, Response } from 'express';\r\n \r\n const router = express.Router();\r\n const prisma = new PrismaClient();\r\n \r\n-// router.post('/', async (req, res) => {\r\n-//   try {\r\n-//     const {\r\n-//       firstName, lastName, email, phone, work, dateOfBirth, gender, avatar,\r\n-//       club, keyFob, tags, note, memberType,\r\n-//       address, marketing, additional, emergency,\r\n-//       medicalInfo,\r\n-//     } = req.body;\r\n+router.post('/', async (req, res) => {\r\n+  try {\r\n+    const {\r\n+      firstName, lastName, email, phone, work, dateOfBirth, gender, avatar,\r\n+      club, keyFob, tags, note, memberType,\r\n+      address, marketing, additional, emergency,\r\n+      medicalInfo,\r\n+    } = req.body;\r\n \r\n-//     const newMember = await prisma.member.create({\r\n-//       data: {\r\n-//         firstName,\r\n-//         lastName,\r\n-//         email,\r\n-//         phone,\r\n-//         work,\r\n-//         dateOfBirth: dateOfBirth ? new Date(dateOfBirth) : null,\r\n-//         gender,\r\n-//         avatarUrl: avatar || null,\r\n-//         keyFob,\r\n-//         tags,\r\n-//         note,\r\n-//         memberType,\r\n+    const newMember = await prisma.member.create({\r\n+      data: {\r\n+        firstName,\r\n+        lastName,\r\n+        email,\r\n+        phone,\r\n+        work,\r\n+        dateOfBirth: dateOfBirth ? new Date(dateOfBirth) : null,\r\n+        gender,\r\n+        avatarUrl: avatar || null,\r\n+        keyFob,\r\n+        tags,\r\n+        note,\r\n+        memberType,\r\n \r\n-//         // Address\r\n-//         street: address?.street || null,\r\n-//         city: address?.city || null,\r\n-//         state: address?.state || null,\r\n-//         zip: address?.zip || null,\r\n-//         addressSearch: address?.search || null,\r\n+        // Address\r\n+        street: address?.street || null,\r\n+        city: address?.city || null,\r\n+        state: address?.state || null,\r\n+        zip: address?.zip || null,\r\n+        addressSearch: address?.search || null,\r\n \r\n-//         // Marketing\r\n-//         salesRep: marketing?.salesRep || null,\r\n-//         sourcePromotion: marketing?.sourcePromotion || null,\r\n-//         referredBy: marketing?.referredBy || null,\r\n+        // Marketing\r\n+        salesRep: marketing?.salesRep || null,\r\n+        sourcePromotion: marketing?.sourcePromotion || null,\r\n+        referredBy: marketing?.referredBy || null,\r\n \r\n-//         // Additional\r\n-//         trainerId: additional?.trainerId || null,\r\n-//         joiningDate: additional?.joiningDate ? new Date(additional.joiningDate) : null,\r\n-//         occupation: additional?.occupation || null,\r\n-//         organization: additional?.organization || null,\r\n-//         involvementType: additional?.involvementType || null,\r\n+        // Additional\r\n+        trainerId: additional?.trainerId || null,\r\n+        joiningDate: additional?.joiningDate ? new Date(additional.joiningDate) : null,\r\n+        occupation: additional?.occupation || null,\r\n+        organization: additional?.organization || null,\r\n+        involvementType: additional?.involvementType || null,\r\n \r\n-//         // Emergency\r\n-//         emergencyName: emergency?.name || null,\r\n-//         emergencyRelationship: emergency?.relationship || null,\r\n-//         emergencyPhone: emergency?.phone || null,\r\n-//         emergencyEmail: emergency?.email || null,\r\n+        // Emergency\r\n+        emergencyName: emergency?.name || null,\r\n+        emergencyRelationship: emergency?.relationship || null,\r\n+        emergencyPhone: emergency?.phone || null,\r\n+        emergencyEmail: emergency?.email || null,\r\n \r\n-//         medicalInfo,\r\n-//         clubId: club,\r\n-//       },\r\n-//     });\r\n+        medicalInfo,\r\n+        clubId: club,\r\n+      },\r\n+    });\r\n \r\n-//     res.status(201).json(newMember);\r\n-//   } catch (err) {\r\n-//     console.error('Add Member Error:', err);\r\n-//     res.status(500).json({ error: 'Failed to create member' });\r\n-//   }\r\n-// });\r\n-\r\n-router.post('/', async (req, res) => {\r\n-  try {\r\n-    console.log('📦 Incoming Payload:', JSON.stringify(req.body, null, 2));\r\n-    return res.status(200).json({ msg: 'Received for debugging' }); // ⛔ don't create yet\r\n+    res.status(201).json(newMember);\r\n   } catch (err) {\r\n     console.error('Add Member Error:', err);\r\n     res.status(500).json({ error: 'Failed to create member' });\r\n   }\r\n"
                },
                {
                    "date": 1752295610638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,8 +137,9 @@\n       where: { id },\r\n       include: {\r\n         trainer: true,\r\n         club: true,\r\n+        membership:true,\r\n       },\r\n     });\r\n \r\n     if (!member) return res.status(404).json({ error: 'Member not found' });\r\n"
                },
                {
                    "date": 1752297450886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,8 +66,34 @@\n     res.status(500).json({ error: 'Failed to create member' });\r\n   }\r\n });\r\n \r\n+// Add membership to a Member\r\n+\r\n+router.post('/:id/membership', async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    const { planName, startDate, endDate, autoRenew, status } = req.body;\r\n+\r\n+    const membership = await prisma.membership.create({\r\n+      data: {\r\n+        planName,\r\n+        startDate: new Date(startDate),\r\n+        endDate: new Date(endDate),\r\n+        autoRenew,\r\n+        status,\r\n+        memberId: id,\r\n+      },\r\n+    });\r\n+\r\n+    res.status(201).json(membership);\r\n+  } catch (err) {\r\n+    console.error('Add Membership Error:', err);\r\n+    res.status(500).json({ error: 'Failed to create membership' });\r\n+  }\r\n+});\r\n+\r\n+\r\n router.get('/', async (req, res) => {\r\n   try {\r\n     const { tab = 'all', search = '', page = 1, limit = 10, clubId } = req.query;\r\n     const skip = (Number(page) - 1) * Number(limit);\r\n"
                },
                {
                    "date": 1752298161037,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,8 +73,18 @@\n   try {\r\n     const { id } = req.params;\r\n     const { planName, startDate, endDate, autoRenew, status } = req.body;\r\n \r\n+    \r\n+    console.log('Received membership data:', {\r\n+      id,\r\n+      planName,\r\n+      startDate,\r\n+      endDate,\r\n+      autoRenew,\r\n+      status\r\n+    })\r\n+\r\n     const membership = await prisma.membership.create({\r\n       data: {\r\n         planName,\r\n         startDate: new Date(startDate),\r\n"
                },
                {
                    "date": 1752372770004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n   try {\r\n     const { id } = req.params;\r\n     const { planName, startDate, endDate, autoRenew, status } = req.body;\r\n \r\n-    \r\n+    const price = 5000;\r\n     console.log('Received membership data:', {\r\n       id,\r\n       planName,\r\n       startDate,\r\n@@ -94,8 +94,19 @@\n         memberId: id,\r\n       },\r\n     });\r\n \r\n+    await prisma.invoice.create({\r\n+  data: {\r\n+    memberId: id,\r\n+    planName,\r\n+    amount: price,\r\n+    status: 'unpaid',\r\n+    issuedAt: new Date(),\r\n+    dueDate: new Date(new Date().setDate(new Date().getDate() + 7)),\r\n+  },\r\n+});\r\n+\r\n     res.status(201).json(membership);\r\n   } catch (err) {\r\n     console.error('Add Membership Error:', err);\r\n     res.status(500).json({ error: 'Failed to create membership' });\r\n"
                },
                {
                    "date": 1752373338038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,18 +73,18 @@\n   try {\r\n     const { id } = req.params;\r\n     const { planName, startDate, endDate, autoRenew, status } = req.body;\r\n \r\n-    const price = 5000;\r\n-    console.log('Received membership data:', {\r\n-      id,\r\n-      planName,\r\n-      startDate,\r\n-      endDate,\r\n-      autoRenew,\r\n-      status\r\n-    })\r\n+    const plan = await prisma.membershipPlan.findUnique({\r\n+  where: { name: planName },\r\n+});\r\n+if (!plan) {\r\n+  return res.status(400).json({ error: 'Invalid plan selected' });\r\n+}\r\n \r\n+\r\n+    \r\n+\r\n     const membership = await prisma.membership.create({\r\n       data: {\r\n         planName,\r\n         startDate: new Date(startDate),\r\n@@ -98,9 +98,9 @@\n     await prisma.invoice.create({\r\n   data: {\r\n     memberId: id,\r\n     planName,\r\n-    amount: price,\r\n+    amount: plan.price,\r\n     status: 'unpaid',\r\n     issuedAt: new Date(),\r\n     dueDate: new Date(new Date().setDate(new Date().getDate() + 7)),\r\n   },\r\n"
                },
                {
                    "date": 1752393057498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,13 +49,15 @@\n         organization: additional?.organization || null,\r\n         involvementType: additional?.involvementType || null,\r\n \r\n         // Emergency\r\n-        emergencyName: emergency?.name || null,\r\n-        emergencyRelationship: emergency?.relationship || null,\r\n-        emergencyPhone: emergency?.phone || null,\r\n-        emergencyEmail: emergency?.email || null,\r\n+        // emergencyName: emergency?.name || null,\r\n+        // emergencyRelationship: emergency?.relationship || null,\r\n+        // emergencyPhone: emergency?.phone || null,\r\n+        // emergencyEmail: emergency?.email || null,\r\n \r\n+        emergency: emergency || [],\r\n+\r\n         medicalInfo,\r\n         clubId: club,\r\n       },\r\n     });\r\n"
                },
                {
                    "date": 1752393102461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -243,13 +243,15 @@\n         organization: updatedData.additional?.organization || null,\r\n         involvementType: updatedData.additional?.involvementType || null,\r\n \r\n         // Emergency\r\n-        emergencyName: updatedData.emergency?.name || null,\r\n-        emergencyRelationship: updatedData.emergency?.relationship || null,\r\n-        emergencyPhone: updatedData.emergency?.phone || null,\r\n-        emergencyEmail: updatedData.emergency?.email || null,\r\n+        // emergencyName: updatedData.emergency?.name || null,\r\n+        // emergencyRelationship: updatedData.emergency?.relationship || null,\r\n+        // emergencyPhone: updatedData.emergency?.phone || null,\r\n+        // emergencyEmail: updatedData.emergency?.email || null,\r\n \r\n+        emergency: updatedData.emergency || [],\r\n+\r\n         medicalInfo: updatedData.medicalInfo,\r\n         clubId: updatedData.club,\r\n       },\r\n     });\r\n"
                },
                {
                    "date": 1752395149302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -250,9 +250,15 @@\n         // emergencyEmail: updatedData.emergency?.email || null,\r\n \r\n         emergency: updatedData.emergency || [],\r\n \r\n-        medicalInfo: updatedData.medicalInfo,\r\n+        medicalInfo: updatedData.medicalInfo || '',\r\n+allergies: updatedData.allergies || '',\r\n+medications: updatedData.medications || '',\r\n+chronicConditions: updatedData.chronicConditions || '',\r\n+injuries: updatedData.injuries || '',\r\n+doctorContact: updatedData.doctorContact || '',\r\n+lastExamDate: updatedData.lastExamDate ? new Date(updatedData.lastExamDate) : null,\r\n         clubId: updatedData.club,\r\n       },\r\n     });\r\n \r\n"
                },
                {
                    "date": 1752395154638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,275 @@\n+//src>routes>member.routes.ts\r\n+import express from 'express';\r\n+import { PrismaClient } from '@prisma/client';\r\n+import { Request, Response } from 'express';\r\n+\r\n+const router = express.Router();\r\n+const prisma = new PrismaClient();\r\n+\r\n+router.post('/', async (req, res) => {\r\n+  try {\r\n+    const {\r\n+      firstName, lastName, email, phone, work, dateOfBirth, gender, avatar,\r\n+      club, keyFob, tags, note, memberType,\r\n+      address, marketing, additional, emergency,\r\n+      medicalInfo,\r\n+    } = req.body;\r\n+\r\n+    const newMember = await prisma.member.create({\r\n+      data: {\r\n+        firstName,\r\n+        lastName,\r\n+        email,\r\n+        phone,\r\n+        work,\r\n+        dateOfBirth: dateOfBirth ? new Date(dateOfBirth) : null,\r\n+        gender,\r\n+        avatarUrl: avatar || null,\r\n+        keyFob,\r\n+        tags,\r\n+        note,\r\n+        memberType,\r\n+\r\n+        // Address\r\n+        street: address?.street || null,\r\n+        city: address?.city || null,\r\n+        state: address?.state || null,\r\n+        zip: address?.zip || null,\r\n+        addressSearch: address?.search || null,\r\n+\r\n+        // Marketing\r\n+        salesRep: marketing?.salesRep || null,\r\n+        sourcePromotion: marketing?.sourcePromotion || null,\r\n+        referredBy: marketing?.referredBy || null,\r\n+\r\n+        // Additional\r\n+        trainerId: additional?.trainerId || null,\r\n+        joiningDate: additional?.joiningDate ? new Date(additional.joiningDate) : null,\r\n+        occupation: additional?.occupation || null,\r\n+        organization: additional?.organization || null,\r\n+        involvementType: additional?.involvementType || null,\r\n+\r\n+        // Emergency\r\n+        // emergencyName: emergency?.name || null,\r\n+        // emergencyRelationship: emergency?.relationship || null,\r\n+        // emergencyPhone: emergency?.phone || null,\r\n+        // emergencyEmail: emergency?.email || null,\r\n+\r\n+        emergency: emergency || [],\r\n+\r\n+        medicalInfo,\r\n+        clubId: club,\r\n+      },\r\n+    });\r\n+\r\n+    res.status(201).json(newMember);\r\n+  } catch (err) {\r\n+    console.error('Add Member Error:', err);\r\n+    res.status(500).json({ error: 'Failed to create member' });\r\n+  }\r\n+});\r\n+\r\n+// Add membership to a Member\r\n+\r\n+router.post('/:id/membership', async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    const { planName, startDate, endDate, autoRenew, status } = req.body;\r\n+\r\n+    const plan = await prisma.membershipPlan.findUnique({\r\n+  where: { name: planName },\r\n+});\r\n+if (!plan) {\r\n+  return res.status(400).json({ error: 'Invalid plan selected' });\r\n+}\r\n+\r\n+\r\n+    \r\n+\r\n+    const membership = await prisma.membership.create({\r\n+      data: {\r\n+        planName,\r\n+        startDate: new Date(startDate),\r\n+        endDate: new Date(endDate),\r\n+        autoRenew,\r\n+        status,\r\n+        memberId: id,\r\n+      },\r\n+    });\r\n+\r\n+    await prisma.invoice.create({\r\n+  data: {\r\n+    memberId: id,\r\n+    planName,\r\n+    amount: plan.price,\r\n+    status: 'unpaid',\r\n+    issuedAt: new Date(),\r\n+    dueDate: new Date(new Date().setDate(new Date().getDate() + 7)),\r\n+  },\r\n+});\r\n+\r\n+    res.status(201).json(membership);\r\n+  } catch (err) {\r\n+    console.error('Add Membership Error:', err);\r\n+    res.status(500).json({ error: 'Failed to create membership' });\r\n+  }\r\n+});\r\n+\r\n+\r\n+router.get('/', async (req, res) => {\r\n+  try {\r\n+    const { tab = 'all', search = '', page = 1, limit = 10, clubId } = req.query;\r\n+    const skip = (Number(page) - 1) * Number(limit);\r\n+\r\n+    let whereClause: any = {\r\n+      clubId: String(clubId),\r\n+    };\r\n+\r\n+    if (search) {\r\n+      whereClause.OR = [\r\n+        { firstName: { contains: search, mode: 'insensitive' } },\r\n+        { lastName: { contains: search, mode: 'insensitive' } },\r\n+        { email: { contains: search, mode: 'insensitive' } },\r\n+      ];\r\n+    }\r\n+\r\n+    switch (tab) {\r\n+      case 'active':\r\n+        whereClause.memberType = 'member';\r\n+        break;\r\n+      case 'expired':\r\n+        whereClause.memberType = 'member';\r\n+        whereClause.keyFob = null;\r\n+        break;\r\n+      case 'prospect':\r\n+        whereClause.memberType = 'prospect';\r\n+        break;\r\n+      case 'recent':\r\n+        const thirtyDaysAgo = new Date();\r\n+        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\r\n+        whereClause.createdAt = { gte: thirtyDaysAgo };\r\n+        break;\r\n+      default:\r\n+        break;\r\n+    }\r\n+\r\n+    const [members, total] = await Promise.all([\r\n+      prisma.member.findMany({\r\n+        where: whereClause,\r\n+        orderBy: { createdAt: 'desc' },\r\n+        skip,\r\n+        take: Number(limit),\r\n+      }),\r\n+      prisma.member.count({ where: whereClause }),\r\n+    ]);\r\n+\r\n+    res.json({\r\n+      data: members,\r\n+      meta: {\r\n+        total,\r\n+        page: Number(page),\r\n+        pageSize: Number(limit),\r\n+      },\r\n+    });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ error: 'Failed to fetch members' });\r\n+  }\r\n+});\r\n+\r\n+// GET /api/members/:id\r\n+router.get('/:id', async (req, res) => {\r\n+  const { id } = req.params;\r\n+\r\n+  try {\r\n+    const member = await prisma.member.findUnique({\r\n+      where: { id },\r\n+      include: {\r\n+        trainer: true,\r\n+        club: true,\r\n+        membership:true,\r\n+      },\r\n+    });\r\n+\r\n+    if (!member) return res.status(404).json({ error: 'Member not found' });\r\n+\r\n+    res.json(member);\r\n+  } catch (err) {\r\n+    console.error('Fetch member detail error:', err);\r\n+    res.status(500).json({ error: 'Failed to fetch member details' });\r\n+  }\r\n+});\r\n+\r\n+//update member\r\n+\r\n+// PUT /api/members/:id\r\n+router.put('/:id', async (req: Request, res: Response) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    const updatedData = req.body;\r\n+\r\n+    const updated = await prisma.member.update({\r\n+      where: { id },\r\n+      data: {\r\n+        firstName: updatedData.firstName,\r\n+        lastName: updatedData.lastName,\r\n+        email: updatedData.email,\r\n+        phone: updatedData.phone,\r\n+        work: updatedData.work,\r\n+        dateOfBirth: updatedData.dateOfBirth ? new Date(updatedData.dateOfBirth) : null,\r\n+        gender: updatedData.gender,\r\n+        avatarUrl: updatedData.avatar || null,\r\n+        keyFob: updatedData.keyFob,\r\n+        tags: updatedData.tags,\r\n+        note: updatedData.note,\r\n+        memberType: updatedData.memberType,\r\n+\r\n+        // Address\r\n+        street: updatedData.address?.street || null,\r\n+        city: updatedData.address?.city || null,\r\n+        state: updatedData.address?.state || null,\r\n+        zip: updatedData.address?.zip || null,\r\n+        addressSearch: updatedData.address?.search || null,\r\n+\r\n+        // Marketing\r\n+        salesRep: updatedData.marketing?.salesRep || null,\r\n+        sourcePromotion: updatedData.marketing?.sourcePromotion || null,\r\n+        referredBy: updatedData.marketing?.referredBy || null,\r\n+\r\n+        // Additional\r\n+        trainerId: updatedData.additional?.trainerId || null,\r\n+        joiningDate: updatedData.additional?.joiningDate ? new Date(updatedData.additional.joiningDate) : null,\r\n+        occupation: updatedData.additional?.occupation || null,\r\n+        organization: updatedData.additional?.organization || null,\r\n+        involvementType: updatedData.additional?.involvementType || null,\r\n+\r\n+        // Emergency\r\n+        // emergencyName: updatedData.emergency?.name || null,\r\n+        // emergencyRelationship: updatedData.emergency?.relationship || null,\r\n+        // emergencyPhone: updatedData.emergency?.phone || null,\r\n+        // emergencyEmail: updatedData.emergency?.email || null,\r\n+\r\n+        emergency: updatedData.emergency || [],\r\n+\r\n+        medicalInfo: updatedData.medicalInfo || '',\r\n+allergies: updatedData.allergies || '',\r\n+medications: updatedData.medications || '',\r\n+chronicConditions: updatedData.chronicConditions || '',\r\n+injuries: updatedData.injuries || '',\r\n+doctorContact: updatedData.doctorContact || '',\r\n+lastExamDate: updatedData.lastExamDate ? new Date(updatedData.lastExamDate) : null,\r\n+        clubId: updatedData.club,\r\n+      },\r\n+    });\r\n+\r\n+    return res.status(200).json(updated);\r\n+  } catch (err) {\r\n+    console.error('Error updating member:', err);\r\n+    return res.status(500).json({ error: 'Failed to update member' });\r\n+  }\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+export default router;\r\n"
                },
                {
                    "date": 1752397145812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -243,15 +243,10 @@\n         organization: updatedData.additional?.organization || null,\r\n         involvementType: updatedData.additional?.involvementType || null,\r\n \r\n         // Emergency\r\n-        // emergencyName: updatedData.emergency?.name || null,\r\n-        // emergencyRelationship: updatedData.emergency?.relationship || null,\r\n-        // emergencyPhone: updatedData.emergency?.phone || null,\r\n-        // emergencyEmail: updatedData.emergency?.email || null,\r\n-\r\n         emergency: updatedData.emergency || [],\r\n-\r\n+//medical information\r\n         medicalInfo: updatedData.medicalInfo || '',\r\n allergies: updatedData.allergies || '',\r\n medications: updatedData.medications || '',\r\n chronicConditions: updatedData.chronicConditions || '',\r\n@@ -272,279 +267,4 @@\n \r\n \r\n \r\n export default router;\r\n-//src>routes>member.routes.ts\r\n-import express from 'express';\r\n-import { PrismaClient } from '@prisma/client';\r\n-import { Request, Response } from 'express';\r\n-\r\n-const router = express.Router();\r\n-const prisma = new PrismaClient();\r\n-\r\n-router.post('/', async (req, res) => {\r\n-  try {\r\n-    const {\r\n-      firstName, lastName, email, phone, work, dateOfBirth, gender, avatar,\r\n-      club, keyFob, tags, note, memberType,\r\n-      address, marketing, additional, emergency,\r\n-      medicalInfo,\r\n-    } = req.body;\r\n-\r\n-    const newMember = await prisma.member.create({\r\n-      data: {\r\n-        firstName,\r\n-        lastName,\r\n-        email,\r\n-        phone,\r\n-        work,\r\n-        dateOfBirth: dateOfBirth ? new Date(dateOfBirth) : null,\r\n-        gender,\r\n-        avatarUrl: avatar || null,\r\n-        keyFob,\r\n-        tags,\r\n-        note,\r\n-        memberType,\r\n-\r\n-        // Address\r\n-        street: address?.street || null,\r\n-        city: address?.city || null,\r\n-        state: address?.state || null,\r\n-        zip: address?.zip || null,\r\n-        addressSearch: address?.search || null,\r\n-\r\n-        // Marketing\r\n-        salesRep: marketing?.salesRep || null,\r\n-        sourcePromotion: marketing?.sourcePromotion || null,\r\n-        referredBy: marketing?.referredBy || null,\r\n-\r\n-        // Additional\r\n-        trainerId: additional?.trainerId || null,\r\n-        joiningDate: additional?.joiningDate ? new Date(additional.joiningDate) : null,\r\n-        occupation: additional?.occupation || null,\r\n-        organization: additional?.organization || null,\r\n-        involvementType: additional?.involvementType || null,\r\n-\r\n-        // Emergency\r\n-        // emergencyName: emergency?.name || null,\r\n-        // emergencyRelationship: emergency?.relationship || null,\r\n-        // emergencyPhone: emergency?.phone || null,\r\n-        // emergencyEmail: emergency?.email || null,\r\n-\r\n-        emergency: emergency || [],\r\n-\r\n-        medicalInfo,\r\n-        clubId: club,\r\n-      },\r\n-    });\r\n-\r\n-    res.status(201).json(newMember);\r\n-  } catch (err) {\r\n-    console.error('Add Member Error:', err);\r\n-    res.status(500).json({ error: 'Failed to create member' });\r\n-  }\r\n-});\r\n-\r\n-// Add membership to a Member\r\n-\r\n-router.post('/:id/membership', async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    const { planName, startDate, endDate, autoRenew, status } = req.body;\r\n-\r\n-    const plan = await prisma.membershipPlan.findUnique({\r\n-  where: { name: planName },\r\n-});\r\n-if (!plan) {\r\n-  return res.status(400).json({ error: 'Invalid plan selected' });\r\n-}\r\n-\r\n-\r\n-    \r\n-\r\n-    const membership = await prisma.membership.create({\r\n-      data: {\r\n-        planName,\r\n-        startDate: new Date(startDate),\r\n-        endDate: new Date(endDate),\r\n-        autoRenew,\r\n-        status,\r\n-        memberId: id,\r\n-      },\r\n-    });\r\n-\r\n-    await prisma.invoice.create({\r\n-  data: {\r\n-    memberId: id,\r\n-    planName,\r\n-    amount: plan.price,\r\n-    status: 'unpaid',\r\n-    issuedAt: new Date(),\r\n-    dueDate: new Date(new Date().setDate(new Date().getDate() + 7)),\r\n-  },\r\n-});\r\n-\r\n-    res.status(201).json(membership);\r\n-  } catch (err) {\r\n-    console.error('Add Membership Error:', err);\r\n-    res.status(500).json({ error: 'Failed to create membership' });\r\n-  }\r\n-});\r\n-\r\n-\r\n-router.get('/', async (req, res) => {\r\n-  try {\r\n-    const { tab = 'all', search = '', page = 1, limit = 10, clubId } = req.query;\r\n-    const skip = (Number(page) - 1) * Number(limit);\r\n-\r\n-    let whereClause: any = {\r\n-      clubId: String(clubId),\r\n-    };\r\n-\r\n-    if (search) {\r\n-      whereClause.OR = [\r\n-        { firstName: { contains: search, mode: 'insensitive' } },\r\n-        { lastName: { contains: search, mode: 'insensitive' } },\r\n-        { email: { contains: search, mode: 'insensitive' } },\r\n-      ];\r\n-    }\r\n-\r\n-    switch (tab) {\r\n-      case 'active':\r\n-        whereClause.memberType = 'member';\r\n-        break;\r\n-      case 'expired':\r\n-        whereClause.memberType = 'member';\r\n-        whereClause.keyFob = null;\r\n-        break;\r\n-      case 'prospect':\r\n-        whereClause.memberType = 'prospect';\r\n-        break;\r\n-      case 'recent':\r\n-        const thirtyDaysAgo = new Date();\r\n-        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\r\n-        whereClause.createdAt = { gte: thirtyDaysAgo };\r\n-        break;\r\n-      default:\r\n-        break;\r\n-    }\r\n-\r\n-    const [members, total] = await Promise.all([\r\n-      prisma.member.findMany({\r\n-        where: whereClause,\r\n-        orderBy: { createdAt: 'desc' },\r\n-        skip,\r\n-        take: Number(limit),\r\n-      }),\r\n-      prisma.member.count({ where: whereClause }),\r\n-    ]);\r\n-\r\n-    res.json({\r\n-      data: members,\r\n-      meta: {\r\n-        total,\r\n-        page: Number(page),\r\n-        pageSize: Number(limit),\r\n-      },\r\n-    });\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ error: 'Failed to fetch members' });\r\n-  }\r\n-});\r\n-\r\n-// GET /api/members/:id\r\n-router.get('/:id', async (req, res) => {\r\n-  const { id } = req.params;\r\n-\r\n-  try {\r\n-    const member = await prisma.member.findUnique({\r\n-      where: { id },\r\n-      include: {\r\n-        trainer: true,\r\n-        club: true,\r\n-        membership:true,\r\n-      },\r\n-    });\r\n-\r\n-    if (!member) return res.status(404).json({ error: 'Member not found' });\r\n-\r\n-    res.json(member);\r\n-  } catch (err) {\r\n-    console.error('Fetch member detail error:', err);\r\n-    res.status(500).json({ error: 'Failed to fetch member details' });\r\n-  }\r\n-});\r\n-\r\n-//update member\r\n-\r\n-// PUT /api/members/:id\r\n-router.put('/:id', async (req: Request, res: Response) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    const updatedData = req.body;\r\n-\r\n-    const updated = await prisma.member.update({\r\n-      where: { id },\r\n-      data: {\r\n-        firstName: updatedData.firstName,\r\n-        lastName: updatedData.lastName,\r\n-        email: updatedData.email,\r\n-        phone: updatedData.phone,\r\n-        work: updatedData.work,\r\n-        dateOfBirth: updatedData.dateOfBirth ? new Date(updatedData.dateOfBirth) : null,\r\n-        gender: updatedData.gender,\r\n-        avatarUrl: updatedData.avatar || null,\r\n-        keyFob: updatedData.keyFob,\r\n-        tags: updatedData.tags,\r\n-        note: updatedData.note,\r\n-        memberType: updatedData.memberType,\r\n-\r\n-        // Address\r\n-        street: updatedData.address?.street || null,\r\n-        city: updatedData.address?.city || null,\r\n-        state: updatedData.address?.state || null,\r\n-        zip: updatedData.address?.zip || null,\r\n-        addressSearch: updatedData.address?.search || null,\r\n-\r\n-        // Marketing\r\n-        salesRep: updatedData.marketing?.salesRep || null,\r\n-        sourcePromotion: updatedData.marketing?.sourcePromotion || null,\r\n-        referredBy: updatedData.marketing?.referredBy || null,\r\n-\r\n-        // Additional\r\n-        trainerId: updatedData.additional?.trainerId || null,\r\n-        joiningDate: updatedData.additional?.joiningDate ? new Date(updatedData.additional.joiningDate) : null,\r\n-        occupation: updatedData.additional?.occupation || null,\r\n-        organization: updatedData.additional?.organization || null,\r\n-        involvementType: updatedData.additional?.involvementType || null,\r\n-\r\n-        // Emergency\r\n-        // emergencyName: updatedData.emergency?.name || null,\r\n-        // emergencyRelationship: updatedData.emergency?.relationship || null,\r\n-        // emergencyPhone: updatedData.emergency?.phone || null,\r\n-        // emergencyEmail: updatedData.emergency?.email || null,\r\n-\r\n-        emergency: updatedData.emergency || [],\r\n-\r\n-        medicalInfo: updatedData.medicalInfo || '',\r\n-allergies: updatedData.allergies || '',\r\n-medications: updatedData.medications || '',\r\n-chronicConditions: updatedData.chronicConditions || '',\r\n-injuries: updatedData.injuries || '',\r\n-doctorContact: updatedData.doctorContact || '',\r\n-lastExamDate: updatedData.lastExamDate ? new Date(updatedData.lastExamDate) : null,\r\n-        clubId: updatedData.club,\r\n-      },\r\n-    });\r\n-\r\n-    return res.status(200).json(updated);\r\n-  } catch (err) {\r\n-    console.error('Error updating member:', err);\r\n-    return res.status(500).json({ error: 'Failed to update member' });\r\n-  }\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-export default router;\r\n"
                },
                {
                    "date": 1752397214917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,12 +49,9 @@\n         organization: additional?.organization || null,\r\n         involvementType: additional?.involvementType || null,\r\n \r\n         // Emergency\r\n-        // emergencyName: emergency?.name || null,\r\n-        // emergencyRelationship: emergency?.relationship || null,\r\n-        // emergencyPhone: emergency?.phone || null,\r\n-        // emergencyEmail: emergency?.email || null,\r\n+    \r\n \r\n         emergency: emergency || [],\r\n \r\n         medicalInfo,\r\n@@ -190,8 +187,10 @@\n         membership:true,\r\n       },\r\n     });\r\n \r\n+      console.log('👨‍⚕️ Full member details:', member); // ✅ ADD THIS\r\n+\r\n     if (!member) return res.status(404).json({ error: 'Member not found' });\r\n \r\n     res.json(member);\r\n   } catch (err) {\r\n"
                },
                {
                    "date": 1752513139915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,10 +80,19 @@\n   return res.status(400).json({ error: 'Invalid plan selected' });\r\n }\r\n \r\n \r\n-    \r\n+    const active = await prisma.membership.findFirst({\r\n+  where: { memberId: id, status: 'active' }\r\n \r\n+});\r\n+\r\n+if (active) {\r\n+  return res.status(400).json({\r\n+    error: 'This member already has an active membership. Please cancel or expire it first.'\r\n+  });\r\n+}\r\n+\r\n     const membership = await prisma.membership.create({\r\n       data: {\r\n         planName,\r\n         startDate: new Date(startDate),\r\n"
                },
                {
                    "date": 1752523912219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,8 +102,17 @@\n         memberId: id,\r\n       },\r\n     });\r\n \r\n+    const member = await prisma.member.findUnique({\r\n+      where: { id },\r\n+      select: { clubId: true },\r\n+    });\r\n+\r\n+    if (!member) {\r\n+      return res.status(404).json({ error: 'Member not found' });\r\n+    }\r\n+\r\n     await prisma.invoice.create({\r\n   data: {\r\n     memberId: id,\r\n     planName,\r\n"
                },
                {
                    "date": 1752523935898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,8 +117,9 @@\n     memberId: id,\r\n     planName,\r\n     amount: plan.price,\r\n     status: 'unpaid',\r\n+    clubId: member.clubId,\r\n     issuedAt: new Date(),\r\n     dueDate: new Date(new Date().setDate(new Date().getDate() + 7)),\r\n   },\r\n });\r\n"
                },
                {
                    "date": 1752527013566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,32 +67,98 @@\n });\r\n \r\n // Add membership to a Member\r\n \r\n+// router.post('/:id/membership', async (req, res) => {\r\n+//   try {\r\n+//     const { id } = req.params;\r\n+//     const { planName, startDate, endDate, autoRenew, status } = req.body;\r\n+\r\n+//     const plan = await prisma.membershipPlan.findUnique({\r\n+//   where: { name: planName },\r\n+// });\r\n+// if (!plan) {\r\n+//   return res.status(400).json({ error: 'Invalid plan selected' });\r\n+// }\r\n+\r\n+\r\n+//     const active = await prisma.membership.findFirst({\r\n+//   where: { memberId: id, status: 'active' }\r\n+\r\n+// });\r\n+\r\n+// if (active) {\r\n+//   return res.status(400).json({\r\n+//     error: 'This member already has an active membership. Please cancel or expire it first.'\r\n+//   });\r\n+// }\r\n+\r\n+//     const membership = await prisma.membership.create({\r\n+//       data: {\r\n+//         planName,\r\n+//         startDate: new Date(startDate),\r\n+//         endDate: new Date(endDate),\r\n+//         autoRenew,\r\n+//         status,\r\n+//         memberId: id,\r\n+//       },\r\n+//     });\r\n+\r\n+//     const member = await prisma.member.findUnique({\r\n+//       where: { id },\r\n+//       select: { clubId: true },\r\n+//     });\r\n+\r\n+//     if (!member) {\r\n+//       return res.status(404).json({ error: 'Member not found' });\r\n+//     }\r\n+\r\n+//     await prisma.invoice.create({\r\n+//   data: {\r\n+//     memberId: id,\r\n+//     planName,\r\n+//     amount: plan.price,\r\n+//     status: 'unpaid',\r\n+//     clubId: member.clubId,\r\n+//     issuedAt: new Date(),\r\n+//     dueDate: new Date(new Date().setDate(new Date().getDate() + 7)),\r\n+//   },\r\n+// });\r\n+\r\n+//     res.status(201).json(membership);\r\n+//   } catch (err) {\r\n+//     console.error('Add Membership Error:', err);\r\n+//     res.status(500).json({ error: 'Failed to create membership' });\r\n+//   }\r\n+// });\r\n+// In your member.routes.ts, update the membership creation route:\r\n+\r\n router.post('/:id/membership', async (req, res) => {\r\n   try {\r\n     const { id } = req.params;\r\n     const { planName, startDate, endDate, autoRenew, status } = req.body;\r\n \r\n+    console.log('Creating membership for member:', id);\r\n+    console.log('Request body:', req.body);\r\n+\r\n     const plan = await prisma.membershipPlan.findUnique({\r\n-  where: { name: planName },\r\n-});\r\n-if (!plan) {\r\n-  return res.status(400).json({ error: 'Invalid plan selected' });\r\n-}\r\n+      where: { name: planName },\r\n+    });\r\n+    \r\n+    if (!plan) {\r\n+      return res.status(400).json({ error: 'Invalid plan selected' });\r\n+    }\r\n \r\n-\r\n     const active = await prisma.membership.findFirst({\r\n-  where: { memberId: id, status: 'active' }\r\n+      where: { memberId: id, status: 'active' }\r\n+    });\r\n \r\n-});\r\n+    if (active) {\r\n+      return res.status(400).json({\r\n+        error: 'This member already has an active membership. Please cancel or expire it first.'\r\n+      });\r\n+    }\r\n \r\n-if (active) {\r\n-  return res.status(400).json({\r\n-    error: 'This member already has an active membership. Please cancel or expire it first.'\r\n-  });\r\n-}\r\n-\r\n     const membership = await prisma.membership.create({\r\n       data: {\r\n         planName,\r\n         startDate: new Date(startDate),\r\n@@ -102,33 +168,78 @@\n         memberId: id,\r\n       },\r\n     });\r\n \r\n+    console.log('Membership created:', membership);\r\n+\r\n+    // Get member details\r\n     const member = await prisma.member.findUnique({\r\n       where: { id },\r\n-      select: { clubId: true },\r\n+      select: { clubId: true, firstName: true, lastName: true },\r\n     });\r\n \r\n+    console.log('Member found:', member);\r\n+\r\n     if (!member) {\r\n       return res.status(404).json({ error: 'Member not found' });\r\n     }\r\n \r\n-    await prisma.invoice.create({\r\n-  data: {\r\n-    memberId: id,\r\n-    planName,\r\n-    amount: plan.price,\r\n-    status: 'unpaid',\r\n-    clubId: member.clubId,\r\n-    issuedAt: new Date(),\r\n-    dueDate: new Date(new Date().setDate(new Date().getDate() + 7)),\r\n-  },\r\n-});\r\n+    if (!member.clubId) {\r\n+      return res.status(400).json({ error: 'Member does not have a clubId assigned' });\r\n+    }\r\n \r\n-    res.status(201).json(membership);\r\n+    // Create invoice with detailed logging\r\n+    console.log('Creating invoice with data:', {\r\n+      memberId: id,\r\n+      planName,\r\n+      amount: plan.price,\r\n+      status: 'unpaid',\r\n+      clubId: member.clubId,\r\n+      issuedAt: new Date(),\r\n+      dueDate: new Date(new Date().setDate(new Date().getDate() + 7)),\r\n+    });\r\n+\r\n+    try {\r\n+      const invoice = await prisma.invoice.create({\r\n+        data: {\r\n+          memberId: id,\r\n+          planName,\r\n+          amount: plan.price,\r\n+          status: 'unpaid',\r\n+          clubId: member.clubId,\r\n+          issuedAt: new Date(),\r\n+          dueDate: new Date(new Date().setDate(new Date().getDate() + 7)),\r\n+        },\r\n+      });\r\n+\r\n+      console.log('Invoice created successfully:', invoice);\r\n+      \r\n+      res.status(201).json({\r\n+        membership,\r\n+        invoice,\r\n+        message: 'Membership and invoice created successfully'\r\n+      });\r\n+      \r\n+    } catch (invoiceError) {\r\n+      console.error('Invoice creation error:', invoiceError);\r\n+      \r\n+      // If invoice creation fails, we might want to rollback the membership\r\n+      await prisma.membership.delete({\r\n+        where: { id: membership.id }\r\n+      });\r\n+      \r\n+      return res.status(500).json({ \r\n+        error: 'Failed to create invoice', \r\n+        details: invoiceError.message \r\n+      });\r\n+    }\r\n+\r\n   } catch (err) {\r\n     console.error('Add Membership Error:', err);\r\n-    res.status(500).json({ error: 'Failed to create membership' });\r\n+    res.status(500).json({ \r\n+      error: 'Failed to create membership',\r\n+      details: err.message \r\n+    });\r\n   }\r\n });\r\n \r\n \r\n"
                },
                {
                    "date": 1752529105999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -313,9 +313,12 @@\n       where: { id },\r\n       include: {\r\n         trainer: true,\r\n         club: true,\r\n-        membership:true,\r\n+        membership: {\r\n+      orderBy: { startDate: 'desc' }, // Get most recent first\r\n+      take: 1,                        // Optional: only return one latest\r\n+    },\r\n       },\r\n     });\r\n \r\n       console.log('👨‍⚕️ Full member details:', member); // ✅ ADD THIS\r\n"
                },
                {
                    "date": 1752844787471,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -244,15 +244,19 @@\n \r\n \r\n router.get('/', async (req, res) => {\r\n   try {\r\n-    const { tab = 'all', search = '', page = 1, limit = 10, clubId } = req.query;\r\n+    const { tab = 'all', search = '', page = 1, limit = 10, clubId, trainerId } = req.query;\r\n     const skip = (Number(page) - 1) * Number(limit);\r\n \r\n     let whereClause: any = {\r\n       clubId: String(clubId),\r\n     };\r\n \r\n+    if (trainerId) {\r\n+    whereClause.trainerId = trainerId; // ✅ FILTER BY TRAINER\r\n+  }\r\n+\r\n     if (search) {\r\n       whereClause.OR = [\r\n         { firstName: { contains: search, mode: 'insensitive' } },\r\n         { lastName: { contains: search, mode: 'insensitive' } },\r\n"
                },
                {
                    "date": 1752846320431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -399,8 +399,33 @@\n     return res.status(500).json({ error: 'Failed to update member' });\r\n   }\r\n });\r\n \r\n+// GET /api/members/:id/sessions - All attendance sessions for a member\r\n+router.get('/:id/sessions', async (req, res) => {\r\n+  const { id } = req.params;\r\n \r\n+  try {\r\n+    const attendanceRecords = await prisma.attendance.findMany({\r\n+      where: { memberId: id },\r\n+      orderBy: { markedAt: 'desc' },\r\n+      include: {\r\n+        schedule: {\r\n+          include: {\r\n+            trainer: { select: { name: true } },\r\n+            location: { select: { name: true } }\r\n+          }\r\n+        }\r\n+      }\r\n+    });\r\n \r\n+    res.json(attendanceRecords);\r\n+  } catch (err) {\r\n+    console.error('Error fetching session history:', err);\r\n+    res.status(500).json({ error: 'Failed to fetch session history' });\r\n+  }\r\n+});\r\n \r\n+\r\n+\r\n+\r\n export default router;\r\n"
                },
                {
                    "date": 1752859795560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n //src>routes>member.routes.ts\r\n import express from 'express';\r\n import { PrismaClient } from '@prisma/client';\r\n import { Request, Response } from 'express';\r\n+import { getMembersByTrainer } from '../controllers/member.controller';\r\n \r\n const router = express.Router();\r\n const prisma = new PrismaClient();\r\n \r\n@@ -424,8 +425,8 @@\n     res.status(500).json({ error: 'Failed to fetch session history' });\r\n   }\r\n });\r\n \r\n+router.get('/', getMembersByTrainer);\r\n \r\n \r\n-\r\n export default router;\r\n"
                },
                {
                    "date": 1752859928992,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -425,8 +425,9 @@\n     res.status(500).json({ error: 'Failed to fetch session history' });\r\n   }\r\n });\r\n \r\n-router.get('/', getMembersByTrainer);\r\n+router.get('/by-trainer', getMembersByTrainer); // ✅ safer route\r\n \r\n \r\n+\r\n export default router;\r\n"
                },
                {
                    "date": 1752859935048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -425,9 +425,9 @@\n     res.status(500).json({ error: 'Failed to fetch session history' });\r\n   }\r\n });\r\n \r\n-router.get('/by-trainer', getMembersByTrainer); // ✅ safer route\r\n+router.get('/by-trainer', getMembersByTrainer); \r\n \r\n \r\n \r\n export default router;\r\n"
                },
                {
                    "date": 1752860135837,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,10 @@\n \r\n const router = express.Router();\r\n const prisma = new PrismaClient();\r\n \r\n+router.get('/by-trainer', getMembersByTrainer); \r\n+\r\n router.post('/', async (req, res) => {\r\n   try {\r\n     const {\r\n       firstName, lastName, email, phone, work, dateOfBirth, gender, avatar,\r\n@@ -425,9 +427,9 @@\n     res.status(500).json({ error: 'Failed to fetch session history' });\r\n   }\r\n });\r\n \r\n-router.get('/by-trainer', getMembersByTrainer); \r\n \r\n \r\n \r\n+\r\n export default router;\r\n"
                }
            ],
            "date": 1752209752670,
            "name": "Commit-0",
            "content": "import express from 'express';\r\nimport { createMember } from '../controllers/member.controller';\r\nimport { validateMember } from '../middlewares/validateMember';\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post('/members', validateMember, createMember);\r\n\r\nexport default router;\r\n"
        }
    ]
}