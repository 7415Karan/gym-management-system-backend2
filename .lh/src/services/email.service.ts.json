{
    "sourceFile": "src/services/email.service.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1752733095630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752733120053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,17 +118,17 @@\n     return;\r\n   }\r\n   const setupLink = `${frontendUrl}/set-password?token=${token}`; // Frontend route for password setup\r\n \r\n-  const subject = 'Set Up Your Gym Admin Trainer Account Password';\r\n+  const subject = 'Set Up Your GymFitness Trainer Account Password';\r\n   const html = `\r\n     <p>Hello ${name},</p>\r\n     <p>Your trainer account for the Gym Admin portal has been created. Please click the link below to set up your password:</p>\r\n     <p><a href=\"${setupLink}\">Set Your Password Now</a></p>\r\n     <p>This link will expire in 1 hour.</p>\r\n     <p>If you did not expect this email, please ignore it.</p>\r\n     <p>Thank you,</p>\r\n-    <p>Gym Admin Team</p>\r\n+    <p>GymFitness Team</p>\r\n   `;\r\n \r\n   await sendEmail({ to: email, subject, html });\r\n };\n\\ No newline at end of file\n"
                }
            ],
            "date": 1752733095630,
            "name": "Commit-0",
            "content": "// src/services/emailService.ts\r\nimport nodemailer from 'nodemailer';\r\n// import sgMail from '@sendgrid/mail'; // For SendGrid\r\n// import { ServerClient } from 'postmark'; // For Postmark\r\n\r\ninterface EmailOptions {\r\n  to: string;\r\n  subject: string;\r\n  html: string;\r\n  text?: string;\r\n}\r\n\r\n// Nodemailer setup\r\nconst transporter = nodemailer.createTransport({\r\n  host: process.env.EMAIL_HOST,\r\n  port: parseInt(process.env.EMAIL_PORT || '587'),\r\n  secure: process.env.EMAIL_PORT === '465', // true for 465, false for other ports\r\n  auth: {\r\n    user: process.env.EMAIL_USER,\r\n    pass: process.env.EMAIL_PASS,\r\n  },\r\n});\r\n\r\n// SendGrid setup (if you choose SendGrid)\r\n// if (process.env.SENDGRID_API_KEY) {\r\n//   sgMail.setApiKey(process.env.SENDGRID_API_KEY);\r\n// }\r\n\r\n// Postmark setup (if you choose Postmark)\r\n// const postmarkClient = process.env.POSTMARK_API_TOKEN\r\n//   ? new ServerClient(process.env.POSTMARK_API_TOKEN)\r\n//   : null;\r\n\r\n\r\nexport const sendEmail = async (options: EmailOptions): Promise<void> => {\r\n  const senderEmail = process.env.SENDER_EMAIL;\r\n\r\n  if (!senderEmail) {\r\n    console.error('SENDER_EMAIL environment variable is not set. Cannot send email.');\r\n    return;\r\n  }\r\n\r\n  // Choose your email service based on env var\r\n  switch (process.env.EMAIL_SERVICE_PROVIDER) {\r\n    case 'nodemailer':\r\n      try {\r\n        await transporter.sendMail({\r\n          from: senderEmail,\r\n          to: options.to,\r\n          subject: options.subject,\r\n          html: options.html,\r\n          text: options.text || options.html.replace(/<[^>]*>?/gm, ''), // Basic text fallback\r\n        });\r\n        console.log(`Email sent to ${options.to}`);\r\n      } catch (error) {\r\n        console.error('Error sending email with Nodemailer:', error);\r\n        throw new Error('Failed to send email.');\r\n      }\r\n      break;\r\n\r\n    // case 'sendgrid':\r\n    //   if (!sgMail) {\r\n    //     console.error('SendGrid API key not configured.');\r\n    //     throw new Error('Email service not configured.');\r\n    //   }\r\n    //   try {\r\n    //     await sgMail.send({\r\n    //       to: options.to,\r\n    //       from: senderEmail,\r\n    //       subject: options.subject,\r\n    //       html: options.html,\r\n    //       text: options.text || options.html.replace(/<[^>]*>?/gm, ''),\r\n    //     });\r\n    //     console.log(`Email sent to ${options.to} via SendGrid`);\r\n    //   } catch (error) {\r\n    //     console.error('Error sending email with SendGrid:', error.response?.body || error);\r\n    //     throw new Error('Failed to send email.');\r\n    //   }\r\n    //   break;\r\n\r\n    // case 'postmark':\r\n    //   if (!postmarkClient) {\r\n    //     console.error('Postmark API token not configured.');\r\n    //     throw new Error('Email service not configured.');\r\n    //   }\r\n    //   try {\r\n    //     await postmarkClient.sendEmail({\r\n    //       From: senderEmail,\r\n    //       To: options.to,\r\n    //       Subject: options.subject,\r\n    //       HtmlBody: options.html,\r\n    //       TextBody: options.text || options.html.replace(/<[^>]*>?/gm, ''),\r\n    //     });\r\n    //     console.log(`Email sent to ${options.to} via Postmark`);\r\n    //   } catch (error) {\r\n    //     console.error('Error sending email with Postmark:', error);\r\n    //     throw new Error('Failed to send email.');\r\n    //   }\r\n    //   break;\r\n\r\n    default:\r\n      console.warn('No email service provider configured or unknown provider. Email not sent.');\r\n      // For development, you might log the email content instead of sending\r\n      console.log('--- MOCK EMAIL ---');\r\n      console.log('To:', options.to);\r\n      console.log('Subject:', options.subject);\r\n      console.log('HTML:', options.html);\r\n      console.log('------------------');\r\n      break;\r\n  }\r\n};\r\n\r\n\r\nexport const sendPasswordSetupEmail = async (email: string, name: string, token: string) => {\r\n  const frontendUrl = process.env.FRONTEND_URL;\r\n  if (!frontendUrl) {\r\n    console.error('FRONTEND_URL environment variable is not set.');\r\n    return;\r\n  }\r\n  const setupLink = `${frontendUrl}/set-password?token=${token}`; // Frontend route for password setup\r\n\r\n  const subject = 'Set Up Your Gym Admin Trainer Account Password';\r\n  const html = `\r\n    <p>Hello ${name},</p>\r\n    <p>Your trainer account for the Gym Admin portal has been created. Please click the link below to set up your password:</p>\r\n    <p><a href=\"${setupLink}\">Set Your Password Now</a></p>\r\n    <p>This link will expire in 1 hour.</p>\r\n    <p>If you did not expect this email, please ignore it.</p>\r\n    <p>Thank you,</p>\r\n    <p>Gym Admin Team</p>\r\n  `;\r\n\r\n  await sendEmail({ to: email, subject, html });\r\n};"
        }
    ]
}