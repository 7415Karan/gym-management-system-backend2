{
    "sourceFile": "src/controllers/crm.controller.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 30,
            "patches": [
                {
                    "date": 1752660494345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752660694237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,4 +15,46 @@\n   } catch (error) {\r\n     res.status(500).json({ error: 'Failed to fetch leads' });\r\n   }\r\n };\r\n+\r\n+// crm.controller.ts\r\n+export const createLead = async (req: Request, res: Response) => {\r\n+  const { name, email, phone, status } = req.body;\r\n+\r\n+  try {\r\n+    const lead = await prisma.lead.create({\r\n+      data: {\r\n+        name,\r\n+        email,\r\n+        phone,\r\n+        status,\r\n+      },\r\n+    });\r\n+\r\n+    res.status(201).json(lead);  // Return created lead\r\n+  } catch (error) {\r\n+    res.status(500).json({ error: 'Failed to create lead' });\r\n+  }\r\n+};\r\n+\r\n+export const updateLead = async (req: Request, res: Response) => {\r\n+  const { id } = req.params;\r\n+  const { name, email, phone, status } = req.body;\r\n+\r\n+  try {\r\n+    const lead = await prisma.lead.update({\r\n+      where: { id: parseInt(id) },\r\n+      data: {\r\n+        name,\r\n+        email,\r\n+        phone,\r\n+        status,\r\n+      },\r\n+    });\r\n+\r\n+    res.json(lead);  // Return updated lead\r\n+  } catch (error) {\r\n+    res.status(500).json({ error: 'Failed to update lead' });\r\n+  }\r\n+};\r\n+\r\n"
                },
                {
                    "date": 1752661579746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,19 +6,27 @@\n \r\n export const getLeadsByStatus = async (req: Request, res: Response) => {\r\n   const { status } = req.query;\r\n \r\n+  if (!status) {\r\n+    return res.status(400).json({ error: \"Status query parameter is required\" });\r\n+  }\r\n+\r\n   try {\r\n     const leads = await prisma.lead.findMany({\r\n-      where: { status: status as string },\r\n+      where: {\r\n+        status: status as string, // Make sure the status is a valid string\r\n+      },\r\n     });\r\n-    res.json(leads);  // Send leads as response\r\n+    res.json(leads);  // Return leads as response\r\n   } catch (error) {\r\n+    console.error('Error fetching leads by status', error);\r\n     res.status(500).json({ error: 'Failed to fetch leads' });\r\n   }\r\n };\r\n \r\n-// crm.controller.ts\r\n+\r\n+\r\n export const createLead = async (req: Request, res: Response) => {\r\n   const { name, email, phone, status } = req.body;\r\n \r\n   try {\r\n"
                },
                {
                    "date": 1752661593854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,75 @@\n+// gym-api/src/controllers/crm.controller.ts\r\n+import { Request, Response } from 'express';\r\n+import { PrismaClient } from '@prisma/client';\r\n+\r\n+const prisma = new PrismaClient();\r\n+\r\n+export const getLeadsByStatus = async (req: Request, res: Response) => {\r\n+  const { status } = req.query;\r\n+\r\n+  if (!status) {\r\n+    return res.status(400).json({ error: \"Status query parameter is required\" });\r\n+  }\r\n+\r\n+  try {\r\n+    const leads = await prisma.lead.findMany({\r\n+      where: {\r\n+        status: status as string, // Make sure the status is a valid string\r\n+      },\r\n+    });\r\n+    res.json(leads);  // Return leads as response\r\n+  } catch (error) {\r\n+    console.error('Error fetching leads by status', error);\r\n+    res.status(500).json({ error: 'Failed to fetch leads' });\r\n+  }\r\n+};\r\n+\r\n+\r\n+\r\n+export const createLead = async (req: Request, res: Response) => {\r\n+  const { name, email, phone, status } = req.body;\r\n+\r\n+  // Basic validation to ensure required fields are provided\r\n+  if (!name || !email || !phone || !status) {\r\n+    return res.status(400).json({ error: 'Name, email, phone, and status are required' });\r\n+  }\r\n+\r\n+  try {\r\n+    const lead = await prisma.lead.create({\r\n+      data: {\r\n+        name,\r\n+        email,\r\n+        phone,\r\n+        status,\r\n+      },\r\n+    });\r\n+\r\n+    res.status(201).json(lead);  // Return created lead\r\n+  } catch (error) {\r\n+    console.error('Error creating lead', error);\r\n+    res.status(500).json({ error: 'Failed to create lead' });\r\n+  }\r\n+};\r\n+\r\n+\r\n+export const updateLead = async (req: Request, res: Response) => {\r\n+  const { id } = req.params;\r\n+  const { name, email, phone, status } = req.body;\r\n+\r\n+  try {\r\n+    const lead = await prisma.lead.update({\r\n+      where: { id: parseInt(id) },\r\n+      data: {\r\n+        name,\r\n+        email,\r\n+        phone,\r\n+        status,\r\n+      },\r\n+    });\r\n+\r\n+    res.json(lead);  // Return updated lead\r\n+  } catch (error) {\r\n+    res.status(500).json({ error: 'Failed to update lead' });\r\n+  }\r\n+};\r\n+\r\n"
                },
                {
                    "date": 1752661607590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,11 +55,16 @@\n export const updateLead = async (req: Request, res: Response) => {\r\n   const { id } = req.params;\r\n   const { name, email, phone, status } = req.body;\r\n \r\n+  // Validate that the ID and required fields are provided\r\n+  if (!id || !name || !email || !phone || !status) {\r\n+    return res.status(400).json({ error: 'ID, name, email, phone, and status are required' });\r\n+  }\r\n+\r\n   try {\r\n     const lead = await prisma.lead.update({\r\n-      where: { id: parseInt(id) },\r\n+      where: { id: parseInt(id) },  // Ensure the ID is converted to an integer\r\n       data: {\r\n         name,\r\n         email,\r\n         phone,\r\n@@ -68,8 +73,9 @@\n     });\r\n \r\n     res.json(lead);  // Return updated lead\r\n   } catch (error) {\r\n+    console.error('Error updating lead', error);\r\n     res.status(500).json({ error: 'Failed to update lead' });\r\n   }\r\n };\r\n \r\n"
                },
                {
                    "date": 1752662125617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,72 +78,4 @@\n     res.status(500).json({ error: 'Failed to update lead' });\r\n   }\r\n };\r\n \r\n-// gym-api/src/controllers/crm.controller.ts\r\n-import { Request, Response } from 'express';\r\n-import { PrismaClient } from '@prisma/client';\r\n-\r\n-const prisma = new PrismaClient();\r\n-\r\n-export const getLeadsByStatus = async (req: Request, res: Response) => {\r\n-  const { status } = req.query;\r\n-\r\n-  if (!status) {\r\n-    return res.status(400).json({ error: \"Status query parameter is required\" });\r\n-  }\r\n-\r\n-  try {\r\n-    const leads = await prisma.lead.findMany({\r\n-      where: {\r\n-        status: status as string, // Make sure the status is a valid string\r\n-      },\r\n-    });\r\n-    res.json(leads);  // Return leads as response\r\n-  } catch (error) {\r\n-    console.error('Error fetching leads by status', error);\r\n-    res.status(500).json({ error: 'Failed to fetch leads' });\r\n-  }\r\n-};\r\n-\r\n-\r\n-\r\n-export const createLead = async (req: Request, res: Response) => {\r\n-  const { name, email, phone, status } = req.body;\r\n-\r\n-  try {\r\n-    const lead = await prisma.lead.create({\r\n-      data: {\r\n-        name,\r\n-        email,\r\n-        phone,\r\n-        status,\r\n-      },\r\n-    });\r\n-\r\n-    res.status(201).json(lead);  // Return created lead\r\n-  } catch (error) {\r\n-    res.status(500).json({ error: 'Failed to create lead' });\r\n-  }\r\n-};\r\n-\r\n-export const updateLead = async (req: Request, res: Response) => {\r\n-  const { id } = req.params;\r\n-  const { name, email, phone, status } = req.body;\r\n-\r\n-  try {\r\n-    const lead = await prisma.lead.update({\r\n-      where: { id: parseInt(id) },\r\n-      data: {\r\n-        name,\r\n-        email,\r\n-        phone,\r\n-        status,\r\n-      },\r\n-    });\r\n-\r\n-    res.json(lead);  // Return updated lead\r\n-  } catch (error) {\r\n-    res.status(500).json({ error: 'Failed to update lead' });\r\n-  }\r\n-};\r\n-\r\n"
                },
                {
                    "date": 1752663828701,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,10 +72,12 @@\n       },\r\n     });\r\n \r\n     res.json(lead);  // Return updated lead\r\n-  } catch (error) {\r\n+  } catch (error: any) {\r\n+    if (error.code === 'P2025') { // Prisma error code for record not found\r\n+      return res.status(404).json({ error: 'Lead not found' });\r\n+    }\r\n     console.error('Error updating lead', error);\r\n     res.status(500).json({ error: 'Failed to update lead' });\r\n   }\r\n };\r\n-\r\n"
                },
                {
                    "date": 1752664330315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,25 +26,29 @@\n \r\n \r\n \r\n export const createLead = async (req: Request, res: Response) => {\r\n+    console.log('createLead called');\r\n+  console.log('Request body:', req.body);\r\n   const { name, email, phone, status } = req.body;\r\n \r\n   // Basic validation to ensure required fields are provided\r\n   if (!name || !email || !phone || !status) {\r\n+    console.log('Validation failed - missing fields');\r\n     return res.status(400).json({ error: 'Name, email, phone, and status are required' });\r\n   }\r\n \r\n   try {\r\n+    console.log('Creating lead with data:', { name, email, phone, status });\r\n     const lead = await prisma.lead.create({\r\n       data: {\r\n         name,\r\n         email,\r\n         phone,\r\n         status,\r\n       },\r\n     });\r\n-\r\n+console.log('Lead created successfully:', lead);\r\n     res.status(201).json(lead);  // Return created lead\r\n   } catch (error) {\r\n     console.error('Error creating lead', error);\r\n     res.status(500).json({ error: 'Failed to create lead' });\r\n"
                },
                {
                    "date": 1752664440425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,8 +44,11 @@\n         name,\r\n         email,\r\n         phone,\r\n         status,\r\n+        club: {\r\n+          connect: { id: clubId }, // Connect the lead to an existing club by its ID\r\n+        },\r\n       },\r\n     });\r\n console.log('Lead created successfully:', lead);\r\n     res.status(201).json(lead);  // Return created lead\r\n"
                },
                {
                    "date": 1752664839904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,18 +28,18 @@\n \r\n export const createLead = async (req: Request, res: Response) => {\r\n     console.log('createLead called');\r\n   console.log('Request body:', req.body);\r\n-  const { name, email, phone, status } = req.body;\r\n+  const { name, email, phone, status , clubId} = req.body;\r\n \r\n   // Basic validation to ensure required fields are provided\r\n-  if (!name || !email || !phone || !status) {\r\n+  if (!name || !email || !phone || !status || !clubId) {\r\n     console.log('Validation failed - missing fields');\r\n-    return res.status(400).json({ error: 'Name, email, phone, and status are required' });\r\n+    return res.status(400).json({ error: 'Name, email, phone, and status and clubid are required' });\r\n   }\r\n \r\n   try {\r\n-    console.log('Creating lead with data:', { name, email, phone, status });\r\n+    console.log('Creating lead with data:', { name, email, phone, status, clubId });\r\n     const lead = await prisma.lead.create({\r\n       data: {\r\n         name,\r\n         email,\r\n"
                },
                {
                    "date": 1752673898397,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,30 +3,52 @@\n import { PrismaClient } from '@prisma/client';\r\n \r\n const prisma = new PrismaClient();\r\n \r\n+// export const getLeadsByStatus = async (req: Request, res: Response) => {\r\n+//   const { status } = req.query;\r\n+\r\n+//   if (!status) {\r\n+//     return res.status(400).json({ error: \"Status query parameter is required\" });\r\n+//   }\r\n+\r\n+//   try {\r\n+//     const leads = await prisma.lead.findMany({\r\n+//       where: {\r\n+//         status: status as string, // Make sure the status is a valid string\r\n+//       },\r\n+//     });\r\n+//     res.json(leads);  // Return leads as response\r\n+//   } catch (error) {\r\n+//     console.error('Error fetching leads by status', error);\r\n+//     res.status(500).json({ error: 'Failed to fetch leads' });\r\n+//   }\r\n+// };\r\n+\r\n+// gym-api/src/controllers/crm.controller.ts\r\n export const getLeadsByStatus = async (req: Request, res: Response) => {\r\n-  const { status } = req.query;\r\n+  const { status, clubId } = req.query;\r\n \r\n-  if (!status) {\r\n-    return res.status(400).json({ error: \"Status query parameter is required\" });\r\n-  }\r\n-\r\n   try {\r\n+    // Fetch only \"prospects\" with the given `status` and `clubId`\r\n     const leads = await prisma.lead.findMany({\r\n       where: {\r\n-        status: status as string, // Make sure the status is a valid string\r\n+        status: status as string,\r\n+        memberType: \"prospect\",  // Only fetch \"prospects\"\r\n+        clubId: clubId ? clubId : undefined, // If clubId is provided, filter by it\r\n       },\r\n     });\r\n-    res.json(leads);  // Return leads as response\r\n+\r\n+    res.json(leads);  // Return filtered leads\r\n   } catch (error) {\r\n     console.error('Error fetching leads by status', error);\r\n     res.status(500).json({ error: 'Failed to fetch leads' });\r\n   }\r\n };\r\n \r\n \r\n \r\n+\r\n export const createLead = async (req: Request, res: Response) => {\r\n     console.log('createLead called');\r\n   console.log('Request body:', req.body);\r\n   const { name, email, phone, status , clubId} = req.body;\r\n"
                },
                {
                    "date": 1752674420681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,22 +24,32 @@\n //   }\r\n // };\r\n \r\n // gym-api/src/controllers/crm.controller.ts\r\n+// gym-api/src/controllers/crm.controller.ts\r\n export const getLeadsByStatus = async (req: Request, res: Response) => {\r\n   const { status, clubId } = req.query;\r\n \r\n+  if (!status || !clubId) {\r\n+    return res.status(400).json({ error: 'Status and clubId are required' });\r\n+  }\r\n+\r\n   try {\r\n-    // Fetch only \"prospects\" with the given `status` and `clubId`\r\n+    // Fetch leads and include the related Member data\r\n     const leads = await prisma.lead.findMany({\r\n       where: {\r\n         status: status as string,\r\n-        memberType: \"prospect\",  // Only fetch \"prospects\"\r\n-        clubId: clubId ? clubId : undefined, // If clubId is provided, filter by it\r\n+        clubId: clubId as string,  // Ensure clubId is passed and used correctly\r\n       },\r\n+      include: {\r\n+        member: true,  // Include member details (e.g., memberType)\r\n+      },\r\n     });\r\n \r\n-    res.json(leads);  // Return filtered leads\r\n+    // Filter out leads that are not \"prospects\" based on memberType\r\n+    const filteredLeads = leads.filter(lead => lead.member?.memberType === \"prospect\");\r\n+\r\n+    res.json(filteredLeads);  // Return filtered leads\r\n   } catch (error) {\r\n     console.error('Error fetching leads by status', error);\r\n     res.status(500).json({ error: 'Failed to fetch leads' });\r\n   }\r\n@@ -47,8 +57,9 @@\n \r\n \r\n \r\n \r\n+\r\n export const createLead = async (req: Request, res: Response) => {\r\n     console.log('createLead called');\r\n   console.log('Request body:', req.body);\r\n   const { name, email, phone, status , clubId} = req.body;\r\n"
                },
                {
                    "date": 1752677738600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,31 +25,62 @@\n // };\r\n \r\n // gym-api/src/controllers/crm.controller.ts\r\n // gym-api/src/controllers/crm.controller.ts\r\n+// export const getLeadsByStatus = async (req: Request, res: Response) => {\r\n+//   const { status, clubId } = req.query;\r\n+\r\n+//   if (!status || !clubId) {\r\n+//     return res.status(400).json({ error: 'Status and clubId are required' });\r\n+//   }\r\n+\r\n+//   try {\r\n+//     // Fetch leads and include the related Member data\r\n+//     const leads = await prisma.lead.findMany({\r\n+//       where: {\r\n+//         status: status as string,\r\n+//         clubId: clubId as string,  // Ensure clubId is passed and used correctly\r\n+//       },\r\n+//       include: {\r\n+//         member: true,  // Include member details (e.g., memberType)\r\n+//       },\r\n+//     });\r\n+\r\n+//     // Filter out leads that are not \"prospects\" based on memberType\r\n+//     const filteredLeads = leads.filter(lead => lead.member?.memberType === \"prospect\");\r\n+\r\n+//     res.json(filteredLeads);  // Return filtered leads\r\n+//   } catch (error) {\r\n+//     console.error('Error fetching leads by status', error);\r\n+//     res.status(500).json({ error: 'Failed to fetch leads' });\r\n+//   }\r\n+// };\r\n+\r\n+// gym-api/src/controllers/crm.controller.ts\r\n export const getLeadsByStatus = async (req: Request, res: Response) => {\r\n   const { status, clubId } = req.query;\r\n \r\n   if (!status || !clubId) {\r\n     return res.status(400).json({ error: 'Status and clubId are required' });\r\n   }\r\n \r\n   try {\r\n-    // Fetch leads and include the related Member data\r\n+    // Fetch leads filtered by status, clubId, and memberType (\"prospect\")\r\n     const leads = await prisma.lead.findMany({\r\n       where: {\r\n         status: status as string,\r\n-        clubId: clubId as string,  // Ensure clubId is passed and used correctly\r\n+        clubId: clubId as string,  // Ensure clubId is passed correctly\r\n+        member: {\r\n+          memberType: \"prospect\",  // Filter by memberType = \"prospect\"\r\n+        },\r\n       },\r\n-      include: {\r\n-        member: true,  // Include member details (e.g., memberType)\r\n-      },\r\n     });\r\n \r\n-    // Filter out leads that are not \"prospects\" based on memberType\r\n-    const filteredLeads = leads.filter(lead => lead.member?.memberType === \"prospect\");\r\n+    if (leads.length === 0) {\r\n+      console.log(\"No leads found for this club with memberType 'prospect'\");\r\n+    }\r\n \r\n-    res.json(filteredLeads);  // Return filtered leads\r\n+    res.json(leads);  // Return filtered leads\r\n   } catch (error) {\r\n     console.error('Error fetching leads by status', error);\r\n     res.status(500).json({ error: 'Failed to fetch leads' });\r\n   }\r\n@@ -58,8 +89,9 @@\n \r\n \r\n \r\n \r\n+\r\n export const createLead = async (req: Request, res: Response) => {\r\n     console.log('createLead called');\r\n   console.log('Request body:', req.body);\r\n   const { name, email, phone, status , clubId} = req.body;\r\n"
                },
                {
                    "date": 1752678039581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,62 +25,31 @@\n // };\r\n \r\n // gym-api/src/controllers/crm.controller.ts\r\n // gym-api/src/controllers/crm.controller.ts\r\n-// export const getLeadsByStatus = async (req: Request, res: Response) => {\r\n-//   const { status, clubId } = req.query;\r\n-\r\n-//   if (!status || !clubId) {\r\n-//     return res.status(400).json({ error: 'Status and clubId are required' });\r\n-//   }\r\n-\r\n-//   try {\r\n-//     // Fetch leads and include the related Member data\r\n-//     const leads = await prisma.lead.findMany({\r\n-//       where: {\r\n-//         status: status as string,\r\n-//         clubId: clubId as string,  // Ensure clubId is passed and used correctly\r\n-//       },\r\n-//       include: {\r\n-//         member: true,  // Include member details (e.g., memberType)\r\n-//       },\r\n-//     });\r\n-\r\n-//     // Filter out leads that are not \"prospects\" based on memberType\r\n-//     const filteredLeads = leads.filter(lead => lead.member?.memberType === \"prospect\");\r\n-\r\n-//     res.json(filteredLeads);  // Return filtered leads\r\n-//   } catch (error) {\r\n-//     console.error('Error fetching leads by status', error);\r\n-//     res.status(500).json({ error: 'Failed to fetch leads' });\r\n-//   }\r\n-// };\r\n-\r\n-// gym-api/src/controllers/crm.controller.ts\r\n export const getLeadsByStatus = async (req: Request, res: Response) => {\r\n   const { status, clubId } = req.query;\r\n \r\n   if (!status || !clubId) {\r\n     return res.status(400).json({ error: 'Status and clubId are required' });\r\n   }\r\n \r\n   try {\r\n-    // Fetch leads filtered by status, clubId, and memberType (\"prospect\")\r\n+    // Fetch leads and include the related Member data\r\n     const leads = await prisma.lead.findMany({\r\n       where: {\r\n         status: status as string,\r\n-        clubId: clubId as string,  // Ensure clubId is passed correctly\r\n-        member: {\r\n-          memberType: \"prospect\",  // Filter by memberType = \"prospect\"\r\n-        },\r\n+        clubId: clubId as string,  // Ensure clubId is passed and used correctly\r\n       },\r\n+      include: {\r\n+        member: true,  // Include member details (e.g., memberType)\r\n+      },\r\n     });\r\n \r\n-    if (leads.length === 0) {\r\n-      console.log(\"No leads found for this club with memberType 'prospect'\");\r\n-    }\r\n+    // Filter out leads that are not \"prospects\" based on memberType\r\n+    const filteredLeads = leads.filter(lead => lead.member?.memberType === \"prospect\");\r\n \r\n-    res.json(leads);  // Return filtered leads\r\n+    res.json(filteredLeads);  // Return filtered leads\r\n   } catch (error) {\r\n     console.error('Error fetching leads by status', error);\r\n     res.status(500).json({ error: 'Failed to fetch leads' });\r\n   }\r\n@@ -90,8 +59,10 @@\n \r\n \r\n \r\n \r\n+\r\n+\r\n export const createLead = async (req: Request, res: Response) => {\r\n     console.log('createLead called');\r\n   console.log('Request body:', req.body);\r\n   const { name, email, phone, status , clubId} = req.body;\r\n"
                },
                {
                    "date": 1752678711321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,44 +25,60 @@\n // };\r\n \r\n // gym-api/src/controllers/crm.controller.ts\r\n // gym-api/src/controllers/crm.controller.ts\r\n-export const getLeadsByStatus = async (req: Request, res: Response) => {\r\n-  const { status, clubId } = req.query;\r\n+// export const getLeadsByStatus = async (req: Request, res: Response) => {\r\n+//   const { status, clubId } = req.query;\r\n \r\n-  if (!status || !clubId) {\r\n-    return res.status(400).json({ error: 'Status and clubId are required' });\r\n-  }\r\n+//   if (!status || !clubId) {\r\n+//     return res.status(400).json({ error: 'Status and clubId are required' });\r\n+//   }\r\n \r\n+//   try {\r\n+//     // Fetch leads and include the related Member data\r\n+//     const leads = await prisma.lead.findMany({\r\n+//       where: {\r\n+//         status: status as string,\r\n+//         clubId: clubId as string,  // Ensure clubId is passed and used correctly\r\n+//       },\r\n+//       include: {\r\n+//         member: true,  // Include member details (e.g., memberType)\r\n+//       },\r\n+//     });\r\n+\r\n+//     // Filter out leads that are not \"prospects\" based on memberType\r\n+//     const filteredLeads = leads.filter(lead => lead.member?.memberType === \"prospect\");\r\n+\r\n+//     res.json(filteredLeads);  // Return filtered leads\r\n+//   } catch (error) {\r\n+//     console.error('Error fetching leads by status', error);\r\n+//     res.status(500).json({ error: 'Failed to fetch leads' });\r\n+//   }\r\n+// };\r\n+\r\n+export const getAllProspects = async (req: Request, res: Response) => {\r\n   try {\r\n-    // Fetch leads and include the related Member data\r\n-    const leads = await prisma.lead.findMany({\r\n+    const prospects = await prisma.member.findMany({\r\n       where: {\r\n-        status: status as string,\r\n-        clubId: clubId as string,  // Ensure clubId is passed and used correctly\r\n+        memberType: \"prospect\",  // Filter only prospects\r\n       },\r\n       include: {\r\n-        member: true,  // Include member details (e.g., memberType)\r\n+        club: true,  // Include the related club data to access clubId\r\n       },\r\n     });\r\n \r\n-    // Filter out leads that are not \"prospects\" based on memberType\r\n-    const filteredLeads = leads.filter(lead => lead.member?.memberType === \"prospect\");\r\n-\r\n-    res.json(filteredLeads);  // Return filtered leads\r\n+    res.json(prospects);  // Return the list of prospects\r\n   } catch (error) {\r\n-    console.error('Error fetching leads by status', error);\r\n-    res.status(500).json({ error: 'Failed to fetch leads' });\r\n+    console.error('Error fetching prospects', error);\r\n+    res.status(500).json({ error: 'Failed to fetch prospects' });\r\n   }\r\n };\r\n \r\n \r\n \r\n \r\n \r\n \r\n-\r\n-\r\n export const createLead = async (req: Request, res: Response) => {\r\n     console.log('createLead called');\r\n   console.log('Request body:', req.body);\r\n   const { name, email, phone, status , clubId} = req.body;\r\n"
                },
                {
                    "date": 1752678825361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,36 +25,36 @@\n // };\r\n \r\n // gym-api/src/controllers/crm.controller.ts\r\n // gym-api/src/controllers/crm.controller.ts\r\n-// export const getLeadsByStatus = async (req: Request, res: Response) => {\r\n-//   const { status, clubId } = req.query;\r\n+export const getLeadsByStatus = async (req: Request, res: Response) => {\r\n+  const { status, clubId } = req.query;\r\n \r\n-//   if (!status || !clubId) {\r\n-//     return res.status(400).json({ error: 'Status and clubId are required' });\r\n-//   }\r\n+  if (!status || !clubId) {\r\n+    return res.status(400).json({ error: 'Status and clubId are required' });\r\n+  }\r\n \r\n-//   try {\r\n-//     // Fetch leads and include the related Member data\r\n-//     const leads = await prisma.lead.findMany({\r\n-//       where: {\r\n-//         status: status as string,\r\n-//         clubId: clubId as string,  // Ensure clubId is passed and used correctly\r\n-//       },\r\n-//       include: {\r\n-//         member: true,  // Include member details (e.g., memberType)\r\n-//       },\r\n-//     });\r\n+  try {\r\n+    // Fetch leads and include the related Member data\r\n+    const leads = await prisma.lead.findMany({\r\n+      where: {\r\n+        status: status as string,\r\n+        clubId: clubId as string,  // Ensure clubId is passed and used correctly\r\n+      },\r\n+      include: {\r\n+        member: true,  // Include member details (e.g., memberType)\r\n+      },\r\n+    });\r\n \r\n-//     // Filter out leads that are not \"prospects\" based on memberType\r\n-//     const filteredLeads = leads.filter(lead => lead.member?.memberType === \"prospect\");\r\n+    // Filter out leads that are not \"prospects\" based on memberType\r\n+    const filteredLeads = leads.filter(lead => lead.member?.memberType === \"prospect\");\r\n \r\n-//     res.json(filteredLeads);  // Return filtered leads\r\n-//   } catch (error) {\r\n-//     console.error('Error fetching leads by status', error);\r\n-//     res.status(500).json({ error: 'Failed to fetch leads' });\r\n-//   }\r\n-// };\r\n+    res.json(filteredLeads);  // Return filtered leads\r\n+  } catch (error) {\r\n+    console.error('Error fetching leads by status', error);\r\n+    res.status(500).json({ error: 'Failed to fetch leads' });\r\n+  }\r\n+};\r\n \r\n export const getAllProspects = async (req: Request, res: Response) => {\r\n   try {\r\n     const prospects = await prisma.member.findMany({\r\n"
                },
                {
                    "date": 1752686031968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,142 +1,169 @@\n-// gym-api/src/controllers/crm.controller.ts\r\n import { Request, Response } from 'express';\r\n import { PrismaClient } from '@prisma/client';\r\n \r\n const prisma = new PrismaClient();\r\n \r\n-// export const getLeadsByStatus = async (req: Request, res: Response) => {\r\n-//   const { status } = req.query;\r\n-\r\n-//   if (!status) {\r\n-//     return res.status(400).json({ error: \"Status query parameter is required\" });\r\n-//   }\r\n-\r\n-//   try {\r\n-//     const leads = await prisma.lead.findMany({\r\n-//       where: {\r\n-//         status: status as string, // Make sure the status is a valid string\r\n-//       },\r\n-//     });\r\n-//     res.json(leads);  // Return leads as response\r\n-//   } catch (error) {\r\n-//     console.error('Error fetching leads by status', error);\r\n-//     res.status(500).json({ error: 'Failed to fetch leads' });\r\n-//   }\r\n-// };\r\n-\r\n-// gym-api/src/controllers/crm.controller.ts\r\n-// gym-api/src/controllers/crm.controller.ts\r\n+// Fetch leads by status and clubId\r\n export const getLeadsByStatus = async (req: Request, res: Response) => {\r\n   const { status, clubId } = req.query;\r\n \r\n   if (!status || !clubId) {\r\n     return res.status(400).json({ error: 'Status and clubId are required' });\r\n   }\r\n \r\n   try {\r\n-    // Fetch leads and include the related Member data\r\n     const leads = await prisma.lead.findMany({\r\n       where: {\r\n         status: status as string,\r\n-        clubId: clubId as string,  // Ensure clubId is passed and used correctly\r\n+        clubId: clubId as string,\r\n       },\r\n       include: {\r\n-        member: true,  // Include member details (e.g., memberType)\r\n+        member: true,\r\n       },\r\n     });\r\n \r\n-    // Filter out leads that are not \"prospects\" based on memberType\r\n-    const filteredLeads = leads.filter(lead => lead.member?.memberType === \"prospect\");\r\n-\r\n-    res.json(filteredLeads);  // Return filtered leads\r\n+    res.json(leads);\r\n   } catch (error) {\r\n     console.error('Error fetching leads by status', error);\r\n     res.status(500).json({ error: 'Failed to fetch leads' });\r\n   }\r\n };\r\n \r\n-export const getAllProspects = async (req: Request, res: Response) => {\r\n+// Fetch single lead by id\r\n+export const getLeadById = async (req: Request, res: Response) => {\r\n+  const { id } = req.params;\r\n   try {\r\n-    const prospects = await prisma.member.findMany({\r\n-      where: {\r\n-        memberType: \"prospect\",  // Filter only prospects\r\n-      },\r\n-      include: {\r\n-        club: true,  // Include the related club data to access clubId\r\n-      },\r\n+    const lead = await prisma.lead.findUnique({\r\n+      where: { id: parseInt(id) },\r\n+      include: { member: true },\r\n     });\r\n \r\n-    res.json(prospects);  // Return the list of prospects\r\n+    if (!lead) {\r\n+      return res.status(404).json({ error: 'Lead not found' });\r\n+    }\r\n+\r\n+    res.json(lead);\r\n   } catch (error) {\r\n-    console.error('Error fetching prospects', error);\r\n-    res.status(500).json({ error: 'Failed to fetch prospects' });\r\n+    console.error('Error fetching lead by ID', error);\r\n+    res.status(500).json({ error: 'Failed to fetch lead' });\r\n   }\r\n };\r\n \r\n-\r\n-\r\n-\r\n-\r\n-\r\n+// Create a new lead\r\n export const createLead = async (req: Request, res: Response) => {\r\n-    console.log('createLead called');\r\n-  console.log('Request body:', req.body);\r\n-  const { name, email, phone, status , clubId} = req.body;\r\n+  const { name, email, phone, status, clubId } = req.body;\r\n \r\n-  // Basic validation to ensure required fields are provided\r\n   if (!name || !email || !phone || !status || !clubId) {\r\n-    console.log('Validation failed - missing fields');\r\n-    return res.status(400).json({ error: 'Name, email, phone, and status and clubid are required' });\r\n+    return res.status(400).json({ error: 'All fields are required' });\r\n   }\r\n \r\n   try {\r\n-    console.log('Creating lead with data:', { name, email, phone, status, clubId });\r\n     const lead = await prisma.lead.create({\r\n       data: {\r\n         name,\r\n         email,\r\n         phone,\r\n         status,\r\n-        club: {\r\n-          connect: { id: clubId }, // Connect the lead to an existing club by its ID\r\n-        },\r\n+        club: { connect: { id: clubId } },\r\n       },\r\n     });\r\n-console.log('Lead created successfully:', lead);\r\n-    res.status(201).json(lead);  // Return created lead\r\n+\r\n+    res.status(201).json(lead);\r\n   } catch (error) {\r\n     console.error('Error creating lead', error);\r\n     res.status(500).json({ error: 'Failed to create lead' });\r\n   }\r\n };\r\n \r\n-\r\n+// Update an existing lead\r\n export const updateLead = async (req: Request, res: Response) => {\r\n   const { id } = req.params;\r\n   const { name, email, phone, status } = req.body;\r\n \r\n-  // Validate that the ID and required fields are provided\r\n-  if (!id || !name || !email || !phone || !status) {\r\n-    return res.status(400).json({ error: 'ID, name, email, phone, and status are required' });\r\n+  if (!name || !email || !phone || !status) {\r\n+    return res.status(400).json({ error: 'All fields are required' });\r\n   }\r\n \r\n   try {\r\n     const lead = await prisma.lead.update({\r\n-      where: { id: parseInt(id) },  // Ensure the ID is converted to an integer\r\n-      data: {\r\n-        name,\r\n-        email,\r\n-        phone,\r\n-        status,\r\n-      },\r\n+      where: { id: parseInt(id) },\r\n+      data: { name, email, phone, status },\r\n     });\r\n \r\n-    res.json(lead);  // Return updated lead\r\n-  } catch (error: any) {\r\n-    if (error.code === 'P2025') { // Prisma error code for record not found\r\n-      return res.status(404).json({ error: 'Lead not found' });\r\n-    }\r\n+    res.json(lead);\r\n+  } catch (error) {\r\n     console.error('Error updating lead', error);\r\n     res.status(500).json({ error: 'Failed to update lead' });\r\n   }\r\n };\r\n+\r\n+// Delete a lead\r\n+export const deleteLead = async (req: Request, res: Response) => {\r\n+  const { id } = req.params;\r\n+  try {\r\n+    await prisma.lead.delete({\r\n+      where: { id: parseInt(id) },\r\n+    });\r\n+\r\n+    res.status(204).send();\r\n+  } catch (error) {\r\n+    console.error('Error deleting lead', error);\r\n+    res.status(500).json({ error: 'Failed to delete lead' });\r\n+  }\r\n+};\r\n+\r\n+// Get all prospects\r\n+export const getAllProspects = async (req: Request, res: Response) => {\r\n+  try {\r\n+    const prospects = await prisma.member.findMany({\r\n+      where: { memberType: 'prospect' },\r\n+      include: { club: true },\r\n+    });\r\n+\r\n+    res.json(prospects);\r\n+  } catch (error) {\r\n+    console.error('Error fetching prospects', error);\r\n+    res.status(500).json({ error: 'Failed to fetch prospects' });\r\n+  }\r\n+};\r\n+\r\n+// Add communication to a lead\r\n+export const addCommunication = async (req: Request, res: Response) => {\r\n+  const { leadId, memberId, type, content, note, clubId } = req.body;\r\n+\r\n+  if (!leadId || !memberId || !type || !note || !clubId) {\r\n+    return res.status(400).json({ error: 'All fields are required' });\r\n+  }\r\n+\r\n+  try {\r\n+    const communication = await prisma.communication.create({\r\n+      data: {\r\n+        lead: { connect: { id: leadId } },\r\n+        member: { connect: { id: memberId } },\r\n+        type,\r\n+        content,\r\n+        note,\r\n+        club: { connect: { id: clubId } },\r\n+      },\r\n+    });\r\n+\r\n+    res.status(201).json(communication);\r\n+  } catch (error) {\r\n+    console.error('Error adding communication', error);\r\n+    res.status(500).json({ error: 'Failed to add communication' });\r\n+  }\r\n+};\r\n+\r\n+// Fetch staff members for assignment\r\n+export const getStaffMembers = async (req: Request, res: Response) => {\r\n+  try {\r\n+    const staff = await prisma.user.findMany({\r\n+      where: { role: 'staff' },\r\n+    });\r\n+\r\n+    res.json(staff);\r\n+  } catch (error) {\r\n+    console.error('Error fetching staff members', error);\r\n+    res.status(500).json({ error: 'Failed to fetch staff members' });\r\n+  }\r\n+};\r\n"
                },
                {
                    "date": 1752688945281,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,8 +75,10 @@\n   }\r\n };\r\n \r\n // Update an existing lead\r\n+\r\n+\r\n export const updateLead = async (req: Request, res: Response) => {\r\n   const { id } = req.params;\r\n   const { name, email, phone, status } = req.body;\r\n \r\n@@ -85,9 +87,9 @@\n   }\r\n \r\n   try {\r\n     const lead = await prisma.lead.update({\r\n-      where: { id: parseInt(id) },\r\n+      where: { id: id }, \r\n       data: { name, email, phone, status },\r\n     });\r\n \r\n     res.json(lead);\r\n"
                },
                {
                    "date": 1752690613552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,25 +50,48 @@\n };\r\n \r\n // Create a new lead\r\n export const createLead = async (req: Request, res: Response) => {\r\n-  const { name, email, phone, status, clubId } = req.body;\r\n+  const { name, email, phone, status, clubId, prospectId } = req.body;\r\n \r\n   if (!name || !email || !phone || !status || !clubId) {\r\n     return res.status(400).json({ error: 'All fields are required' });\r\n   }\r\n \r\n   try {\r\n-    const lead = await prisma.lead.create({\r\n-      data: {\r\n+    const lead : any = ({\r\n+      \r\n         name,\r\n         email,\r\n         phone,\r\n         status,\r\n         club: { connect: { id: clubId } },\r\n-      },\r\n+    \r\n     });\r\n \r\n+    // If a prospectId is provided, connect the new lead to that member\r\n+    if (prospectId) {\r\n+      // Ensure that the Member with prospectId exists and is a 'prospect'\r\n+      const existingProspect = await prisma.member.findUnique({\r\n+        where: { id: prospectId },\r\n+        // You might want to add a check here if memberType === 'prospect'\r\n+        // If not a prospect, you might throw an error or handle differently.\r\n+      });\r\n+\r\n+      if (existingProspect) {\r\n+        leadData.member = { connect: { id: prospectId } };\r\n+      } else {\r\n+        console.warn(`Prospect with ID ${prospectId} not found or not a valid prospect.`);\r\n+        // Decide how to handle this:\r\n+        // Option A: Just proceed with creating the lead without linking to a member.\r\n+        // Option B: Return an error if linking to a prospect is mandatory.\r\n+      }\r\n+    }\r\n+\r\n+    const lead = await prisma.lead.create({\r\n+      data: leadData,\r\n+    });\r\n+\r\n     res.status(201).json(lead);\r\n   } catch (error) {\r\n     console.error('Error creating lead', error);\r\n     res.status(500).json({ error: 'Failed to create lead' });\r\n"
                },
                {
                    "date": 1752690899690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -191,4 +191,26 @@\n     console.error('Error fetching staff members', error);\r\n     res.status(500).json({ error: 'Failed to fetch staff members' });\r\n   }\r\n };\r\n+\r\n+// src/controllers/crm.controller.ts (or wherever your /api/crm/prospects logic is)\r\n+\r\n+export const getProspects = async (req: Request, res: Response) => {\r\n+  try {\r\n+    const prospects = await prisma.member.findMany({\r\n+      where: {\r\n+        memberType: 'prospect',\r\n+      },\r\n+      include: {\r\n+        lead: { // Include the related Lead if it exists\r\n+          select: { id: true } // Only need the id to know if it's linked\r\n+        }\r\n+      }\r\n+    });\r\n+\r\n+    res.json(prospects);\r\n+  } catch (error) {\r\n+    console.error('Error fetching prospects', error);\r\n+    res.status(500).json({ error: 'Failed to fetch prospects' });\r\n+  }\r\n+};\r\n"
                },
                {
                    "date": 1752691079919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n     return res.status(400).json({ error: 'All fields are required' });\r\n   }\r\n \r\n   try {\r\n-    const lead : any = ({\r\n+    const leadData : any = ({\r\n       \r\n         name,\r\n         email,\r\n         phone,\r\n@@ -86,13 +86,13 @@\n         // Option B: Return an error if linking to a prospect is mandatory.\r\n       }\r\n     }\r\n \r\n-    const lead = await prisma.lead.create({\r\n+    const newlead = await prisma.lead.create({\r\n       data: leadData,\r\n     });\r\n \r\n-    res.status(201).json(lead);\r\n+    res.status(201).json(newlead);\r\n   } catch (error) {\r\n     console.error('Error creating lead', error);\r\n     res.status(500).json({ error: 'Failed to create lead' });\r\n   }\r\n"
                },
                {
                    "date": 1752691567170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,9 +141,14 @@\n export const getAllProspects = async (req: Request, res: Response) => {\r\n   try {\r\n     const prospects = await prisma.member.findMany({\r\n       where: { memberType: 'prospect' },\r\n-      include: { club: true },\r\n+      include: { \r\n+        club: true, // Include club information if needed\r\n+        lead: {\r\n+            select: { id: true } // Include lead ID to check if the prospect has a lead\r\n+        }\r\n+       },\r\n     });\r\n \r\n     res.json(prospects);\r\n   } catch (error) {\r\n"
                },
                {
                    "date": 1752691977029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,23 +199,4 @@\n };\r\n \r\n // src/controllers/crm.controller.ts (or wherever your /api/crm/prospects logic is)\r\n \r\n-export const getProspects = async (req: Request, res: Response) => {\r\n-  try {\r\n-    const prospects = await prisma.member.findMany({\r\n-      where: {\r\n-        memberType: 'prospect',\r\n-      },\r\n-      include: {\r\n-        lead: { // Include the related Lead if it exists\r\n-          select: { id: true } // Only need the id to know if it's linked\r\n-        }\r\n-      }\r\n-    });\r\n-\r\n-    res.json(prospects);\r\n-  } catch (error) {\r\n-    console.error('Error fetching prospects', error);\r\n-    res.status(500).json({ error: 'Failed to fetch prospects' });\r\n-  }\r\n-};\r\n"
                },
                {
                    "date": 1752692463082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,18 +6,23 @@\n // Fetch leads by status and clubId\r\n export const getLeadsByStatus = async (req: Request, res: Response) => {\r\n   const { status, clubId } = req.query;\r\n \r\n-  if (!status || !clubId) {\r\n+  if (!status ) {\r\n     return res.status(400).json({ error: 'Status and clubId are required' });\r\n   }\r\n \r\n   try {\r\n+    const whereClause: any = { // Use 'any' for now to allow dynamic properties\r\n+      status: status as string,\r\n+    };\r\n+\r\n+    // Conditionally add clubId to the where clause if it's provided and not an empty string\r\n+    if (clubId && clubId !== '') { // Check if clubId exists and is not an empty string\r\n+      whereClause.clubId = clubId as string;\r\n+    }\r\n     const leads = await prisma.lead.findMany({\r\n-      where: {\r\n-        status: status as string,\r\n-        clubId: clubId as string,\r\n-      },\r\n+      where: whereClause,\r\n       include: {\r\n         member: true,\r\n       },\r\n     });\r\n"
                },
                {
                    "date": 1752692831623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n export const getLeadsByStatus = async (req: Request, res: Response) => {\r\n   const { status, clubId } = req.query;\r\n \r\n   if (!status ) {\r\n-    return res.status(400).json({ error: 'Status and clubId are required' });\r\n+    return res.status(400).json({ error: 'Status is required' });\r\n   }\r\n \r\n   try {\r\n     const whereClause: any = { // Use 'any' for now to allow dynamic properties\r\n"
                },
                {
                    "date": 1752693259236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -165,23 +165,29 @@\n // Add communication to a lead\r\n export const addCommunication = async (req: Request, res: Response) => {\r\n   const { leadId, memberId, type, content, note, clubId } = req.body;\r\n \r\n-  if (!leadId || !memberId || !type || !note || !clubId) {\r\n+  if (!leadId || !type || !note || !clubId) {\r\n     return res.status(400).json({ error: 'All fields are required' });\r\n   }\r\n \r\n   try {\r\n-    const communication = await prisma.communication.create({\r\n-      data: {\r\n+    const communicationData : any = ({\r\n+      \r\n         lead: { connect: { id: leadId } },\r\n-        member: { connect: { id: memberId } },\r\n+        \r\n         type,\r\n         content,\r\n         note,\r\n         club: { connect: { id: clubId } },\r\n-      },\r\n+      \r\n     });\r\n+     if (memberId) { // Only add member connection if memberId is present\r\n+      communicationData.member = { connect: { id: memberId } };\r\n+    }\r\n+     const communication = await prisma.communication.create({\r\n+      data: communicationData, // Use the dynamically built data object\r\n+    });\r\n \r\n     res.status(201).json(communication);\r\n   } catch (error) {\r\n     console.error('Error adding communication', error);\r\n"
                },
                {
                    "date": 1752693907376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,9 +187,14 @@\n      const communication = await prisma.communication.create({\r\n       data: communicationData, // Use the dynamically built data object\r\n     });\r\n \r\n-    res.status(201).json(communication);\r\n+    const updatedLead = await prisma.lead.update({\r\n+      where: { id: leadId }, // Use leadId to find the lead\r\n+      data: { status: 'CONTACTED' }, // Set its status to CONTACTED\r\n+    });\r\n+\r\n+    res.status(201).json(updateLead);\r\n   } catch (error) {\r\n     console.error('Error adding communication', error);\r\n     res.status(500).json({ error: 'Failed to add communication' });\r\n   }\r\n"
                },
                {
                    "date": 1752698678595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -192,9 +192,9 @@\n       where: { id: leadId }, // Use leadId to find the lead\r\n       data: { status: 'CONTACTED' }, // Set its status to CONTACTED\r\n     });\r\n \r\n-    res.status(201).json(updateLead);\r\n+    res.status(201).json(updatedLead);\r\n   } catch (error) {\r\n     console.error('Error adding communication', error);\r\n     res.status(500).json({ error: 'Failed to add communication' });\r\n   }\r\n@@ -213,6 +213,23 @@\n     res.status(500).json({ error: 'Failed to fetch staff members' });\r\n   }\r\n };\r\n \r\n-// src/controllers/crm.controller.ts (or wherever your /api/crm/prospects logic is)\r\n+export const convertLead = async (req: Request, res: Response) => {\r\n+  const { id } = req.params; // Lead ID from URL parameters\r\n \r\n+  try {\r\n+    const updatedLead = await prisma.lead.update({\r\n+      where: { id: id as string }, // Cast id to string\r\n+      data: {\r\n+        status: 'CONVERTED',\r\n+        convertedAt: new Date(), // Optionally add a timestamp for conversion\r\n+      },\r\n+    });\r\n+\r\n+    res.status(200).json(updatedLead); // Send back the updated lead\r\n+  } catch (error) {\r\n+    console.error('Error converting lead:', error);\r\n+    res.status(500).json({ message: 'Failed to convert lead', error: error.message });\r\n+  }\r\n+};\r\n+\r\n"
                },
                {
                    "date": 1752699615272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -214,22 +214,35 @@\n   }\r\n };\r\n \r\n export const convertLead = async (req: Request, res: Response) => {\r\n-  const { id } = req.params; // Lead ID from URL parameters\r\n+  const { prospectId } = req.body;\r\n \r\n+  if (!prospectId) {\r\n+    return res.status(400).json({ error: 'Prospect ID is required to convert lead' });\r\n+  }\r\n+\r\n   try {\r\n-    const updatedLead = await prisma.lead.update({\r\n-      where: { id: id as string }, // Cast id to string\r\n+    // Convert the prospect to a member (update memberType)\r\n+    const member = await prisma.member.update({\r\n+      where: { id: prospectId },\r\n       data: {\r\n-        status: 'CONVERTED',\r\n-        convertedAt: new Date(), // Optionally add a timestamp for conversion\r\n+        memberType: 'member',  // Change memberType from 'prospect' to 'member'\r\n       },\r\n     });\r\n \r\n-    res.status(200).json(updatedLead); // Send back the updated lead\r\n+    // Optionally, update the lead's status to \"CONVERTED\" as well\r\n+    const lead = await prisma.lead.update({\r\n+      where: { prospectId },\r\n+      data: {\r\n+        status: 'CONVERTED',  // Mark the lead as \"CONVERTED\"\r\n+      },\r\n+    });\r\n+\r\n+    res.status(200).json({ member, lead });  // Return the updated member and lead\r\n   } catch (error) {\r\n     console.error('Error converting lead:', error);\r\n-    res.status(500).json({ message: 'Failed to convert lead', error: error.message });\r\n+    res.status(500).json({ error: 'Failed to convert lead' });\r\n   }\r\n };\r\n \r\n+\r\n"
                },
                {
                    "date": 1752700601297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -213,36 +213,68 @@\n     res.status(500).json({ error: 'Failed to fetch staff members' });\r\n   }\r\n };\r\n \r\n+// controllers/crm.controller.ts\r\n+\r\n+// ... (existing imports and other controller functions)\r\n+\r\n export const convertLead = async (req: Request, res: Response) => {\r\n-  const { prospectId } = req.body;\r\n+  const { id } = req.params; // Get the lead ID from the URL parameter\r\n+  // You might optionally get 'convertedBy' from req.body if you're sending it,\r\n+  // but it's not strictly necessary for the core conversion logic here.\r\n+  // const { convertedBy } = req.body;\r\n \r\n-  if (!prospectId) {\r\n-    return res.status(400).json({ error: 'Prospect ID is required to convert lead' });\r\n-  }\r\n-\r\n   try {\r\n-    // Convert the prospect to a member (update memberType)\r\n-    const member = await prisma.member.update({\r\n-      where: { id: prospectId },\r\n-      data: {\r\n-        memberType: 'member',  // Change memberType from 'prospect' to 'member'\r\n-      },\r\n+    // 1. Find the lead to get its associated prospectId (memberId in your schema)\r\n+    const leadToUpdate = await prisma.lead.findUnique({\r\n+      where: { id: id as string }, // Ensure ID is treated as string (UUID)\r\n+      select: {\r\n+        id: true,\r\n+        memberId: true, // Assuming memberId is the field linking Lead to Member/Prospect\r\n+        firstName: true, // Include these for the response if needed\r\n+        lastName: true,\r\n+        status: true\r\n+      }\r\n     });\r\n \r\n-    // Optionally, update the lead's status to \"CONVERTED\" as well\r\n-    const lead = await prisma.lead.update({\r\n-      where: { prospectId },\r\n+    if (!leadToUpdate) {\r\n+      return res.status(404).json({ error: 'Lead not found.' });\r\n+    }\r\n+\r\n+    if (!leadToUpdate.memberId) {\r\n+      // This lead is not associated with a prospect, so cannot convert its member type.\r\n+      // You might handle this differently, e.g., allow converting even without a linked prospect.\r\n+      console.warn(`Lead ${id} has no associated memberId, cannot convert underlying prospect.`);\r\n+      // Proceed to only update the lead status\r\n+    }\r\n+\r\n+    let updatedMember = null;\r\n+    if (leadToUpdate.memberId) {\r\n+      // 2. Convert the associated prospect to a member (update memberType)\r\n+      updatedMember = await prisma.member.update({\r\n+        where: { id: leadToUpdate.memberId },\r\n+        data: {\r\n+          memberType: 'member', // Change memberType from 'prospect' to 'member'\r\n+        },\r\n+      });\r\n+    }\r\n+\r\n+\r\n+    // 3. Update the lead's status to \"CONVERTED\"\r\n+    const updatedLead = await prisma.lead.update({\r\n+      where: { id: id as string }, // Use the lead ID from params to update the lead\r\n       data: {\r\n-        status: 'CONVERTED',  // Mark the lead as \"CONVERTED\"\r\n+        status: 'CONVERTED', // Mark the lead as \"CONVERTED\"\r\n+        convertedAt: new Date(), // Set conversion timestamp\r\n+        // You can also record who converted it here if you pass convertedBy from frontend\r\n+        // convertedByUserId: convertedBy,\r\n       },\r\n     });\r\n \r\n-    res.status(200).json({ member, lead });  // Return the updated member and lead\r\n+    res.status(200).json(updatedLead); // Return the updated lead (or both member and lead if preferred)\r\n   } catch (error) {\r\n     console.error('Error converting lead:', error);\r\n-    res.status(500).json({ error: 'Failed to convert lead' });\r\n+    res.status(500).json({ message: 'Failed to convert lead', error: error.message });\r\n   }\r\n };\r\n \r\n-\r\n"
                },
                {
                    "date": 1752700733646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -218,63 +218,59 @@\n \r\n // ... (existing imports and other controller functions)\r\n \r\n export const convertLead = async (req: Request, res: Response) => {\r\n-  const { id } = req.params; // Get the lead ID from the URL parameter\r\n-  // You might optionally get 'convertedBy' from req.body if you're sending it,\r\n-  // but it's not strictly necessary for the core conversion logic here.\r\n-  // const { convertedBy } = req.body;\r\n+  const { id } = req.params; // This is the ID of the LEAD from the URL\r\n \r\n   try {\r\n-    // 1. Find the lead to get its associated prospectId (memberId in your schema)\r\n-    const leadToUpdate = await prisma.lead.findUnique({\r\n-      where: { id: id as string }, // Ensure ID is treated as string (UUID)\r\n-      select: {\r\n-        id: true,\r\n-        memberId: true, // Assuming memberId is the field linking Lead to Member/Prospect\r\n-        firstName: true, // Include these for the response if needed\r\n-        lastName: true,\r\n-        status: true\r\n-      }\r\n+    // 1. Find the Lead and include its associated Member (if any)\r\n+    const leadToConvert = await prisma.lead.findUnique({\r\n+      where: { id: id as string },\r\n+      include: {\r\n+        member: { // Include the member linked to this lead (if it exists)\r\n+          select: {\r\n+            id: true,\r\n+            memberType: true,\r\n+          },\r\n+        },\r\n+      },\r\n     });\r\n \r\n-    if (!leadToUpdate) {\r\n+    if (!leadToConvert) {\r\n       return res.status(404).json({ error: 'Lead not found.' });\r\n     }\r\n \r\n-    if (!leadToUpdate.memberId) {\r\n-      // This lead is not associated with a prospect, so cannot convert its member type.\r\n-      // You might handle this differently, e.g., allow converting even without a linked prospect.\r\n-      console.warn(`Lead ${id} has no associated memberId, cannot convert underlying prospect.`);\r\n-      // Proceed to only update the lead status\r\n-    }\r\n-\r\n-    let updatedMember = null;\r\n-    if (leadToUpdate.memberId) {\r\n-      // 2. Convert the associated prospect to a member (update memberType)\r\n-      updatedMember = await prisma.member.update({\r\n-        where: { id: leadToUpdate.memberId },\r\n+    // Start a Prisma transaction if you want both updates (Lead and Member) to be atomic.\r\n+    // If one fails, both rollback. This is highly recommended for dependent operations.\r\n+    const [updatedLead, updatedMember] = await prisma.$transaction([\r\n+      // 2. Update the Lead's status to \"CONVERTED\"\r\n+      prisma.lead.update({\r\n+        where: { id: id as string },\r\n         data: {\r\n-          memberType: 'member', // Change memberType from 'prospect' to 'member'\r\n+          status: 'CONVERTED',\r\n+          convertedAt: new Date(),\r\n         },\r\n-      });\r\n-    }\r\n+      }),\r\n+      // 3. Conditionally update the associated Member's type if a member is linked\r\n+      ...(leadToConvert.member ? [ // Use spread operator with an array for conditional update\r\n+        prisma.member.update({\r\n+          where: { id: leadToConvert.member.id },\r\n+          data: {\r\n+            memberType: 'member', // Change memberType from 'prospect' to 'member'\r\n+          },\r\n+        })\r\n+      ] : []), // If no member, return an empty array for the transaction\r\n+    ]);\r\n \r\n+    // If you don't use a transaction, you'd do:\r\n+    // const updatedLead = await prisma.lead.update({ ... });\r\n+    // if (leadToConvert.member) {\r\n+    //   const updatedMember = await prisma.member.update({ ... });\r\n+    // }\r\n \r\n-    // 3. Update the lead's status to \"CONVERTED\"\r\n-    const updatedLead = await prisma.lead.update({\r\n-      where: { id: id as string }, // Use the lead ID from params to update the lead\r\n-      data: {\r\n-        status: 'CONVERTED', // Mark the lead as \"CONVERTED\"\r\n-        convertedAt: new Date(), // Set conversion timestamp\r\n-        // You can also record who converted it here if you pass convertedBy from frontend\r\n-        // convertedByUserId: convertedBy,\r\n-      },\r\n-    });\r\n-\r\n-    res.status(200).json(updatedLead); // Return the updated lead (or both member and lead if preferred)\r\n+    res.status(200).json(updatedLead); // Return the updated lead\r\n   } catch (error) {\r\n     console.error('Error converting lead:', error);\r\n-    res.status(500).json({ message: 'Failed to convert lead', error: error.message });\r\n+    res.status(500).json({ message: 'Failed to convert lead', error: (error as Error).message });\r\n   }\r\n };\r\n \r\n"
                }
            ],
            "date": 1752660494345,
            "name": "Commit-0",
            "content": "// gym-api/src/controllers/crm.controller.ts\r\nimport { Request, Response } from 'express';\r\nimport { PrismaClient } from '@prisma/client';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nexport const getLeadsByStatus = async (req: Request, res: Response) => {\r\n  const { status } = req.query;\r\n\r\n  try {\r\n    const leads = await prisma.lead.findMany({\r\n      where: { status: status as string },\r\n    });\r\n    res.json(leads);  // Send leads as response\r\n  } catch (error) {\r\n    res.status(500).json({ error: 'Failed to fetch leads' });\r\n  }\r\n};\r\n"
        }
    ]
}