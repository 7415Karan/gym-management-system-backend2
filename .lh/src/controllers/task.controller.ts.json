{
    "sourceFile": "src/controllers/task.controller.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1752944167280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752946883927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,16 +4,24 @@\n export const createTask = async (req: Request, res: Response) => {\r\n   try {\r\n     const { title, description, dueDate, assignedTo, clubId, assignedBy } = req.body;\r\n \r\n+    // Validate required fields\r\n+    if (!title || !assignedTo || !clubId || !assignedBy) {\r\n+      return res.status(400).json({ \r\n+        error: 'Missing required fields: title, assignedTo, clubId, and assignedBy are required' \r\n+      });\r\n+    }\r\n+\r\n     const task = await prisma.task.create({\r\n       data: {\r\n         title,\r\n-        description,\r\n-        dueDate: new Date(dueDate),\r\n+        description: description || '',\r\n+        dueDate: dueDate ? new Date(dueDate) : new Date(),\r\n         assignedTo,\r\n         assignedBy,\r\n         clubId,\r\n+        status: 'PENDING' // Set default status\r\n       }\r\n     });\r\n \r\n     res.status(201).json(task);\r\n@@ -21,9 +29,8 @@\n     console.error('Task creation error:', err);\r\n     res.status(500).json({ error: 'Failed to create task' });\r\n   }\r\n };\r\n-\r\n export const getTasksForClub = async (req: Request, res: Response) => {\r\n   const { clubId, userId } = req.query;\r\n \r\n   try {\r\n"
                },
                {
                    "date": 1752949624754,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,14 +5,20 @@\n   try {\r\n     const { title, description, dueDate, assignedTo, clubId, assignedBy } = req.body;\r\n \r\n     // Validate required fields\r\n-    if (!title || !assignedTo || !clubId || !assignedBy) {\r\n-      return res.status(400).json({ \r\n-        error: 'Missing required fields: title, assignedTo, clubId, and assignedBy are required' \r\n-      });\r\n-    }\r\n+   if (\r\n+  !title ||\r\n+  typeof assignedTo !== 'string' ||\r\n+  typeof clubId !== 'string' ||\r\n+  typeof assignedBy !== 'string'\r\n+) {\r\n+  return res.status(400).json({\r\n+    error: 'Missing or invalid required fields: title, assignedTo, clubId, assignedBy',\r\n+  });\r\n+}\r\n \r\n+\r\n     const task = await prisma.task.create({\r\n       data: {\r\n         title,\r\n         description: description || '',\r\n"
                },
                {
                    "date": 1752985840602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,22 +35,56 @@\n     console.error('Task creation error:', err);\r\n     res.status(500).json({ error: 'Failed to create task' });\r\n   }\r\n };\r\n+// export const getTasksForClub = async (req: Request, res: Response) => {\r\n+//   const { clubId, userId } = req.query;\r\n+\r\n+//   try {\r\n+//     const tasks = await prisma.task.findMany({\r\n+//       where: {\r\n+//         clubId: String(clubId),\r\n+//         ...(userId ? { assignedTo: String(userId) } : {}),\r\n+//       },\r\n+//       orderBy: { dueDate: 'asc' }\r\n+//     });\r\n+\r\n+//     res.json(tasks);\r\n+//   } catch (err) {\r\n+//     res.status(500).json({ error: 'Failed to fetch tasks' });\r\n+//   }\r\n+// };\r\n+\r\n export const getTasksForClub = async (req: Request, res: Response) => {\r\n   const { clubId, userId } = req.query;\r\n \r\n   try {\r\n+    const whereClause: any = {};\r\n+    \r\n+    if (clubId) {\r\n+      whereClause.clubId = String(clubId);\r\n+    }\r\n+    \r\n+    if (userId) {\r\n+      whereClause.assignedTo = String(userId); // This filters tasks for specific user\r\n+    }\r\n+\r\n     const tasks = await prisma.task.findMany({\r\n-      where: {\r\n-        clubId: String(clubId),\r\n-        ...(userId ? { assignedTo: String(userId) } : {}),\r\n+      where: whereClause,\r\n+      include: {\r\n+        staff: {\r\n+          select: { name: true, email: true }\r\n+        },\r\n+        assignedByUser: {\r\n+          select: { name: true, email: true }\r\n+        }\r\n       },\r\n       orderBy: { dueDate: 'asc' }\r\n     });\r\n \r\n     res.json(tasks);\r\n   } catch (err) {\r\n+    console.error('Error fetching tasks:', err);\r\n     res.status(500).json({ error: 'Failed to fetch tasks' });\r\n   }\r\n };\r\n \r\n"
                }
            ],
            "date": 1752944167279,
            "name": "Commit-0",
            "content": "import { Request, Response } from 'express';\r\nimport prisma from '../lib/prisma';\r\n\r\nexport const createTask = async (req: Request, res: Response) => {\r\n  try {\r\n    const { title, description, dueDate, assignedTo, clubId, assignedBy } = req.body;\r\n\r\n    const task = await prisma.task.create({\r\n      data: {\r\n        title,\r\n        description,\r\n        dueDate: new Date(dueDate),\r\n        assignedTo,\r\n        assignedBy,\r\n        clubId,\r\n      }\r\n    });\r\n\r\n    res.status(201).json(task);\r\n  } catch (err) {\r\n    console.error('Task creation error:', err);\r\n    res.status(500).json({ error: 'Failed to create task' });\r\n  }\r\n};\r\n\r\nexport const getTasksForClub = async (req: Request, res: Response) => {\r\n  const { clubId, userId } = req.query;\r\n\r\n  try {\r\n    const tasks = await prisma.task.findMany({\r\n      where: {\r\n        clubId: String(clubId),\r\n        ...(userId ? { assignedTo: String(userId) } : {}),\r\n      },\r\n      orderBy: { dueDate: 'asc' }\r\n    });\r\n\r\n    res.json(tasks);\r\n  } catch (err) {\r\n    res.status(500).json({ error: 'Failed to fetch tasks' });\r\n  }\r\n};\r\n\r\nexport const updateTaskStatus = async (req: Request, res: Response) => {\r\n  const { id } = req.params;\r\n  const { status } = req.body;\r\n\r\n  try {\r\n    const updated = await prisma.task.update({\r\n      where: { id },\r\n      data: { status }\r\n    });\r\n\r\n    res.json(updated);\r\n  } catch (err) {\r\n    res.status(500).json({ error: 'Failed to update task' });\r\n  }\r\n};\r\n\r\nexport const deleteTask = async (req: Request, res: Response) => {\r\n  const { id } = req.params;\r\n\r\n  try {\r\n    await prisma.task.delete({ where: { id } });\r\n    res.json({ success: true });\r\n  } catch (err) {\r\n    res.status(500).json({ error: 'Failed to delete task' });\r\n  }\r\n};\r\n"
        }
    ]
}