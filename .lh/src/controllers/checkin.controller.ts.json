{
    "sourceFile": "src/controllers/checkin.controller.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1752936775650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752939109615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,4 +42,44 @@\n     console.error('Error fetching today logs:', error);\r\n     res.status(500).json({ error: 'Failed to fetch check-in logs' });\r\n   }\r\n };\r\n+export const manualCheckIn = async (req: Request, res: Response) => {\r\n+  const { memberId } = req.body;\r\n+\r\n+  if (!memberId) {\r\n+    return res.status(400).json({ error: 'Missing memberId' });\r\n+  }\r\n+\r\n+  try {\r\n+    // Check for existing check-in for today\r\n+    const start = new Date();\r\n+    start.setHours(0, 0, 0, 0);\r\n+    const end = new Date();\r\n+    end.setHours(23, 59, 59, 999);\r\n+\r\n+    const alreadyCheckedIn = await prisma.attendance.findFirst({\r\n+      where: {\r\n+        memberId,\r\n+        markedAt: { gte: start, lte: end },\r\n+      },\r\n+    });\r\n+\r\n+    if (alreadyCheckedIn) {\r\n+      return res.status(400).json({ error: 'Member already checked in today.' });\r\n+    }\r\n+\r\n+    const newCheckIn = await prisma.attendance.create({\r\n+      data: {\r\n+        memberId,\r\n+        scheduleId: 'manual-checkin', // optional: or null if not class-based\r\n+        status: 'present',\r\n+        markedAt: new Date(),\r\n+      },\r\n+    });\r\n+\r\n+    res.status(201).json({ message: 'Check-in successful', data: newCheckIn });\r\n+  } catch (error) {\r\n+    console.error('Manual check-in error:', error);\r\n+    res.status(500).json({ error: 'Check-in failed' });\r\n+  }\r\n+};\r\n"
                },
                {
                    "date": 1752941015659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,13 +69,15 @@\n     }\r\n \r\n     const newCheckIn = await prisma.attendance.create({\r\n       data: {\r\n-        memberId,\r\n-        scheduleId: 'manual-checkin', // optional: or null if not class-based\r\n-        status: 'present',\r\n-        markedAt: new Date(),\r\n-      },\r\n+    memberId,\r\n+    status: 'present',\r\n+    markedAt: new Date(),\r\n+    markedById: req.user?.id,\r\n+    clubId: req.user?.clubId,\r\n+    scheduleId: null, // âœ… THIS LINE IS MANDATORY\r\n+  },\r\n     });\r\n \r\n     res.status(201).json({ message: 'Check-in successful', data: newCheckIn });\r\n   } catch (error) {\r\n"
                },
                {
                    "date": 1753009428705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,49 @@\n import { PrismaClient } from '@prisma/client';\r\n \r\n const prisma = new PrismaClient();\r\n \r\n+// export const getTodayLogs = async (req: Request, res: Response) => {\r\n+//   const start = new Date();\r\n+//   start.setHours(0, 0, 0, 0);\r\n+//   const end = new Date();\r\n+//   end.setHours(23, 59, 59, 999);\r\n+\r\n+//   try {\r\n+//     const logs = await prisma.attendance.findMany({\r\n+//       where: {\r\n+//         markedAt: {\r\n+//           gte: start,\r\n+//           lte: end,\r\n+//         },\r\n+//       },\r\n+//       include: {\r\n+//         member: {\r\n+//           select: {\r\n+//             firstName: true,\r\n+//             lastName: true,\r\n+//           },\r\n+//         },\r\n+//       },\r\n+//       orderBy: {\r\n+//         markedAt: 'desc',\r\n+//       },\r\n+//     });\r\n+\r\n+//     const formatted = logs.map((log) => ({\r\n+//       memberName: `${log.member.firstName} ${log.member.lastName}`,\r\n+//       time: log.markedAt.toLocaleTimeString(),\r\n+//       status: log.status,\r\n+//     }));\r\n+\r\n+//     res.json(formatted);\r\n+//   } catch (error) {\r\n+//     console.error('Error fetching today logs:', error);\r\n+//     res.status(500).json({ error: 'Failed to fetch check-in logs' });\r\n+//   }\r\n+// };\r\n+\r\n+\r\n export const getTodayLogs = async (req: Request, res: Response) => {\r\n   const start = new Date();\r\n   start.setHours(0, 0, 0, 0);\r\n   const end = new Date();\r\n@@ -12,8 +53,9 @@\n \r\n   try {\r\n     const logs = await prisma.attendance.findMany({\r\n       where: {\r\n+        clubId: req.user?.clubId,\r\n         markedAt: {\r\n           gte: start,\r\n           lte: end,\r\n         },\r\n@@ -42,8 +84,11 @@\n     console.error('Error fetching today logs:', error);\r\n     res.status(500).json({ error: 'Failed to fetch check-in logs' });\r\n   }\r\n };\r\n+\r\n+\r\n+\r\n export const manualCheckIn = async (req: Request, res: Response) => {\r\n   const { memberId } = req.body;\r\n \r\n   if (!memberId) {\r\n"
                }
            ],
            "date": 1752936775650,
            "name": "Commit-0",
            "content": "// src/controllers/checkin.controller.ts\r\nimport { Request, Response } from 'express';\r\nimport { PrismaClient } from '@prisma/client';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nexport const getTodayLogs = async (req: Request, res: Response) => {\r\n  const start = new Date();\r\n  start.setHours(0, 0, 0, 0);\r\n  const end = new Date();\r\n  end.setHours(23, 59, 59, 999);\r\n\r\n  try {\r\n    const logs = await prisma.attendance.findMany({\r\n      where: {\r\n        markedAt: {\r\n          gte: start,\r\n          lte: end,\r\n        },\r\n      },\r\n      include: {\r\n        member: {\r\n          select: {\r\n            firstName: true,\r\n            lastName: true,\r\n          },\r\n        },\r\n      },\r\n      orderBy: {\r\n        markedAt: 'desc',\r\n      },\r\n    });\r\n\r\n    const formatted = logs.map((log) => ({\r\n      memberName: `${log.member.firstName} ${log.member.lastName}`,\r\n      time: log.markedAt.toLocaleTimeString(),\r\n      status: log.status,\r\n    }));\r\n\r\n    res.json(formatted);\r\n  } catch (error) {\r\n    console.error('Error fetching today logs:', error);\r\n    res.status(500).json({ error: 'Failed to fetch check-in logs' });\r\n  }\r\n};\r\n"
        }
    ]
}