{
    "sourceFile": "src/controllers/attendance.controller.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1752450899781,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752484618317,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,33 +2,49 @@\n import { PrismaClient } from '@prisma/client';\r\n \r\n const prisma = new PrismaClient();\r\n \r\n-// GET /attendance?date=&classId=&trainerId=\r\n+// GET /attendance?date=&classId=&trainerId=&clubId=\r\n export const getAttendanceByFilters = async (req: Request, res: Response) => {\r\n-  const { date, classId, trainerId } = req.query;\r\n+  const { date, classId, trainerId, clubId } = req.query;\r\n \r\n   try {\r\n+    const dateFilter =\r\n+      date\r\n+        ? {\r\n+            gte: new Date(`${date}T00:00:00.000Z`),\r\n+            lt: new Date(`${date}T23:59:59.999Z`),\r\n+          }\r\n+        : undefined;\r\n+\r\n     const schedules = await prisma.classSchedule.findMany({\r\n       where: {\r\n-        ...(date && {\r\n-          date: {\r\n-            equals: new Date(date as string),\r\n-          },\r\n-        }),\r\n         ...(classId && { id: classId as string }),\r\n         ...(trainerId && { trainerId: trainerId as string }),\r\n+        ...(date && { date: dateFilter }),\r\n+        ...(clubId && { clubId: clubId as string }),\r\n       },\r\n       include: {\r\n         trainer: true,\r\n-        attendances: true,\r\n-        members: true, // Assuming a many-to-many relation\r\n+        attendances: {\r\n+          include: {\r\n+            member: true,\r\n+          },\r\n+        },\r\n+        bookings: {\r\n+          include: {\r\n+            member: true,\r\n+          },\r\n+        },\r\n       },\r\n+      orderBy: {\r\n+        date: 'asc',\r\n+      },\r\n     });\r\n \r\n     res.json(schedules);\r\n   } catch (err) {\r\n-    console.error('Attendance fetch error', err);\r\n+    console.error('Attendance fetch error:', err);\r\n     res.status(500).json({ message: 'Error fetching attendance records' });\r\n   }\r\n };\r\n \r\n@@ -60,8 +76,8 @@\n     );\r\n \r\n     res.json({ success: true, data });\r\n   } catch (err) {\r\n-    console.error('Attendance update error', err);\r\n+    console.error('Attendance update error:', err);\r\n     res.status(500).json({ message: 'Error saving attendance' });\r\n   }\r\n };\r\n"
                },
                {
                    "date": 1752486243652,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,17 +3,18 @@\n \r\n const prisma = new PrismaClient();\r\n \r\n // GET /attendance?date=&classId=&trainerId=&clubId=\r\n+// Get attendance records filtered by classId, trainerId, etc.\r\n export const getAttendanceByFilters = async (req: Request, res: Response) => {\r\n   const { date, classId, trainerId, clubId } = req.query;\r\n \r\n   try {\r\n     const dateFilter =\r\n       date\r\n         ? {\r\n-            gte: new Date(`${date}T00:00:00.000Z`),\r\n-            lt: new Date(`${date}T23:59:59.999Z`),\r\n+            gte: new Date(`${date}T00:00:00.000Z`), // Start of the day\r\n+            lt: new Date(`${date}T23:59:59.999Z`),  // End of the day\r\n           }\r\n         : undefined;\r\n \r\n     const schedules = await prisma.classSchedule.findMany({\r\n@@ -48,10 +49,11 @@\n   }\r\n };\r\n \r\n // POST /attendance\r\n+// Mark attendance for multiple records (bulk)\r\n export const markAttendance = async (req: Request, res: Response) => {\r\n-  const { records } = req.body;\r\n+  const { records } = req.body;  // Attendance records to be updated or created\r\n \r\n   try {\r\n     const data = await prisma.$transaction(\r\n       records.map((record: any) =>\r\n@@ -62,15 +64,16 @@\n               scheduleId: record.scheduleId,\r\n             },\r\n           },\r\n           update: {\r\n-            status: record.status,\r\n+            status: record.status,   // \"present\" | \"absent\"\r\n             markedAt: new Date(),\r\n           },\r\n           create: {\r\n             memberId: record.memberId,\r\n             scheduleId: record.scheduleId,\r\n             status: record.status,\r\n+            markedAt: new Date(),\r\n           },\r\n         })\r\n       )\r\n     );\r\n"
                },
                {
                    "date": 1752490243072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+// src/controllers/attendance.controller.ts\r\n import { Request, Response } from 'express';\r\n import { PrismaClient } from '@prisma/client';\r\n \r\n const prisma = new PrismaClient();\r\n"
                },
                {
                    "date": 1752494031029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,10 +3,9 @@\n import { PrismaClient } from '@prisma/client';\r\n \r\n const prisma = new PrismaClient();\r\n \r\n-// GET /attendance?date=&classId=&trainerId=&clubId=\r\n-// Get attendance records filtered by classId, trainerId, etc.\r\n+\r\n export const getAttendanceByFilters = async (req: Request, res: Response) => {\r\n   const { date, classId, trainerId, clubId } = req.query;\r\n \r\n   try {\r\n"
                },
                {
                    "date": 1752533208583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,51 +5,64 @@\n const prisma = new PrismaClient();\r\n \r\n \r\n export const getAttendanceByFilters = async (req: Request, res: Response) => {\r\n-  const { date, classId, trainerId, clubId } = req.query;\r\n+  const { clubId, startDate, endDate } = req.query;\r\n \r\n+  if (!clubId) return res.status(400).json({ error: 'Missing clubId' });\r\n+\r\n   try {\r\n-    const dateFilter =\r\n-      date\r\n-        ? {\r\n-            gte: new Date(`${date}T00:00:00.000Z`), // Start of the day\r\n-            lt: new Date(`${date}T23:59:59.999Z`),  // End of the day\r\n-          }\r\n-        : undefined;\r\n-\r\n     const schedules = await prisma.classSchedule.findMany({\r\n       where: {\r\n-        ...(classId && { id: classId as string }),\r\n-        ...(trainerId && { trainerId: trainerId as string }),\r\n-        ...(date && { date: dateFilter }),\r\n-        ...(clubId && { clubId: clubId as string }),\r\n+        clubId: String(clubId),\r\n+        date: {\r\n+          gte: startDate ? new Date(String(startDate)) : undefined,\r\n+          lte: endDate ? new Date(String(endDate)) : undefined,\r\n+        },\r\n       },\r\n       include: {\r\n-        trainer: true,\r\n         attendances: {\r\n-          include: {\r\n-            member: true,\r\n-          },\r\n+          include: { member: true },\r\n         },\r\n-        bookings: {\r\n-          include: {\r\n-            member: true,\r\n-          },\r\n-        },\r\n       },\r\n-      orderBy: {\r\n-        date: 'asc',\r\n-      },\r\n     });\r\n \r\n-    res.json(schedules);\r\n+    const attendanceMap = new Map();\r\n+\r\n+    for (const schedule of schedules) {\r\n+      for (const record of schedule.attendances) {\r\n+        const id = record.member.id;\r\n+        const key = `${id}`;\r\n+        const existing = attendanceMap.get(key) || {\r\n+          memberName: `${record.member.firstName} ${record.member.lastName}`,\r\n+          total: 0,\r\n+          noShows: 0,\r\n+          lastVisit: '',\r\n+        };\r\n+\r\n+        existing.total += 1;\r\n+        if (record.status === 'absent') {\r\n+          existing.noShows += 1;\r\n+        }\r\n+\r\n+        if (!existing.lastVisit || new Date(schedule.date) > new Date(existing.lastVisit)) {\r\n+          existing.lastVisit = schedule.date.toISOString();\r\n+        }\r\n+\r\n+        attendanceMap.set(key, existing);\r\n+      }\r\n+    }\r\n+\r\n+    const result = Array.from(attendanceMap.values());\r\n+\r\n+    res.json(result);\r\n   } catch (err) {\r\n     console.error('Attendance fetch error:', err);\r\n     res.status(500).json({ message: 'Error fetching attendance records' });\r\n   }\r\n };\r\n \r\n+\r\n // POST /attendance\r\n // Mark attendance for multiple records (bulk)\r\n export const markAttendance = async (req: Request, res: Response) => {\r\n   const { records } = req.body;  // Attendance records to be updated or created\r\n"
                }
            ],
            "date": 1752450899781,
            "name": "Commit-0",
            "content": "import { Request, Response } from 'express';\r\nimport { PrismaClient } from '@prisma/client';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n// GET /attendance?date=&classId=&trainerId=\r\nexport const getAttendanceByFilters = async (req: Request, res: Response) => {\r\n  const { date, classId, trainerId } = req.query;\r\n\r\n  try {\r\n    const schedules = await prisma.classSchedule.findMany({\r\n      where: {\r\n        ...(date && {\r\n          date: {\r\n            equals: new Date(date as string),\r\n          },\r\n        }),\r\n        ...(classId && { id: classId as string }),\r\n        ...(trainerId && { trainerId: trainerId as string }),\r\n      },\r\n      include: {\r\n        trainer: true,\r\n        attendances: true,\r\n        members: true, // Assuming a many-to-many relation\r\n      },\r\n    });\r\n\r\n    res.json(schedules);\r\n  } catch (err) {\r\n    console.error('Attendance fetch error', err);\r\n    res.status(500).json({ message: 'Error fetching attendance records' });\r\n  }\r\n};\r\n\r\n// POST /attendance\r\nexport const markAttendance = async (req: Request, res: Response) => {\r\n  const { records } = req.body;\r\n\r\n  try {\r\n    const data = await prisma.$transaction(\r\n      records.map((record: any) =>\r\n        prisma.attendance.upsert({\r\n          where: {\r\n            memberId_scheduleId: {\r\n              memberId: record.memberId,\r\n              scheduleId: record.scheduleId,\r\n            },\r\n          },\r\n          update: {\r\n            status: record.status,\r\n            markedAt: new Date(),\r\n          },\r\n          create: {\r\n            memberId: record.memberId,\r\n            scheduleId: record.scheduleId,\r\n            status: record.status,\r\n          },\r\n        })\r\n      )\r\n    );\r\n\r\n    res.json({ success: true, data });\r\n  } catch (err) {\r\n    console.error('Attendance update error', err);\r\n    res.status(500).json({ message: 'Error saving attendance' });\r\n  }\r\n};\r\n"
        }
    ]
}