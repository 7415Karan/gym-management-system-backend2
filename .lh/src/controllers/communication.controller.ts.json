{
    "sourceFile": "src/controllers/communication.controller.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1752859356773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752860722944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,18 +5,30 @@\n \r\n export const getTrainerMessages = async (req: Request, res: Response) => {\r\n   const { trainerId } = req.query;\r\n \r\n-  if (!trainerId) return res.status(400).json({ error: 'Missing trainerId' });\r\n+  if (!trainerId) {\r\n+    return res.status(400).json({ error: 'Missing trainerId' });\r\n+  }\r\n \r\n   try {\r\n     const messages = await prisma.communication.findMany({\r\n-      where: { trainerId: trainerId as string },\r\n-      orderBy: { timestamp: 'desc' },\r\n+      where: {\r\n+        member: {\r\n+          trainerId: trainerId as string\r\n+        }\r\n+      },\r\n+      orderBy: { createdAt: 'desc' },\r\n+      include: {\r\n+        member: {\r\n+          select: { firstName: true, lastName: true, id: true }\r\n+        }\r\n+      }\r\n     });\r\n+\r\n     res.json(messages);\r\n   } catch (err) {\r\n-    console.error('Error fetching messages:', err);\r\n+    console.error('Error fetching trainer messages:', err);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n };\r\n \r\n"
                },
                {
                    "date": 1752895080282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,4 +59,19 @@\n     console.error('Error sending message:', err);\r\n     res.status(500).json({ error: 'Failed to send message' });\r\n   }\r\n };\r\n+// In member.routes.ts\r\n+\r\n+\r\n+// In member.controller.ts or similar:\r\n+export const getMembers = async (req: Request, res: Response) => {\r\n+  const { trainerId } = req.query;\r\n+\r\n+  const members = await prisma.member.findMany({\r\n+    where: {\r\n+      ...(trainerId ? { trainerId: String(trainerId) } : {}),\r\n+    },\r\n+  });\r\n+\r\n+  res.json(members);\r\n+};\r\n"
                },
                {
                    "date": 1752896379671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,76 +2,5 @@\n import { PrismaClient } from '@prisma/client';\r\n \r\n const prisma = new PrismaClient();\r\n \r\n-export const getTrainerMessages = async (req: Request, res: Response) => {\r\n-  const { trainerId } = req.query;\r\n \r\n-  if (!trainerId) {\r\n-    return res.status(400).json({ error: 'Missing trainerId' });\r\n-  }\r\n-\r\n-  try {\r\n-    const messages = await prisma.communication.findMany({\r\n-      where: {\r\n-        member: {\r\n-          trainerId: trainerId as string\r\n-        }\r\n-      },\r\n-      orderBy: { createdAt: 'desc' },\r\n-      include: {\r\n-        member: {\r\n-          select: { firstName: true, lastName: true, id: true }\r\n-        }\r\n-      }\r\n-    });\r\n-\r\n-    res.json(messages);\r\n-  } catch (err) {\r\n-    console.error('Error fetching trainer messages:', err);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-};\r\n-\r\n-export const sendMessage = async (req: Request, res: Response) => {\r\n-  const { memberId, messageType, subject, body } = req.body;\r\n-\r\n-  if (!memberId || !messageType || !body) {\r\n-    return res.status(400).json({ error: 'Missing required fields' });\r\n-  }\r\n-\r\n-  try {\r\n-    const newMessage = await prisma.communication.create({\r\n-      data: {\r\n-        memberId,\r\n-        trainerId: req.user?.id, // assuming middleware injects authenticated user\r\n-        messageType,\r\n-        subject,\r\n-        body,\r\n-        sender: 'trainer',\r\n-        timestamp: new Date(),\r\n-      },\r\n-    });\r\n-\r\n-    // TODO: Add integration with SendGrid or Twilio if messageType === 'email' or 'sms'\r\n-\r\n-    res.json(newMessage);\r\n-  } catch (err) {\r\n-    console.error('Error sending message:', err);\r\n-    res.status(500).json({ error: 'Failed to send message' });\r\n-  }\r\n-};\r\n-// In member.routes.ts\r\n-\r\n-\r\n-// In member.controller.ts or similar:\r\n-export const getMembers = async (req: Request, res: Response) => {\r\n-  const { trainerId } = req.query;\r\n-\r\n-  const members = await prisma.member.findMany({\r\n-    where: {\r\n-      ...(trainerId ? { trainerId: String(trainerId) } : {}),\r\n-    },\r\n-  });\r\n-\r\n-  res.json(members);\r\n-};\r\n"
                }
            ],
            "date": 1752859356773,
            "name": "Commit-0",
            "content": "import { Request, Response } from 'express';\r\nimport { PrismaClient } from '@prisma/client';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nexport const getTrainerMessages = async (req: Request, res: Response) => {\r\n  const { trainerId } = req.query;\r\n\r\n  if (!trainerId) return res.status(400).json({ error: 'Missing trainerId' });\r\n\r\n  try {\r\n    const messages = await prisma.communication.findMany({\r\n      where: { trainerId: trainerId as string },\r\n      orderBy: { timestamp: 'desc' },\r\n    });\r\n    res.json(messages);\r\n  } catch (err) {\r\n    console.error('Error fetching messages:', err);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n};\r\n\r\nexport const sendMessage = async (req: Request, res: Response) => {\r\n  const { memberId, messageType, subject, body } = req.body;\r\n\r\n  if (!memberId || !messageType || !body) {\r\n    return res.status(400).json({ error: 'Missing required fields' });\r\n  }\r\n\r\n  try {\r\n    const newMessage = await prisma.communication.create({\r\n      data: {\r\n        memberId,\r\n        trainerId: req.user?.id, // assuming middleware injects authenticated user\r\n        messageType,\r\n        subject,\r\n        body,\r\n        sender: 'trainer',\r\n        timestamp: new Date(),\r\n      },\r\n    });\r\n\r\n    // TODO: Add integration with SendGrid or Twilio if messageType === 'email' or 'sms'\r\n\r\n    res.json(newMessage);\r\n  } catch (err) {\r\n    console.error('Error sending message:', err);\r\n    res.status(500).json({ error: 'Failed to send message' });\r\n  }\r\n};\r\n"
        }
    ]
}