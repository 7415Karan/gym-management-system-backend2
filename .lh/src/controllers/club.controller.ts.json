{
    "sourceFile": "src/controllers/club.controller.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1752572545808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752575062404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,4 +29,16 @@\n   const { id } = req.params;\r\n   await prisma.club.delete({ where: { id } });\r\n   res.status(204).send();\r\n };\r\n+\r\n+export const getClubById = async (req: Request, res: Response) => {\r\n+  const { id } = req.params;\r\n+\r\n+  const club = await prisma.club.findUnique({\r\n+    where: { id },\r\n+  });\r\n+\r\n+  if (!club) return res.status(404).json({ error: 'Club not found' });\r\n+\r\n+  res.json(club);\r\n+};\r\n"
                },
                {
                    "date": 1752575378766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,10 +35,17 @@\n   const { id } = req.params;\r\n \r\n   const club = await prisma.club.findUnique({\r\n     where: { id },\r\n+    include: {\r\n+    users: {\r\n+      where: { role: 'franchise_admin' },\r\n+      select: { id: true, email: true, name: true },\r\n+    },\r\n+  },\r\n   });\r\n \r\n   if (!club) return res.status(404).json({ error: 'Club not found' });\r\n \r\n   res.json(club);\r\n };\r\n+\r\n"
                },
                {
                    "date": 1752575749193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,19 +33,25 @@\n \r\n export const getClubById = async (req: Request, res: Response) => {\r\n   const { id } = req.params;\r\n \r\n-  const club = await prisma.club.findUnique({\r\n-    where: { id },\r\n-    include: {\r\n-    users: {\r\n-      where: { role: 'franchise_admin' },\r\n-      select: { id: true, email: true, name: true },\r\n-    },\r\n-  },\r\n-  });\r\n+  try {\r\n+    const club = await prisma.club.findUnique({\r\n+      where: { id },\r\n+      include: {\r\n+        users: {\r\n+          where: { role: 'franchise_admin' },\r\n+          select: { id: true, email: true, name: true },\r\n+        },\r\n+      },\r\n+    });\r\n \r\n-  if (!club) return res.status(404).json({ error: 'Club not found' });\r\n+    if (!club) return res.status(404).json({ error: 'Club not found' });\r\n \r\n-  res.json(club);\r\n+    res.json(club);\r\n+  } catch (error) {\r\n+    console.error('getClubById error:', error);\r\n+    res.status(500).json({ error: 'Internal Server Error' });\r\n+  }\r\n };\r\n \r\n+\r\n"
                },
                {
                    "date": 1752577484919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,74 @@\n+import { Request, Response } from 'express';\r\n+import { createNewMember } from '../services/member.service';\r\n+import prisma from '../lib/prisma';\r\n+\r\n+export const getAllClubs = async (req: Request, res: Response) => {\r\n+  const clubs = await prisma.club.findMany();\r\n+  res.json(clubs);\r\n+};\r\n+\r\n+export const createClub = async (req: Request, res: Response) => {\r\n+  const { name, location, timezone, clubEmail } = req.body;\r\n+  const newClub = await prisma.club.create({\r\n+    data: { name, location, timezone, clubEmail },\r\n+  });\r\n+  res.json(newClub);\r\n+};\r\n+\r\n+export const updateClub = async (req: Request, res: Response) => {\r\n+  const { id } = req.params;\r\n+  const { name, location, timezone, clubEmail } = req.body;\r\n+  const updated = await prisma.club.update({\r\n+    where: { id },\r\n+    data: { name, location, timezone, clubEmail },\r\n+  });\r\n+  res.json(updated);\r\n+};\r\n+\r\n+export const deleteClub = async (req: Request, res: Response) => {\r\n+  const { id } = req.params;\r\n+  await prisma.club.delete({ where: { id } });\r\n+  res.status(204).send();\r\n+};\r\n+\r\n+export const getClubById = async (req: Request, res: Response) => {\r\n+  const { id } = req.params;\r\n+\r\n+  try {\r\n+    const club = await prisma.club.findUnique({\r\n+      where: { id },\r\n+      include: {\r\n+        users: {\r\n+          where: { role: 'franchise_admin' },\r\n+          select: { id: true, email: true, name: true },\r\n+        },\r\n+      },\r\n+    });\r\n+\r\n+    if (!club) return res.status(404).json({ error: 'Club not found' });\r\n+\r\n+    res.json(club);\r\n+  } catch (error) {\r\n+    console.error('getClubById error:', error);\r\n+    res.status(500).json({ error: 'Internal Server Error' });\r\n+  }\r\n+};\r\n+\r\n+export const assignClubToUser = async (req: Request, res: Response) => {\r\n+  const { id } = req.params;\r\n+  const { clubId } = req.body;\r\n+\r\n+  try {\r\n+    const updatedUser = await prisma.user.update({\r\n+      where: { id },\r\n+      data: { clubId },\r\n+    });\r\n+\r\n+    res.json(updatedUser);\r\n+  } catch (err) {\r\n+    console.error('Error assigning club to user:', err);\r\n+    res.status(500).json({ error: 'Failed to assign club to user' });\r\n+  }\r\n+};\r\n+\r\n+\r\n"
                },
                {
                    "date": 1752577878548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,79 +53,38 @@\n     res.status(500).json({ error: 'Internal Server Error' });\r\n   }\r\n };\r\n \r\n-export const assignClubToUser = async (req: Request, res: Response) => {\r\n+\r\n+export const getMembersByClub = async (req: Request, res: Response) => {\r\n   const { id } = req.params;\r\n-  const { clubId } = req.body;\r\n \r\n   try {\r\n-    const updatedUser = await prisma.user.update({\r\n-      where: { id },\r\n-      data: { clubId },\r\n+    const members = await prisma.member.findMany({\r\n+      where: { clubId: id },\r\n+      select: {\r\n+        id: true,\r\n+        firstName: true,\r\n+        lastName: true,\r\n+        email: true,\r\n+        phone: true,\r\n+        createdAt: true,\r\n+        membership: {\r\n+          select: {\r\n+            plan: true,\r\n+            startDate: true,\r\n+            endDate: true,\r\n+          },\r\n+        },\r\n+      },\r\n     });\r\n \r\n-    res.json(updatedUser);\r\n+    res.json(members);\r\n   } catch (err) {\r\n-    console.error('Error assigning club to user:', err);\r\n-    res.status(500).json({ error: 'Failed to assign club to user' });\r\n+    console.error('Error fetching members:', err);\r\n+    res.status(500).json({ error: 'Failed to fetch members' });\r\n   }\r\n };\r\n \r\n \r\n-import { Request, Response } from 'express';\r\n-import { createNewMember } from '../services/member.service';\r\n-import prisma from '../lib/prisma';\r\n \r\n-export const getAllClubs = async (req: Request, res: Response) => {\r\n-  const clubs = await prisma.club.findMany();\r\n-  res.json(clubs);\r\n-};\r\n \r\n-export const createClub = async (req: Request, res: Response) => {\r\n-  const { name, location, timezone, clubEmail } = req.body;\r\n-  const newClub = await prisma.club.create({\r\n-    data: { name, location, timezone, clubEmail },\r\n-  });\r\n-  res.json(newClub);\r\n-};\r\n-\r\n-export const updateClub = async (req: Request, res: Response) => {\r\n-  const { id } = req.params;\r\n-  const { name, location, timezone, clubEmail } = req.body;\r\n-  const updated = await prisma.club.update({\r\n-    where: { id },\r\n-    data: { name, location, timezone, clubEmail },\r\n-  });\r\n-  res.json(updated);\r\n-};\r\n-\r\n-export const deleteClub = async (req: Request, res: Response) => {\r\n-  const { id } = req.params;\r\n-  await prisma.club.delete({ where: { id } });\r\n-  res.status(204).send();\r\n-};\r\n-\r\n-export const getClubById = async (req: Request, res: Response) => {\r\n-  const { id } = req.params;\r\n-\r\n-  try {\r\n-    const club = await prisma.club.findUnique({\r\n-      where: { id },\r\n-      include: {\r\n-        users: {\r\n-          where: { role: 'franchise_admin' },\r\n-          select: { id: true, email: true, name: true },\r\n-        },\r\n-      },\r\n-    });\r\n-\r\n-    if (!club) return res.status(404).json({ error: 'Club not found' });\r\n-\r\n-    res.json(club);\r\n-  } catch (error) {\r\n-    console.error('getClubById error:', error);\r\n-    res.status(500).json({ error: 'Internal Server Error' });\r\n-  }\r\n-};\r\n-\r\n-\r\n"
                },
                {
                    "date": 1752578353063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n         phone: true,\r\n         createdAt: true,\r\n         membership: {\r\n           select: {\r\n-            plan: true,\r\n+            planName: true,\r\n             startDate: true,\r\n             endDate: true,\r\n           },\r\n         },\r\n"
                },
                {
                    "date": 1752578785730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,7 +84,30 @@\n     res.status(500).json({ error: 'Failed to fetch members' });\r\n   }\r\n };\r\n \r\n+export const getClubTrainers = async (req: Request, res: Response) => {\r\n+  const { id } = req.params;\r\n \r\n+  try {\r\n+    const trainers = await prisma.trainer.findMany({\r\n+      where: { clubId: id },\r\n+      select: {\r\n+        id: true,\r\n+        name: true,\r\n+        email: true,\r\n+        phone: true,\r\n+        specialization: true,\r\n+      },\r\n+    });\r\n \r\n+    res.json(trainers);\r\n+  } catch (err) {\r\n+    console.error('Failed to fetch trainers:', err);\r\n+    res.status(500).json({ error: 'Failed to fetch trainers' });\r\n+  }\r\n+};\r\n \r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1752580142452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,138 @@\n+import { Request, Response } from 'express';\r\n+import { createNewMember } from '../services/member.service';\r\n+import prisma from '../lib/prisma';\r\n+\r\n+export const getAllClubs = async (req: Request, res: Response) => {\r\n+  const clubs = await prisma.club.findMany();\r\n+  res.json(clubs);\r\n+};\r\n+\r\n+export const createClub = async (req: Request, res: Response) => {\r\n+  const { name, location, timezone, clubEmail } = req.body;\r\n+  const newClub = await prisma.club.create({\r\n+    data: { name, location, timezone, clubEmail },\r\n+  });\r\n+  res.json(newClub);\r\n+};\r\n+\r\n+export const updateClub = async (req: Request, res: Response) => {\r\n+  const { id } = req.params;\r\n+  const { name, location, timezone, clubEmail } = req.body;\r\n+  const updated = await prisma.club.update({\r\n+    where: { id },\r\n+    data: { name, location, timezone, clubEmail },\r\n+  });\r\n+  res.json(updated);\r\n+};\r\n+\r\n+export const deleteClub = async (req: Request, res: Response) => {\r\n+  const { id } = req.params;\r\n+  await prisma.club.delete({ where: { id } });\r\n+  res.status(204).send();\r\n+};\r\n+\r\n+export const getClubById = async (req: Request, res: Response) => {\r\n+  const { id } = req.params;\r\n+\r\n+  try {\r\n+    const club = await prisma.club.findUnique({\r\n+      where: { id },\r\n+      include: {\r\n+        users: {\r\n+          where: { role: 'franchise_admin' },\r\n+          select: { id: true, email: true, name: true },\r\n+        },\r\n+      },\r\n+    });\r\n+\r\n+    if (!club) return res.status(404).json({ error: 'Club not found' });\r\n+\r\n+    res.json(club);\r\n+  } catch (error) {\r\n+    console.error('getClubById error:', error);\r\n+    res.status(500).json({ error: 'Internal Server Error' });\r\n+  }\r\n+};\r\n+\r\n+\r\n+export const getMembersByClub = async (req: Request, res: Response) => {\r\n+  const { id } = req.params;\r\n+\r\n+  try {\r\n+    const members = await prisma.member.findMany({\r\n+      where: { clubId: id },\r\n+      select: {\r\n+        id: true,\r\n+        firstName: true,\r\n+        lastName: true,\r\n+        email: true,\r\n+        phone: true,\r\n+        createdAt: true,\r\n+        membership: {\r\n+          select: {\r\n+            planName: true,\r\n+            startDate: true,\r\n+            endDate: true,\r\n+          },\r\n+        },\r\n+      },\r\n+    });\r\n+\r\n+    res.json(members);\r\n+  } catch (err) {\r\n+    console.error('Error fetching members:', err);\r\n+    res.status(500).json({ error: 'Failed to fetch members' });\r\n+  }\r\n+};\r\n+\r\n+export const getClubTrainers = async (req: Request, res: Response) => {\r\n+  const { id } = req.params;\r\n+\r\n+  try {\r\n+    const trainers = await prisma.trainer.findMany({\r\n+      where: { clubId: id },\r\n+      select: {\r\n+        id: true,\r\n+        name: true,\r\n+        email: true,\r\n+        phone: true,\r\n+        specialization: true,\r\n+      },\r\n+    });\r\n+\r\n+    res.json(trainers);\r\n+  } catch (err) {\r\n+    console.error('Failed to fetch trainers:', err);\r\n+    res.status(500).json({ error: 'Failed to fetch trainers' });\r\n+  }\r\n+};\r\n+\r\n+export const getClubSchedules = async (req: Request, res: Response) => {\r\n+  const { id } = req.params;\r\n+\r\n+  try {\r\n+    const schedules = await prisma.classSchedule.findMany({\r\n+      where: { clubId: id },\r\n+      include: {\r\n+        trainer: {\r\n+          select: { name: true, email: true }\r\n+        },\r\n+        location: {\r\n+          select: { name: true }\r\n+        }\r\n+      },\r\n+      orderBy: { date: 'asc' },\r\n+    });\r\n+\r\n+    res.json(schedules);\r\n+  } catch (err) {\r\n+    console.error('Error fetching schedules:', err);\r\n+    res.status(500).json({ error: 'Failed to fetch schedules' });\r\n+  }\r\n+};\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1752585557930,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,122 +130,30 @@\n     res.status(500).json({ error: 'Failed to fetch schedules' });\r\n   }\r\n };\r\n \r\n-\r\n-\r\n-\r\n-\r\n-\r\n-import { Request, Response } from 'express';\r\n-import { createNewMember } from '../services/member.service';\r\n-import prisma from '../lib/prisma';\r\n-\r\n-export const getAllClubs = async (req: Request, res: Response) => {\r\n-  const clubs = await prisma.club.findMany();\r\n-  res.json(clubs);\r\n-};\r\n-\r\n-export const createClub = async (req: Request, res: Response) => {\r\n-  const { name, location, timezone, clubEmail } = req.body;\r\n-  const newClub = await prisma.club.create({\r\n-    data: { name, location, timezone, clubEmail },\r\n-  });\r\n-  res.json(newClub);\r\n-};\r\n-\r\n-export const updateClub = async (req: Request, res: Response) => {\r\n-  const { id } = req.params;\r\n-  const { name, location, timezone, clubEmail } = req.body;\r\n-  const updated = await prisma.club.update({\r\n-    where: { id },\r\n-    data: { name, location, timezone, clubEmail },\r\n-  });\r\n-  res.json(updated);\r\n-};\r\n-\r\n-export const deleteClub = async (req: Request, res: Response) => {\r\n-  const { id } = req.params;\r\n-  await prisma.club.delete({ where: { id } });\r\n-  res.status(204).send();\r\n-};\r\n-\r\n-export const getClubById = async (req: Request, res: Response) => {\r\n-  const { id } = req.params;\r\n-\r\n+export const getClubInvoices = async (req: Request, res: Response) => {\r\n+  const { id } = req.params; // clubId\r\n   try {\r\n-    const club = await prisma.club.findUnique({\r\n-      where: { id },\r\n+    const invoices = await prisma.invoice.findMany({\r\n+      where: { clubId: id },\r\n       include: {\r\n-        users: {\r\n-          where: { role: 'franchise_admin' },\r\n-          select: { id: true, email: true, name: true },\r\n+        member: {\r\n+          select: { firstName: true, lastName: true },\r\n         },\r\n       },\r\n+      orderBy: { issuedAt: 'desc' },\r\n     });\r\n \r\n-    if (!club) return res.status(404).json({ error: 'Club not found' });\r\n-\r\n-    res.json(club);\r\n-  } catch (error) {\r\n-    console.error('getClubById error:', error);\r\n-    res.status(500).json({ error: 'Internal Server Error' });\r\n-  }\r\n-};\r\n-\r\n-\r\n-export const getMembersByClub = async (req: Request, res: Response) => {\r\n-  const { id } = req.params;\r\n-\r\n-  try {\r\n-    const members = await prisma.member.findMany({\r\n-      where: { clubId: id },\r\n-      select: {\r\n-        id: true,\r\n-        firstName: true,\r\n-        lastName: true,\r\n-        email: true,\r\n-        phone: true,\r\n-        createdAt: true,\r\n-        membership: {\r\n-          select: {\r\n-            planName: true,\r\n-            startDate: true,\r\n-            endDate: true,\r\n-          },\r\n-        },\r\n-      },\r\n-    });\r\n-\r\n-    res.json(members);\r\n+    res.json(invoices);\r\n   } catch (err) {\r\n-    console.error('Error fetching members:', err);\r\n-    res.status(500).json({ error: 'Failed to fetch members' });\r\n+    console.error('Fetch invoices error:', err);\r\n+    res.status(500).json({ error: 'Failed to fetch invoices' });\r\n   }\r\n };\r\n \r\n-export const getClubTrainers = async (req: Request, res: Response) => {\r\n-  const { id } = req.params;\r\n \r\n-  try {\r\n-    const trainers = await prisma.trainer.findMany({\r\n-      where: { clubId: id },\r\n-      select: {\r\n-        id: true,\r\n-        name: true,\r\n-        email: true,\r\n-        phone: true,\r\n-        specialization: true,\r\n-      },\r\n-    });\r\n \r\n-    res.json(trainers);\r\n-  } catch (err) {\r\n-    console.error('Failed to fetch trainers:', err);\r\n-    res.status(500).json({ error: 'Failed to fetch trainers' });\r\n-  }\r\n-};\r\n \r\n \r\n \r\n \r\n-\r\n"
                },
                {
                    "date": 1752586067332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,177 @@\n+import { Request, Response } from 'express';\r\n+import { createNewMember } from '../services/member.service';\r\n+import prisma from '../lib/prisma';\r\n+\r\n+export const getAllClubs = async (req: Request, res: Response) => {\r\n+  const clubs = await prisma.club.findMany();\r\n+  res.json(clubs);\r\n+};\r\n+\r\n+export const createClub = async (req: Request, res: Response) => {\r\n+  const { name, location, timezone, clubEmail } = req.body;\r\n+  const newClub = await prisma.club.create({\r\n+    data: { name, location, timezone, clubEmail },\r\n+  });\r\n+  res.json(newClub);\r\n+};\r\n+\r\n+export const updateClub = async (req: Request, res: Response) => {\r\n+  const { id } = req.params;\r\n+  const { name, location, timezone, clubEmail } = req.body;\r\n+  const updated = await prisma.club.update({\r\n+    where: { id },\r\n+    data: { name, location, timezone, clubEmail },\r\n+  });\r\n+  res.json(updated);\r\n+};\r\n+\r\n+export const deleteClub = async (req: Request, res: Response) => {\r\n+  const { id } = req.params;\r\n+  await prisma.club.delete({ where: { id } });\r\n+  res.status(204).send();\r\n+};\r\n+\r\n+export const getClubById = async (req: Request, res: Response) => {\r\n+  const { id } = req.params;\r\n+\r\n+  try {\r\n+    const club = await prisma.club.findUnique({\r\n+      where: { id },\r\n+      include: {\r\n+        users: {\r\n+          where: { role: 'franchise_admin' },\r\n+          select: { id: true, email: true, name: true },\r\n+        },\r\n+      },\r\n+    });\r\n+\r\n+    if (!club) return res.status(404).json({ error: 'Club not found' });\r\n+\r\n+    res.json(club);\r\n+  } catch (error) {\r\n+    console.error('getClubById error:', error);\r\n+    res.status(500).json({ error: 'Internal Server Error' });\r\n+  }\r\n+};\r\n+\r\n+\r\n+export const getMembersByClub = async (req: Request, res: Response) => {\r\n+  const { id } = req.params;\r\n+\r\n+  try {\r\n+    const members = await prisma.member.findMany({\r\n+      where: { clubId: id },\r\n+      select: {\r\n+        id: true,\r\n+        firstName: true,\r\n+        lastName: true,\r\n+        email: true,\r\n+        phone: true,\r\n+        createdAt: true,\r\n+        membership: {\r\n+          select: {\r\n+            planName: true,\r\n+            startDate: true,\r\n+            endDate: true,\r\n+          },\r\n+        },\r\n+      },\r\n+    });\r\n+\r\n+    res.json(members);\r\n+  } catch (err) {\r\n+    console.error('Error fetching members:', err);\r\n+    res.status(500).json({ error: 'Failed to fetch members' });\r\n+  }\r\n+};\r\n+\r\n+export const getClubTrainers = async (req: Request, res: Response) => {\r\n+  const { id } = req.params;\r\n+\r\n+  try {\r\n+    const trainers = await prisma.trainer.findMany({\r\n+      where: { clubId: id },\r\n+      select: {\r\n+        id: true,\r\n+        name: true,\r\n+        email: true,\r\n+        phone: true,\r\n+        specialization: true,\r\n+      },\r\n+    });\r\n+\r\n+    res.json(trainers);\r\n+  } catch (err) {\r\n+    console.error('Failed to fetch trainers:', err);\r\n+    res.status(500).json({ error: 'Failed to fetch trainers' });\r\n+  }\r\n+};\r\n+\r\n+export const getClubSchedules = async (req: Request, res: Response) => {\r\n+  const { id } = req.params;\r\n+\r\n+  try {\r\n+    const schedules = await prisma.classSchedule.findMany({\r\n+      where: { clubId: id },\r\n+      include: {\r\n+        trainer: {\r\n+          select: { name: true, email: true }\r\n+        },\r\n+        location: {\r\n+          select: { name: true }\r\n+        }\r\n+      },\r\n+      orderBy: { date: 'asc' },\r\n+    });\r\n+\r\n+    res.json(schedules);\r\n+  } catch (err) {\r\n+    console.error('Error fetching schedules:', err);\r\n+    res.status(500).json({ error: 'Failed to fetch schedules' });\r\n+  }\r\n+};\r\n+\r\n+export const getClubInvoices = async (req: Request, res: Response) => {\r\n+  const { id } = req.params; // clubId\r\n+  try {\r\n+    const invoices = await prisma.invoice.findMany({\r\n+      where: { clubId: id },\r\n+      include: {\r\n+        member: {\r\n+          select: { firstName: true, lastName: true },\r\n+        },\r\n+      },\r\n+      orderBy: { issuedAt: 'desc' },\r\n+    });\r\n+\r\n+    res.json(invoices);\r\n+  } catch (err) {\r\n+    console.error('Fetch invoices error:', err);\r\n+    res.status(500).json({ error: 'Failed to fetch invoices' });\r\n+  }\r\n+};\r\n+\r\n+export const suspendClub = async (req: Request, res: Response) => {\r\n+  const { id } = req.params;\r\n+  const club = await prisma.club.update({\r\n+    where: { id },\r\n+    data: { status: 'suspended' },\r\n+  });\r\n+  res.json(club);\r\n+};\r\n+\r\n+export const activateClub = async (req: Request, res: Response) => {\r\n+  const { id } = req.params;\r\n+  const club = await prisma.club.update({\r\n+    where: { id },\r\n+    data: { status: 'active' },\r\n+  });\r\n+  res.json(club);\r\n+};\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1753038868094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,20 @@\n import { createNewMember } from '../services/member.service';\r\n import prisma from '../lib/prisma';\r\n \r\n export const getAllClubs = async (req: Request, res: Response) => {\r\n-  const clubs = await prisma.club.findMany();\r\n+  const clubs = await prisma.club.findMany({\r\n+      include: {\r\n+        admin: { // Include the related User (admin) object\r\n+          select: { // Select specific fields you need from the admin\r\n+            id: true,\r\n+            email: true,\r\n+            name: true, // Assuming your User model has a 'name' field\r\n+          },\r\n+        },\r\n+      },\r\n+      // You might also have where clauses, orderBy, etc. here\r\n+    });\r\n   res.json(clubs);\r\n };\r\n \r\n export const createClub = async (req: Request, res: Response) => {\r\n@@ -174,163 +185,4 @@\n \r\n \r\n \r\n \r\n-import { Request, Response } from 'express';\r\n-import { createNewMember } from '../services/member.service';\r\n-import prisma from '../lib/prisma';\r\n-\r\n-export const getAllClubs = async (req: Request, res: Response) => {\r\n-  const clubs = await prisma.club.findMany();\r\n-  res.json(clubs);\r\n-};\r\n-\r\n-export const createClub = async (req: Request, res: Response) => {\r\n-  const { name, location, timezone, clubEmail } = req.body;\r\n-  const newClub = await prisma.club.create({\r\n-    data: { name, location, timezone, clubEmail },\r\n-  });\r\n-  res.json(newClub);\r\n-};\r\n-\r\n-export const updateClub = async (req: Request, res: Response) => {\r\n-  const { id } = req.params;\r\n-  const { name, location, timezone, clubEmail } = req.body;\r\n-  const updated = await prisma.club.update({\r\n-    where: { id },\r\n-    data: { name, location, timezone, clubEmail },\r\n-  });\r\n-  res.json(updated);\r\n-};\r\n-\r\n-export const deleteClub = async (req: Request, res: Response) => {\r\n-  const { id } = req.params;\r\n-  await prisma.club.delete({ where: { id } });\r\n-  res.status(204).send();\r\n-};\r\n-\r\n-export const getClubById = async (req: Request, res: Response) => {\r\n-  const { id } = req.params;\r\n-\r\n-  try {\r\n-    const club = await prisma.club.findUnique({\r\n-      where: { id },\r\n-      include: {\r\n-        users: {\r\n-          where: { role: 'franchise_admin' },\r\n-          select: { id: true, email: true, name: true },\r\n-        },\r\n-      },\r\n-    });\r\n-\r\n-    if (!club) return res.status(404).json({ error: 'Club not found' });\r\n-\r\n-    res.json(club);\r\n-  } catch (error) {\r\n-    console.error('getClubById error:', error);\r\n-    res.status(500).json({ error: 'Internal Server Error' });\r\n-  }\r\n-};\r\n-\r\n-\r\n-export const getMembersByClub = async (req: Request, res: Response) => {\r\n-  const { id } = req.params;\r\n-\r\n-  try {\r\n-    const members = await prisma.member.findMany({\r\n-      where: { clubId: id },\r\n-      select: {\r\n-        id: true,\r\n-        firstName: true,\r\n-        lastName: true,\r\n-        email: true,\r\n-        phone: true,\r\n-        createdAt: true,\r\n-        membership: {\r\n-          select: {\r\n-            planName: true,\r\n-            startDate: true,\r\n-            endDate: true,\r\n-          },\r\n-        },\r\n-      },\r\n-    });\r\n-\r\n-    res.json(members);\r\n-  } catch (err) {\r\n-    console.error('Error fetching members:', err);\r\n-    res.status(500).json({ error: 'Failed to fetch members' });\r\n-  }\r\n-};\r\n-\r\n-export const getClubTrainers = async (req: Request, res: Response) => {\r\n-  const { id } = req.params;\r\n-\r\n-  try {\r\n-    const trainers = await prisma.trainer.findMany({\r\n-      where: { clubId: id },\r\n-      select: {\r\n-        id: true,\r\n-        name: true,\r\n-        email: true,\r\n-        phone: true,\r\n-        specialization: true,\r\n-      },\r\n-    });\r\n-\r\n-    res.json(trainers);\r\n-  } catch (err) {\r\n-    console.error('Failed to fetch trainers:', err);\r\n-    res.status(500).json({ error: 'Failed to fetch trainers' });\r\n-  }\r\n-};\r\n-\r\n-export const getClubSchedules = async (req: Request, res: Response) => {\r\n-  const { id } = req.params;\r\n-\r\n-  try {\r\n-    const schedules = await prisma.classSchedule.findMany({\r\n-      where: { clubId: id },\r\n-      include: {\r\n-        trainer: {\r\n-          select: { name: true, email: true }\r\n-        },\r\n-        location: {\r\n-          select: { name: true }\r\n-        }\r\n-      },\r\n-      orderBy: { date: 'asc' },\r\n-    });\r\n-\r\n-    res.json(schedules);\r\n-  } catch (err) {\r\n-    console.error('Error fetching schedules:', err);\r\n-    res.status(500).json({ error: 'Failed to fetch schedules' });\r\n-  }\r\n-};\r\n-\r\n-export const getClubInvoices = async (req: Request, res: Response) => {\r\n-  const { id } = req.params; // clubId\r\n-  try {\r\n-    const invoices = await prisma.invoice.findMany({\r\n-      where: { clubId: id },\r\n-      include: {\r\n-        member: {\r\n-          select: { firstName: true, lastName: true },\r\n-        },\r\n-      },\r\n-      orderBy: { issuedAt: 'desc' },\r\n-    });\r\n-\r\n-    res.json(invoices);\r\n-  } catch (err) {\r\n-    console.error('Fetch invoices error:', err);\r\n-    res.status(500).json({ error: 'Failed to fetch invoices' });\r\n-  }\r\n-};\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n"
                },
                {
                    "date": 1753038904443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,20 +2,9 @@\n import { createNewMember } from '../services/member.service';\r\n import prisma from '../lib/prisma';\r\n \r\n export const getAllClubs = async (req: Request, res: Response) => {\r\n-  const clubs = await prisma.club.findMany({\r\n-      include: {\r\n-        admin: { // Include the related User (admin) object\r\n-          select: { // Select specific fields you need from the admin\r\n-            id: true,\r\n-            email: true,\r\n-            name: true, // Assuming your User model has a 'name' field\r\n-          },\r\n-        },\r\n-      },\r\n-      // You might also have where clauses, orderBy, etc. here\r\n-    });\r\n+  const clubs = await prisma.club.findMany();\r\n   res.json(clubs);\r\n };\r\n \r\n export const createClub = async (req: Request, res: Response) => {\r\n"
                },
                {
                    "date": 1753039183329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,29 @@\n import { Request, Response } from 'express';\r\n import { createNewMember } from '../services/member.service';\r\n import prisma from '../lib/prisma';\r\n \r\n+// export const getAllClubs = async (req: Request, res: Response) => {\r\n+//   const clubs = await prisma.club.findMany();\r\n+//   res.json(clubs);\r\n+// };\r\n+\r\n export const getAllClubs = async (req: Request, res: Response) => {\r\n-  const clubs = await prisma.club.findMany();\r\n-  res.json(clubs);\r\n+  try {\r\n+    const clubs = await prisma.club.findMany({\r\n+      include: {\r\n+        admin: { select: { email: true, id: true } },\r\n+      },\r\n+    });\r\n+\r\n+    res.json(clubs);\r\n+  } catch (err) {\r\n+    console.error('Get clubs error:', err);\r\n+    res.status(500).json({ error: 'Failed to fetch clubs' });\r\n+  }\r\n };\r\n \r\n+\r\n export const createClub = async (req: Request, res: Response) => {\r\n   const { name, location, timezone, clubEmail } = req.body;\r\n   const newClub = await prisma.club.create({\r\n     data: { name, location, timezone, clubEmail },\r\n"
                },
                {
                    "date": 1753039242059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,29 +1,15 @@\n import { Request, Response } from 'express';\r\n import { createNewMember } from '../services/member.service';\r\n import prisma from '../lib/prisma';\r\n \r\n-// export const getAllClubs = async (req: Request, res: Response) => {\r\n-//   const clubs = await prisma.club.findMany();\r\n-//   res.json(clubs);\r\n-// };\r\n-\r\n export const getAllClubs = async (req: Request, res: Response) => {\r\n-  try {\r\n-    const clubs = await prisma.club.findMany({\r\n-      include: {\r\n-        admin: { select: { email: true, id: true } },\r\n-      },\r\n-    });\r\n-\r\n-    res.json(clubs);\r\n-  } catch (err) {\r\n-    console.error('Get clubs error:', err);\r\n-    res.status(500).json({ error: 'Failed to fetch clubs' });\r\n-  }\r\n+  const clubs = await prisma.club.findMany();\r\n+  res.json(clubs);\r\n };\r\n \r\n \r\n+\r\n export const createClub = async (req: Request, res: Response) => {\r\n   const { name, location, timezone, clubEmail } = req.body;\r\n   const newClub = await prisma.club.create({\r\n     data: { name, location, timezone, clubEmail },\r\n"
                },
                {
                    "date": 1753039558826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,23 @@\n import { createNewMember } from '../services/member.service';\r\n import prisma from '../lib/prisma';\r\n \r\n export const getAllClubs = async (req: Request, res: Response) => {\r\n-  const clubs = await prisma.club.findMany();\r\n+  const clubs = await prisma.club.findMany({\r\n+  include: {\r\n+    users: {\r\n+      where: {\r\n+        role: 'franchise_admin',\r\n+      },\r\n+      select: {\r\n+        id: true,\r\n+        email: true,\r\n+        name: true,\r\n+      },\r\n+      take: 1 // Get only one admin per club\r\n+    },\r\n+  },\r\n+});\r\n   res.json(clubs);\r\n };\r\n \r\n \r\n"
                }
            ],
            "date": 1752572545808,
            "name": "Commit-0",
            "content": "import { Request, Response } from 'express';\r\nimport { createNewMember } from '../services/member.service';\r\nimport prisma from '../lib/prisma';\r\n\r\nexport const getAllClubs = async (req: Request, res: Response) => {\r\n  const clubs = await prisma.club.findMany();\r\n  res.json(clubs);\r\n};\r\n\r\nexport const createClub = async (req: Request, res: Response) => {\r\n  const { name, location, timezone, clubEmail } = req.body;\r\n  const newClub = await prisma.club.create({\r\n    data: { name, location, timezone, clubEmail },\r\n  });\r\n  res.json(newClub);\r\n};\r\n\r\nexport const updateClub = async (req: Request, res: Response) => {\r\n  const { id } = req.params;\r\n  const { name, location, timezone, clubEmail } = req.body;\r\n  const updated = await prisma.club.update({\r\n    where: { id },\r\n    data: { name, location, timezone, clubEmail },\r\n  });\r\n  res.json(updated);\r\n};\r\n\r\nexport const deleteClub = async (req: Request, res: Response) => {\r\n  const { id } = req.params;\r\n  await prisma.club.delete({ where: { id } });\r\n  res.status(204).send();\r\n};\r\n"
        }
    ]
}