{
    "sourceFile": "src/controllers/staff.controller.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1752901044123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752901392729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,5 +96,55 @@\n       return res.status(409).json({ error: 'A user with this email already exists.' });\r\n     }\r\n     res.status(500).json({ error: 'Failed to invite staff member.' });\r\n   }\r\n+};\r\n+\r\n+export const getAllStaffForFranchise = async (req: AuthenticatedRequest, res: Response) => {\r\n+  const { clubId } = req.query; // Get clubId from query parameter\r\n+  const userClubId = req.user?.clubId;\r\n+  const userRole = req.user?.role;\r\n+\r\n+  try {\r\n+    // Authorization check: Ensure admin is fetching staff for THEIR club\r\n+    // A super_admin can view staff for any club.\r\n+    if (userRole !== Role.super_admin && (userRole !== Role.franchise_admin || userClubId !== clubId)) {\r\n+      return res.status(403).json({ error: 'Access denied. Unauthorized to view staff for this club.' });\r\n+    }\r\n+\r\n+    if (!clubId) {\r\n+      return res.status(400).json({ error: 'Club ID is required to fetch staff.' });\r\n+    }\r\n+\r\n+    // Define roles that are considered 'staff' for listing purposes\r\n+    const staffRolesToList: Role[] = [Role.trainer, Role.staff]; // Add Role.receptionist if applicable\r\n+\r\n+    // Fetch users who are considered 'staff' for this club\r\n+    const staffMembers = await prisma.user.findMany({\r\n+      where: {\r\n+        clubId: String(clubId), // Ensure clubId is a string\r\n+        role: {\r\n+          in: staffRolesToList // Filter by defined staff roles\r\n+        }\r\n+      },\r\n+      select: { // Select specific fields to return to frontend\r\n+        id: true,\r\n+        name: true, // Assuming you use 'name' on User, or combine firstName/lastName\r\n+        email: true,\r\n+        role: true,\r\n+        status: true, // Include status to show if pending/active\r\n+        // If you need phone, it's not directly on User.\r\n+        // You'd need to either add it to the User model, or join with Trainer/Member\r\n+        // if the staff user also has one of those profiles.\r\n+        // For now, omitting phone unless it's on User directly.\r\n+      },\r\n+      orderBy: {\r\n+        name: 'asc' // Order by name for consistent display\r\n+      }\r\n+    });\r\n+\r\n+    res.status(200).json(staffMembers);\r\n+  } catch (error: any) {\r\n+    console.error('Error fetching staff:', error);\r\n+    res.status(500).json({ error: 'Failed to fetch staff members.' });\r\n+  }\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752902618857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,9 +115,9 @@\n       return res.status(400).json({ error: 'Club ID is required to fetch staff.' });\r\n     }\r\n \r\n     // Define roles that are considered 'staff' for listing purposes\r\n-    const staffRolesToList: Role[] = [Role.trainer, Role.staff]; // Add Role.receptionist if applicable\r\n+    const staffRolesToList: Role[] = [Role.staff]; // Add Role.receptionist if applicable\r\n \r\n     // Fetch users who are considered 'staff' for this club\r\n     const staffMembers = await prisma.user.findMany({\r\n       where: {\r\n"
                },
                {
                    "date": 1752903551571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,5 +140,84 @@\n       },\r\n     });\r\n \r\n     // STEP 2: Now that newUser has an ID, generate the token with the ACTUAL user ID\r\n-    const setupToken = generatePasswordSetupToken(ne\n\\ No newline at end of file\n+    const setupToken = generatePasswordSetupToken(newUser.id, newUser.email);\r\n+    const setupExpires = new Date(Date.now() + 3600000); // 1 hour expiry\r\n+\r\n+    // STEP 3: Update the newly created user with the generated token and expiry\r\n+    const userWithToken = await prisma.user.update({\r\n+      where: { id: newUser.id },\r\n+      data: {\r\n+        setupPasswordToken: setupToken,\r\n+        setupPasswordExpires: setupExpires,\r\n+      },\r\n+    });\r\n+\r\n+    // STEP 4: Send the email using the token stored on the userWithToken object\r\n+    await sendPasswordSetupEmail(userWithToken.email, userWithToken.name || 'Staff Member', userWithToken.setupPasswordToken!);\r\n+\r\n+    res.status(201).json({\r\n+      message: 'Staff invite sent successfully. An email has been dispatched for password setup.',\r\n+      staffId: userWithToken.id,\r\n+      email: userWithToken.email,\r\n+      role: userWithToken.role,\r\n+    });\r\n+\r\n+  } catch (error: any) {\r\n+    console.error('Error inviting staff:', error);\r\n+    if (error.code === 'P2002' && error.meta?.target?.includes('email')) {\r\n+      return res.status(409).json({ error: 'A user with this email already exists.' });\r\n+    }\r\n+    res.status(500).json({ error: 'An unexpected error occurred while inviting staff.' });\r\n+  }\r\n+};\r\n+\r\n+export const getAllStaffForFranchise = async (req: AuthenticatedRequest, res: Response) => {\r\n+  const { clubId } = req.query; // Get clubId from query parameter\r\n+  const userClubId = req.user?.clubId;\r\n+  const userRole = req.user?.role;\r\n+\r\n+  try {\r\n+    // Authorization check: Ensure admin is fetching staff for THEIR club\r\n+    // A super_admin can view staff for any club.\r\n+    if (userRole !== Role.super_admin && (userRole !== Role.franchise_admin || userClubId !== clubId)) {\r\n+      return res.status(403).json({ error: 'Access denied. Unauthorized to view staff for this club.' });\r\n+    }\r\n+\r\n+    if (!clubId) {\r\n+      return res.status(400).json({ error: 'Club ID is required to fetch staff.' });\r\n+    }\r\n+\r\n+    // Define roles that are considered 'staff' for listing purposes\r\n+    const staffRolesToList: Role[] = [Role.staff]; // Add Role.receptionist if applicable\r\n+\r\n+    // Fetch users who are considered 'staff' for this club\r\n+    const staffMembers = await prisma.user.findMany({\r\n+      where: {\r\n+        clubId: String(clubId), // Ensure clubId is a string\r\n+        role: {\r\n+          in: staffRolesToList // Filter by defined staff roles\r\n+        }\r\n+      },\r\n+      select: { // Select specific fields to return to frontend\r\n+        id: true,\r\n+        name: true, // Assuming you use 'name' on User, or combine firstName/lastName\r\n+        email: true,\r\n+        role: true,\r\n+        status: true, // Include status to show if pending/active\r\n+        // If you need phone, it's not directly on User.\r\n+        // You'd need to either add it to the User model, or join with Trainer/Member\r\n+        // if the staff user also has one of those profiles.\r\n+        // For now, omitting phone unless it's on User directly.\r\n+      },\r\n+      orderBy: {\r\n+        name: 'asc' // Order by name for consistent display\r\n+      }\r\n+    });\r\n+\r\n+    res.status(200).json(staffMembers);\r\n+  } catch (error: any) {\r\n+    console.error('Error fetching staff:', error);\r\n+    res.status(500).json({ error: 'Failed to fetch staff members.' });\r\n+  }\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752904216601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n     id: string;\r\n     email: string;\r\n     role: Role; // Import Role enum from @prisma/client\r\n     clubId?: string;\r\n-    // ... other properties from your user object\r\n+    \r\n   };\r\n }\r\n \r\n // Controller to invite new staff members\r\n@@ -126,8 +126,10 @@\n       }\r\n       return res.status(409).json({ error: 'A user with this email already exists and is awaiting password setup.' });\r\n     }\r\n \r\n+        console.log('Invite Staff Debug: Creating user with email:', email);\r\n+\r\n     // STEP 1: Create the user with initial null password and PENDING status\r\n     const newUser = await prisma.user.create({\r\n       data: {\r\n         email,\r\n@@ -139,12 +141,17 @@\n         // setupPasswordToken and setupPasswordExpires will be added in STEP 2\r\n       },\r\n     });\r\n \r\n+\r\n+     console.log('Invite Staff Debug: Created user with ID:', newUser.id);\r\n+\r\n     // STEP 2: Now that newUser has an ID, generate the token with the ACTUAL user ID\r\n     const setupToken = generatePasswordSetupToken(newUser.id, newUser.email);\r\n     const setupExpires = new Date(Date.now() + 3600000); // 1 hour expiry\r\n \r\n+    console.log('Invite Staff Debug: Generated setup token for user:', newUser.id);\r\n+\r\n     // STEP 3: Update the newly created user with the generated token and expiry\r\n     const userWithToken = await prisma.user.update({\r\n       where: { id: newUser.id },\r\n       data: {\r\n@@ -152,11 +159,15 @@\n         setupPasswordExpires: setupExpires,\r\n       },\r\n     });\r\n \r\n+    console.log('Invite Staff Debug: Updated user with token');\r\n+\r\n     // STEP 4: Send the email using the token stored on the userWithToken object\r\n     await sendPasswordSetupEmail(userWithToken.email, userWithToken.name || 'Staff Member', userWithToken.setupPasswordToken!);\r\n \r\n+    console.log('Invite Staff Debug: Email sent successfully');\r\n+\r\n     res.status(201).json({\r\n       message: 'Staff invite sent successfully. An email has been dispatched for password setup.',\r\n       staffId: userWithToken.id,\r\n       email: userWithToken.email,\r\n"
                }
            ],
            "date": 1752901044122,
            "name": "Commit-0",
            "content": "// src/controllers/staff.controller.ts (NEW FILE or extend existing)\r\nimport { Request, Response } from 'express';\r\nimport { PrismaClient, Role } from '@prisma/client';\r\nimport { generatePasswordSetupToken } from '../utils/authUtils'; // Re-use this utility\r\nimport { sendPasswordSetupEmail } from '../services/email.service'; // Re-use this service\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n// Interface to extend Express Request with user data from auth middleware\r\ninterface AuthenticatedRequest extends Request {\r\n  user?: {\r\n    id: string;\r\n    email: string;\r\n    role: Role; // Import Role enum from @prisma/client\r\n    clubId?: string;\r\n    // ... other properties from your user object\r\n  };\r\n}\r\n\r\n// Controller to invite new staff members\r\nexport const inviteStaff = async (req: AuthenticatedRequest, res: Response) => {\r\n  // Ensure the inviting user is a 'franchise_admin' and their clubId matches\r\n  const inviterClubId = req.user?.clubId;\r\n  const inviterRole = req.user?.role;\r\n\r\n  const { name, email, phone, role, clubId } = req.body; // role will be 'staff'\r\n\r\n  // Basic validation\r\n  if (!name || !email || !role || !clubId) {\r\n    return res.status(400).json({ error: 'Name, email, role, and club ID are required.' });\r\n  }\r\n\r\n  // Authorize: Only a franchise_admin can invite staff to their club\r\n  if (inviterRole !== 'franchise_admin' || inviterClubId !== clubId) {\r\n    return res.status(403).json({ error: 'Access denied. You are not authorized to invite staff to this club.' });\r\n  }\r\n\r\n  // Validate the 'role' to ensure it's a legitimate staff role (not super_admin, member, or franchise_admin)\r\n  const allowedStaffRoles: Role[] = ['staff', 'trainer']; // Add 'receptionist' if you have it in your Role enum\r\n  if (!allowedStaffRoles.includes(role as Role)) {\r\n      return res.status(400).json({ error: `Invalid role specified. Only ${allowedStaffRoles.join(', ')} roles can be invited.` });\r\n  }\r\n\r\n  try {\r\n    // Check if a User with this email already exists\r\n    const existingUser = await prisma.user.findUnique({ where: { email } });\r\n    if (existingUser) {\r\n      return res.status(409).json({ error: 'A user with this email already exists.' });\r\n    }\r\n\r\n    // --- START: Create User record with PENDING status ---\r\n    const newUser = await prisma.user.create({\r\n      data: {\r\n        email,\r\n        name, // Uses the combined name from frontend\r\n        role: role as Role, // Cast to Role enum\r\n        club: { connect: { id: clubId } },\r\n        // These fields are crucial for the invite flow with nullable password\r\n        password: null, // Password is null initially\r\n        status: 'PENDING', // Set initial status\r\n        setupPasswordToken: generatePasswordSetupToken(null, email), // Pass null for userId initially, or use UUID/crypto.randomBytes() directly\r\n                                                                     // More robust: generate a cryptographically secure token here\r\n        setupPasswordExpires: new Date(Date.now() + 3600000), // Token expires in 1 hour\r\n      },\r\n    });\r\n    // --- END: Create User record ---\r\n\r\n    // You might also want to create a separate \"StaffProfile\" model linked to User, similar to Trainer.\r\n    // For now, we'll assume the User record is sufficient for \"staff\" role.\r\n    // If you need a `Staff` profile with `phone` on it, you'd do:\r\n    /*\r\n    const staffProfile = await prisma.staff.create({\r\n        data: {\r\n            phone, // If phone is specific to the staff profile\r\n            user: { connect: { id: newUser.id } },\r\n            club: { connect: { id: clubId } }\r\n            // ... other staff specific fields\r\n        }\r\n    });\r\n    */\r\n\r\n    // Send the password setup email using the token stored on the new user\r\n    const setupLinkToken = newUser.setupPasswordToken; // Use the generated token\r\n    await sendPasswordSetupEmail(newUser.email, newUser.name || 'Staff Member', setupLinkToken!); // Assert non-null with !\r\n\r\n    res.status(201).json({\r\n      message: 'Staff invite sent successfully. An email has been dispatched for password setup.',\r\n      staffId: newUser.id, // Return the User ID\r\n      email: newUser.email,\r\n      role: newUser.role,\r\n    });\r\n\r\n  } catch (error: any) {\r\n    console.error('Error inviting staff:', error);\r\n    if (error.code === 'P2002' && error.meta?.target?.includes('email')) {\r\n      return res.status(409).json({ error: 'A user with this email already exists.' });\r\n    }\r\n    res.status(500).json({ error: 'Failed to invite staff member.' });\r\n  }\r\n};"
        }
    ]
}