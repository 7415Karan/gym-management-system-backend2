{
    "sourceFile": "prisma/seed.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1752122385177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752127266280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,24 +1,29 @@\n+import { PrismaClient } from '../generated/prisma';\r\n import bcrypt from 'bcryptjs';\r\n-import prisma from '../src/lib/prisma';\r\n \r\n-async function seed() {\r\n+const prisma = new PrismaClient();\r\n+\r\n+async function main() {\r\n+  const hashedPassword = await bcrypt.hash('password123', 10);\r\n+\r\n   await prisma.user.createMany({\r\n     data: [\r\n       {\r\n         email: 'super@gym.com',\r\n-        password: await bcrypt.hash('super123', 10),\r\n+        password: hashedPassword,\r\n         role: 'super_admin',\r\n       },\r\n       {\r\n         email: 'franchise@gym.com',\r\n-        password: await bcrypt.hash('fran123', 10),\r\n+        password: hashedPassword,\r\n         role: 'franchise_admin',\r\n-        clubId: 'CLUB001',\r\n+        clubId: 'club1',\r\n       },\r\n     ],\r\n+    skipDuplicates: true,\r\n   });\r\n+\r\n+  console.log('âœ… Seeded test users');\r\n }\r\n \r\n-seed().then(() => {\r\n-  console.log('Seeding done.');\r\n-});\r\n+main().finally(() => prisma.$disconnect());\r\n"
                },
                {
                    "date": 1752127363944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,40 @@\n+import { PrismaClient } from '../generated/prisma';\r\n+import bcrypt from 'bcryptjs';\r\n+\r\n+const prisma = new PrismaClient();\r\n+\r\n+async function main() {\r\n+  const hashedPassword = await bcrypt.hash('password123', 10);\r\n+\r\n+  // ðŸ‘‡ Step 1: Create a dummy club\r\n+  const club = await prisma.club.upsert({\r\n+    where: { id: 'club1' },\r\n+    update: {},\r\n+    create: {\r\n+      id: 'club1',\r\n+      name: 'Downtown Gym',\r\n+    },\r\n+  });\r\n+\r\n+  // ðŸ‘‡ Step 2: Create users referencing that club\r\n+  await prisma.user.createMany({\r\n+    data: [\r\n+      {\r\n+        email: 'super@gym.com',\r\n+        password: hashedPassword,\r\n+        role: 'super_admin',\r\n+      },\r\n+      {\r\n+        email: 'franchise@gym.com',\r\n+        password: hashedPassword,\r\n+        role: 'franchise_admin',\r\n+        clubId: club.id,\r\n+      },\r\n+    ],\r\n+    skipDuplicates: true,\r\n+  });\r\n+\r\n+  console.log('âœ… Seeded test users & club');\r\n+}\r\n+\r\n+main().finally(() => prisma.$disconnect());\r\n"
                },
                {
                    "date": 1752209207239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { PrismaClient } from '../generated/prisma';\r\n+import { PrismaClient } from '@prisma/client';\r\n import bcrypt from 'bcryptjs';\r\n \r\n const prisma = new PrismaClient();\r\n \r\n@@ -11,9 +11,10 @@\n     where: { id: 'club1' },\r\n     update: {},\r\n     create: {\r\n       id: 'club1',\r\n-      name: 'Downtown Gym',\r\n+      name: 'Golf Simulator',\r\n+      location: 'City Center'\r\n     },\r\n   });\r\n \r\n   // ðŸ‘‡ Step 2: Create users referencing that club\r\n@@ -28,42 +29,29 @@\n         email: 'franchise@gym.com',\r\n         password: hashedPassword,\r\n         role: 'franchise_admin',\r\n         clubId: club.id,\r\n-      },\r\n+      }\r\n     ],\r\n     skipDuplicates: true,\r\n   });\r\n \r\n-  console.log('âœ… Seeded test users & club');\r\n-}\r\n-\r\n-main().finally(() => prisma.$disconnect());\r\n-import { PrismaClient } from '../generated/prisma';\r\n-import bcrypt from 'bcryptjs';\r\n-\r\n-const prisma = new PrismaClient();\r\n-\r\n-async function main() {\r\n-  const hashedPassword = await bcrypt.hash('password123', 10);\r\n-\r\n-  await prisma.user.createMany({\r\n-    data: [\r\n-      {\r\n-        email: 'super@gym.com',\r\n-        password: hashedPassword,\r\n-        role: 'super_admin',\r\n-      },\r\n-      {\r\n-        email: 'franchise@gym.com',\r\n-        password: hashedPassword,\r\n-        role: 'franchise_admin',\r\n-        clubId: 'club1',\r\n-      },\r\n-    ],\r\n-    skipDuplicates: true,\r\n+  // ðŸ‘‡ Step 3: Create a trainer linked to the club\r\n+  await prisma.trainer.upsert({\r\n+    where: { email: 'trainer@gym.com' },\r\n+    update: {},\r\n+    create: {\r\n+      name: 'Jane Trainer',\r\n+      email: 'trainer@gym.com',\r\n+      clubId: club.id\r\n+    },\r\n   });\r\n \r\n-  console.log('âœ… Seeded test users');\r\n+  console.log('âœ… Seeded test club, users, and trainer');\r\n }\r\n \r\n-main().finally(() => prisma.$disconnect());\r\n+main()\r\n+  .catch((e) => {\r\n+    console.error(e);\r\n+    process.exit(1);\r\n+  })\r\n+  .finally(() => prisma.$disconnect());\r\n"
                },
                {
                    "date": 1752212744200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,72 @@\n+import { PrismaClient } from '@prisma/client';\r\n+import bcrypt from 'bcryptjs';\r\n+\r\n+const prisma = new PrismaClient();\r\n+\r\n+async function main() {\r\n+  const hashedPassword = await bcrypt.hash('password123', 10);\r\n+\r\n+  // ðŸ‘‡ Step 1: Create a dummy club\r\n+  const club = await prisma.club.upsert({\r\n+    where: { id: 'club1' },\r\n+    update: {},\r\n+    create: {\r\n+      id: 'club1',\r\n+      name: 'Golf Simulator',\r\n+      location: 'City Center'\r\n+    },\r\n+  });\r\n+\r\n+  // ðŸ‘‡ Step 2: Create users referencing that club\r\n+  // âœ… Step 2: Upsert super admin\r\n+await prisma.user.upsert({\r\n+  where: { email: 'super@gym.com' },\r\n+  update: {\r\n+    password: hashedPassword,\r\n+    role: 'super_admin',\r\n+    clubId: null,\r\n+  },\r\n+  create: {\r\n+    email: 'super@gym.com',\r\n+    password: hashedPassword,\r\n+    role: 'super_admin',\r\n+  },\r\n+});\r\n+\r\n+// âœ… Step 3: Upsert franchise admin\r\n+await prisma.user.upsert({\r\n+  where: { email: 'franchise@gym.com' },\r\n+  update: {\r\n+    password: hashedPassword,\r\n+    role: 'franchise_admin',\r\n+    clubId: club.id,\r\n+  },\r\n+  create: {\r\n+    email: 'franchise@gym.com',\r\n+    password: hashedPassword,\r\n+    role: 'franchise_admin',\r\n+    clubId: club.id,\r\n+  },\r\n+});\r\n+\r\n+\r\n+  // ðŸ‘‡ Step 3: Create a trainer linked to the club\r\n+  await prisma.trainer.upsert({\r\n+    where: { email: 'trainer@gym.com' },\r\n+    update: {},\r\n+    create: {\r\n+      name: 'Jane Trainer',\r\n+      email: 'trainer@gym.com',\r\n+      clubId: club.id\r\n+    },\r\n+  });\r\n+\r\n+  console.log('âœ… Seeded test club, users, and trainer');\r\n+}\r\n+\r\n+main()\r\n+  .catch((e) => {\r\n+    console.error(e);\r\n+    process.exit(1);\r\n+  })\r\n+  .finally(() => prisma.$disconnect());\r\n"
                }
            ],
            "date": 1752122385177,
            "name": "Commit-0",
            "content": "import bcrypt from 'bcryptjs';\r\nimport prisma from '../src/lib/prisma';\r\n\r\nasync function seed() {\r\n  await prisma.user.createMany({\r\n    data: [\r\n      {\r\n        email: 'super@gym.com',\r\n        password: await bcrypt.hash('super123', 10),\r\n        role: 'super_admin',\r\n      },\r\n      {\r\n        email: 'franchise@gym.com',\r\n        password: await bcrypt.hash('fran123', 10),\r\n        role: 'franchise_admin',\r\n        clubId: 'CLUB001',\r\n      },\r\n    ],\r\n  });\r\n}\r\n\r\nseed().then(() => {\r\n  console.log('Seeding done.');\r\n});\r\n"
        }
    ]
}