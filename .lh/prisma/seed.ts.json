{
    "sourceFile": "prisma/seed.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 25,
            "patches": [
                {
                    "date": 1752122385177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752127266280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,24 +1,29 @@\n+import { PrismaClient } from '../generated/prisma';\r\n import bcrypt from 'bcryptjs';\r\n-import prisma from '../src/lib/prisma';\r\n \r\n-async function seed() {\r\n+const prisma = new PrismaClient();\r\n+\r\n+async function main() {\r\n+  const hashedPassword = await bcrypt.hash('password123', 10);\r\n+\r\n   await prisma.user.createMany({\r\n     data: [\r\n       {\r\n         email: 'super@gym.com',\r\n-        password: await bcrypt.hash('super123', 10),\r\n+        password: hashedPassword,\r\n         role: 'super_admin',\r\n       },\r\n       {\r\n         email: 'franchise@gym.com',\r\n-        password: await bcrypt.hash('fran123', 10),\r\n+        password: hashedPassword,\r\n         role: 'franchise_admin',\r\n-        clubId: 'CLUB001',\r\n+        clubId: 'club1',\r\n       },\r\n     ],\r\n+    skipDuplicates: true,\r\n   });\r\n+\r\n+  console.log('✅ Seeded test users');\r\n }\r\n \r\n-seed().then(() => {\r\n-  console.log('Seeding done.');\r\n-});\r\n+main().finally(() => prisma.$disconnect());\r\n"
                },
                {
                    "date": 1752127363944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,40 @@\n+import { PrismaClient } from '../generated/prisma';\r\n+import bcrypt from 'bcryptjs';\r\n+\r\n+const prisma = new PrismaClient();\r\n+\r\n+async function main() {\r\n+  const hashedPassword = await bcrypt.hash('password123', 10);\r\n+\r\n+  // 👇 Step 1: Create a dummy club\r\n+  const club = await prisma.club.upsert({\r\n+    where: { id: 'club1' },\r\n+    update: {},\r\n+    create: {\r\n+      id: 'club1',\r\n+      name: 'Downtown Gym',\r\n+    },\r\n+  });\r\n+\r\n+  // 👇 Step 2: Create users referencing that club\r\n+  await prisma.user.createMany({\r\n+    data: [\r\n+      {\r\n+        email: 'super@gym.com',\r\n+        password: hashedPassword,\r\n+        role: 'super_admin',\r\n+      },\r\n+      {\r\n+        email: 'franchise@gym.com',\r\n+        password: hashedPassword,\r\n+        role: 'franchise_admin',\r\n+        clubId: club.id,\r\n+      },\r\n+    ],\r\n+    skipDuplicates: true,\r\n+  });\r\n+\r\n+  console.log('✅ Seeded test users & club');\r\n+}\r\n+\r\n+main().finally(() => prisma.$disconnect());\r\n"
                },
                {
                    "date": 1752209207239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { PrismaClient } from '../generated/prisma';\r\n+import { PrismaClient } from '@prisma/client';\r\n import bcrypt from 'bcryptjs';\r\n \r\n const prisma = new PrismaClient();\r\n \r\n@@ -11,9 +11,10 @@\n     where: { id: 'club1' },\r\n     update: {},\r\n     create: {\r\n       id: 'club1',\r\n-      name: 'Downtown Gym',\r\n+      name: 'Golf Simulator',\r\n+      location: 'City Center'\r\n     },\r\n   });\r\n \r\n   // 👇 Step 2: Create users referencing that club\r\n@@ -28,42 +29,29 @@\n         email: 'franchise@gym.com',\r\n         password: hashedPassword,\r\n         role: 'franchise_admin',\r\n         clubId: club.id,\r\n-      },\r\n+      }\r\n     ],\r\n     skipDuplicates: true,\r\n   });\r\n \r\n-  console.log('✅ Seeded test users & club');\r\n-}\r\n-\r\n-main().finally(() => prisma.$disconnect());\r\n-import { PrismaClient } from '../generated/prisma';\r\n-import bcrypt from 'bcryptjs';\r\n-\r\n-const prisma = new PrismaClient();\r\n-\r\n-async function main() {\r\n-  const hashedPassword = await bcrypt.hash('password123', 10);\r\n-\r\n-  await prisma.user.createMany({\r\n-    data: [\r\n-      {\r\n-        email: 'super@gym.com',\r\n-        password: hashedPassword,\r\n-        role: 'super_admin',\r\n-      },\r\n-      {\r\n-        email: 'franchise@gym.com',\r\n-        password: hashedPassword,\r\n-        role: 'franchise_admin',\r\n-        clubId: 'club1',\r\n-      },\r\n-    ],\r\n-    skipDuplicates: true,\r\n+  // 👇 Step 3: Create a trainer linked to the club\r\n+  await prisma.trainer.upsert({\r\n+    where: { email: 'trainer@gym.com' },\r\n+    update: {},\r\n+    create: {\r\n+      name: 'Jane Trainer',\r\n+      email: 'trainer@gym.com',\r\n+      clubId: club.id\r\n+    },\r\n   });\r\n \r\n-  console.log('✅ Seeded test users');\r\n+  console.log('✅ Seeded test club, users, and trainer');\r\n }\r\n \r\n-main().finally(() => prisma.$disconnect());\r\n+main()\r\n+  .catch((e) => {\r\n+    console.error(e);\r\n+    process.exit(1);\r\n+  })\r\n+  .finally(() => prisma.$disconnect());\r\n"
                },
                {
                    "date": 1752212744200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,72 @@\n+import { PrismaClient } from '@prisma/client';\r\n+import bcrypt from 'bcryptjs';\r\n+\r\n+const prisma = new PrismaClient();\r\n+\r\n+async function main() {\r\n+  const hashedPassword = await bcrypt.hash('password123', 10);\r\n+\r\n+  // 👇 Step 1: Create a dummy club\r\n+  const club = await prisma.club.upsert({\r\n+    where: { id: 'club1' },\r\n+    update: {},\r\n+    create: {\r\n+      id: 'club1',\r\n+      name: 'Golf Simulator',\r\n+      location: 'City Center'\r\n+    },\r\n+  });\r\n+\r\n+  // 👇 Step 2: Create users referencing that club\r\n+  // ✅ Step 2: Upsert super admin\r\n+await prisma.user.upsert({\r\n+  where: { email: 'super@gym.com' },\r\n+  update: {\r\n+    password: hashedPassword,\r\n+    role: 'super_admin',\r\n+    clubId: null,\r\n+  },\r\n+  create: {\r\n+    email: 'super@gym.com',\r\n+    password: hashedPassword,\r\n+    role: 'super_admin',\r\n+  },\r\n+});\r\n+\r\n+// ✅ Step 3: Upsert franchise admin\r\n+await prisma.user.upsert({\r\n+  where: { email: 'franchise@gym.com' },\r\n+  update: {\r\n+    password: hashedPassword,\r\n+    role: 'franchise_admin',\r\n+    clubId: club.id,\r\n+  },\r\n+  create: {\r\n+    email: 'franchise@gym.com',\r\n+    password: hashedPassword,\r\n+    role: 'franchise_admin',\r\n+    clubId: club.id,\r\n+  },\r\n+});\r\n+\r\n+\r\n+  // 👇 Step 3: Create a trainer linked to the club\r\n+  await prisma.trainer.upsert({\r\n+    where: { email: 'trainer@gym.com' },\r\n+    update: {},\r\n+    create: {\r\n+      name: 'Jane Trainer',\r\n+      email: 'trainer@gym.com',\r\n+      clubId: club.id\r\n+    },\r\n+  });\r\n+\r\n+  console.log('✅ Seeded test club, users, and trainer');\r\n+}\r\n+\r\n+main()\r\n+  .catch((e) => {\r\n+    console.error(e);\r\n+    process.exit(1);\r\n+  })\r\n+  .finally(() => prisma.$disconnect());\r\n"
                },
                {
                    "date": 1752301603298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,100 @@\n+import { PrismaClient } from '@prisma/client';\r\n+import bcrypt from 'bcryptjs';\r\n+\r\n+const prisma = new PrismaClient();\r\n+\r\n+async function main() {\r\n+  const hashedPassword = await bcrypt.hash('password123', 10);\r\n+\r\n+  // 👇 Step 1: Create a dummy club\r\n+  const club = await prisma.club.upsert({\r\n+    where: { id: 'club1' },\r\n+    update: {},\r\n+    create: {\r\n+      id: 'club1',\r\n+      name: 'Golf Simulator',\r\n+      location: 'City Center'\r\n+    },\r\n+  });\r\n+\r\n+  // 👇 Step 2: Create users referencing that club\r\n+  // ✅ Step 2: Upsert super admin\r\n+await prisma.user.upsert({\r\n+  where: { email: 'super@gym.com' },\r\n+  update: {\r\n+    password: hashedPassword,\r\n+    role: 'super_admin',\r\n+    clubId: null,\r\n+  },\r\n+  create: {\r\n+    email: 'super@gym.com',\r\n+    password: hashedPassword,\r\n+    role: 'super_admin',\r\n+  },\r\n+});\r\n+\r\n+// ✅ Step 3: Upsert franchise admin\r\n+await prisma.user.upsert({\r\n+  where: { email: 'franchise@gym.com' },\r\n+  update: {\r\n+    password: hashedPassword,\r\n+    role: 'franchise_admin',\r\n+    clubId: club.id,\r\n+  },\r\n+  create: {\r\n+    email: 'franchise@gym.com',\r\n+    password: hashedPassword,\r\n+    role: 'franchise_admin',\r\n+    clubId: club.id,\r\n+  },\r\n+});\r\n+\r\n+//membership plans\r\n+\r\n+  await prisma.membershipPlan.createMany({\r\n+    data: [\r\n+      {\r\n+        name: 'Basic',\r\n+        description: 'Access to gym equipment and showers',\r\n+        price: 29.99,\r\n+        durationInDays: 30,\r\n+      },\r\n+      {\r\n+        name: 'Premium',\r\n+        description: 'Includes group classes, personal trainer access',\r\n+        price: 59.99,\r\n+        durationInDays: 30,\r\n+      },\r\n+      {\r\n+        name: 'Annual',\r\n+        description: 'Yearly membership with full benefits',\r\n+        price: 499.99,\r\n+        durationInDays: 365,\r\n+      },\r\n+    ],\r\n+    skipDuplicates: true,\r\n+  });\r\n+\r\n+\r\n+  // 👇 Step 3: Create a trainer linked to the club\r\n+  await prisma.trainer.upsert({\r\n+    where: { email: 'trainer@gym.com' },\r\n+    update: {},\r\n+    create: {\r\n+      name: 'Jane Trainer',\r\n+      email: 'trainer@gym.com',\r\n+      clubId: club.id\r\n+    },\r\n+  });\r\n+\r\n+  console.log('✅ Seeded test club, users, and trainer');\r\n+}\r\n+\r\n+\r\n+\r\n+main()\r\n+  .catch((e) => {\r\n+    console.error(e);\r\n+    process.exit(1);\r\n+  })\r\n+  .finally(() => prisma.$disconnect());\r\n"
                },
                {
                    "date": 1752405987059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,10 @@\n const prisma = new PrismaClient();\r\n \r\n async function main() {\r\n   const hashedPassword = await bcrypt.hash('password123', 10);\r\n+  const trainer = await prisma.trainer.findFirst(); // or create a dummy trainer\r\n+  const club = await prisma.club.findFirst();   \r\n \r\n   // 👇 Step 1: Create a dummy club\r\n   const club = await prisma.club.upsert({\r\n     where: { id: 'club1' },\r\n@@ -90,9 +92,40 @@\n   console.log('✅ Seeded test club, users, and trainer');\r\n }\r\n \r\n \r\n+//make schedules\r\n \r\n+if (!trainer || !club) throw new Error('Missing trainer or club');\r\n+  await prisma.classSchedule.createMany({\r\n+    data: [\r\n+      {\r\n+        title: 'Morning Yoga',\r\n+        date: new Date('2025-07-15T08:00:00Z'),\r\n+        duration: 60,\r\n+        location: 'Room A',\r\n+        trainerId: trainer.id,\r\n+        clubId: club.id,\r\n+        maxCapacity: 20,\r\n+      },\r\n+      {\r\n+        title: 'HIIT Blast',\r\n+        date: new Date('2025-07-16T10:00:00Z'),\r\n+        duration: 45,\r\n+        location: 'Room B',\r\n+        trainerId: trainer.id,\r\n+        clubId: club.id,\r\n+        maxCapacity: 25,\r\n+      },\r\n+    ],\r\n+  });\r\n+\r\n+  console.log('✅ Seeded class schedules.');\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n main()\r\n   .catch((e) => {\r\n     console.error(e);\r\n     process.exit(1);\r\n"
                },
                {
                    "date": 1752406014618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,133 @@\n+import { PrismaClient } from '@prisma/client';\r\n+import bcrypt from 'bcryptjs';\r\n+\r\n+const prisma = new PrismaClient();\r\n+\r\n+async function main() {\r\n+  const hashedPassword = await bcrypt.hash('password123', 10);\r\n+  const trainer = await prisma.trainer.findFirst(); // or create a dummy trainer\r\n+  const club = await prisma.club.findFirst();   \r\n+\r\n+  // 👇 Step 1: Create a dummy club\r\n+  const club = await prisma.club.upsert({\r\n+    where: { id: 'club1' },\r\n+    update: {},\r\n+    create: {\r\n+      id: 'club1',\r\n+      name: 'Golf Simulator',\r\n+      location: 'City Center'\r\n+    },\r\n+  });\r\n+\r\n+  // 👇 Step 2: Create users referencing that club\r\n+  // ✅ Step 2: Upsert super admin\r\n+await prisma.user.upsert({\r\n+  where: { email: 'super@gym.com' },\r\n+  update: {\r\n+    password: hashedPassword,\r\n+    role: 'super_admin',\r\n+    clubId: null,\r\n+  },\r\n+  create: {\r\n+    email: 'super@gym.com',\r\n+    password: hashedPassword,\r\n+    role: 'super_admin',\r\n+  },\r\n+});\r\n+\r\n+// ✅ Step 3: Upsert franchise admin\r\n+await prisma.user.upsert({\r\n+  where: { email: 'franchise@gym.com' },\r\n+  update: {\r\n+    password: hashedPassword,\r\n+    role: 'franchise_admin',\r\n+    clubId: club.id,\r\n+  },\r\n+  create: {\r\n+    email: 'franchise@gym.com',\r\n+    password: hashedPassword,\r\n+    role: 'franchise_admin',\r\n+    clubId: club.id,\r\n+  },\r\n+});\r\n+\r\n+//membership plans\r\n+\r\n+  await prisma.membershipPlan.createMany({\r\n+    data: [\r\n+      {\r\n+        name: 'Basic',\r\n+        description: 'Access to gym equipment and showers',\r\n+        price: 29.99,\r\n+        durationInDays: 30,\r\n+      },\r\n+      {\r\n+        name: 'Premium',\r\n+        description: 'Includes group classes, personal trainer access',\r\n+        price: 59.99,\r\n+        durationInDays: 30,\r\n+      },\r\n+      {\r\n+        name: 'Annual',\r\n+        description: 'Yearly membership with full benefits',\r\n+        price: 499.99,\r\n+        durationInDays: 365,\r\n+      },\r\n+    ],\r\n+    skipDuplicates: true,\r\n+  });\r\n+\r\n+\r\n+  // 👇 Step 3: Create a trainer linked to the club\r\n+  await prisma.trainer.upsert({\r\n+    where: { email: 'trainer@gym.com' },\r\n+    update: {},\r\n+    create: {\r\n+      name: 'Jane Trainer',\r\n+      email: 'trainer@gym.com',\r\n+      clubId: club.id\r\n+    },\r\n+  });\r\n+\r\n+  console.log('✅ Seeded test club, users, and trainer');\r\n+}\r\n+\r\n+\r\n+//make schedules\r\n+\r\n+if (!trainer || !club) throw new Error('Missing trainer or club');\r\n+  await prisma.classSchedule.createMany({\r\n+    data: [\r\n+      {\r\n+        title: 'Morning Yoga',\r\n+        date: new Date('2025-07-15T08:00:00Z'),\r\n+        duration: 60,\r\n+        location: 'Room A',\r\n+        trainerId: trainer.id,\r\n+        clubId: club.id,\r\n+        maxCapacity: 20,\r\n+      },\r\n+      {\r\n+        title: 'HIIT Blast',\r\n+        date: new Date('2025-07-16T10:00:00Z'),\r\n+        duration: 45,\r\n+        location: 'Room B',\r\n+        trainerId: trainer.id,\r\n+        clubId: club.id,\r\n+        maxCapacity: 25,\r\n+      },\r\n+    ],\r\n+  });\r\n+\r\n+  console.log('✅ Seeded class schedules.');\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+main()\r\n+  .catch((e) => {\r\n+    console.error(e);\r\n+    process.exit(1);\r\n+  })\r\n+  .finally(() => prisma.$disconnect());\r\n"
                },
                {
                    "date": 1752406205330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,119 @@\n+import { PrismaClient } from '@prisma/client';\r\n+import bcrypt from 'bcryptjs';\r\n+\r\n+const prisma = new PrismaClient();\r\n+\r\n+async function main() {\r\n+const hashedPassword = await bcrypt.hash('password123', 10);\r\n+\r\n+  // 👇 Step 1: Upsert club\r\n+  const club = await prisma.club.upsert({\r\n+    where: { id: 'club1' },\r\n+    update: {},\r\n+    create: {\r\n+      id: 'club1',\r\n+      name: 'Golf Simulator',\r\n+      location: 'City Center',\r\n+    },\r\n+  });\r\n+\r\n+  // 👇 Step 2: Upsert users\r\n+  await prisma.user.upsert({\r\n+    where: { email: 'super@gym.com' },\r\n+    update: {\r\n+      password: hashedPassword,\r\n+      role: 'super_admin',\r\n+      clubId: null,\r\n+    },\r\n+    create: {\r\n+      email: 'super@gym.com',\r\n+      password: hashedPassword,\r\n+      role: 'super_admin',\r\n+    },\r\n+  });\r\n+\r\n+  await prisma.user.upsert({\r\n+    where: { email: 'franchise@gym.com' },\r\n+    update: {\r\n+      password: hashedPassword,\r\n+      role: 'franchise_admin',\r\n+      clubId: club.id,\r\n+    },\r\n+    create: {\r\n+      email: 'franchise@gym.com',\r\n+      password: hashedPassword,\r\n+      role: 'franchise_admin',\r\n+      clubId: club.id,\r\n+    },\r\n+  });\r\n+\r\n+  // 👇 Step 3: Create trainer\r\n+  const trainer = await prisma.trainer.upsert({\r\n+    where: { email: 'trainer@gym.com' },\r\n+    update: {},\r\n+    create: {\r\n+      name: 'Jane Trainer',\r\n+      email: 'trainer@gym.com',\r\n+      clubId: club.id,\r\n+    },\r\n+  });\r\n+\r\n+  // 👇 Step 4: Seed membership plans\r\n+  await prisma.membershipPlan.createMany({\r\n+    data: [\r\n+      {\r\n+        name: 'Basic',\r\n+        description: 'Access to gym equipment and showers',\r\n+        price: 29.99,\r\n+        durationInDays: 30,\r\n+      },\r\n+      {\r\n+        name: 'Premium',\r\n+        description: 'Includes group classes, personal trainer access',\r\n+        price: 59.99,\r\n+        durationInDays: 30,\r\n+      },\r\n+      {\r\n+        name: 'Annual',\r\n+        description: 'Yearly membership with full benefits',\r\n+        price: 499.99,\r\n+        durationInDays: 365,\r\n+      },\r\n+    ],\r\n+    skipDuplicates: true,\r\n+  });\r\n+\r\n+  // 👇 Step 5: Seed class schedules\r\n+  await prisma.classSchedule.createMany({\r\n+    data: [\r\n+      {\r\n+        title: 'Morning Yoga',\r\n+        date: new Date('2025-07-15T08:00:00Z'),\r\n+        duration: 60,\r\n+        location: 'Room A',\r\n+        trainerId: trainer.id,\r\n+        clubId: club.id,\r\n+        maxCapacity: 20,\r\n+      },\r\n+      {\r\n+        title: 'HIIT Blast',\r\n+        date: new Date('2025-07-16T10:00:00Z'),\r\n+        duration: 45,\r\n+        location: 'Room B',\r\n+        trainerId: trainer.id,\r\n+        clubId: club.id,\r\n+        maxCapacity: 25,\r\n+      },\r\n+    ],\r\n+  });\r\n+\r\n+  console.log('✅ Seeded test club, users, trainer, plans, and schedules');\r\n+}\r\n+\r\n+\r\n+main()\r\n+  .catch((e) => {\r\n+    console.error(e);\r\n+    process.exit(1);\r\n+  })\r\n+  .finally(() => prisma.$disconnect());\r\n"
                },
                {
                    "date": 1752406243882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,399 +116,4 @@\n     console.error(e);\r\n     process.exit(1);\r\n   })\r\n   .finally(() => prisma.$disconnect());\r\n-import { PrismaClient } from '@prisma/client';\r\n-import bcrypt from 'bcryptjs';\r\n-\r\n-const prisma = new PrismaClient();\r\n-\r\n-async function main() {\r\n-  const hashedPassword = await bcrypt.hash('password123', 10);\r\n-  const trainer = await prisma.trainer.findFirst(); // or create a dummy trainer\r\n-  const club = await prisma.club.findFirst();   \r\n-\r\n-  // 👇 Step 1: Create a dummy club\r\n-  const club = await prisma.club.upsert({\r\n-    where: { id: 'club1' },\r\n-    update: {},\r\n-    create: {\r\n-      id: 'club1',\r\n-      name: 'Golf Simulator',\r\n-      location: 'City Center'\r\n-    },\r\n-  });\r\n-\r\n-  // 👇 Step 2: Create users referencing that club\r\n-  // ✅ Step 2: Upsert super admin\r\n-await prisma.user.upsert({\r\n-  where: { email: 'super@gym.com' },\r\n-  update: {\r\n-    password: hashedPassword,\r\n-    role: 'super_admin',\r\n-    clubId: null,\r\n-  },\r\n-  create: {\r\n-    email: 'super@gym.com',\r\n-    password: hashedPassword,\r\n-    role: 'super_admin',\r\n-  },\r\n-});\r\n-\r\n-// ✅ Step 3: Upsert franchise admin\r\n-await prisma.user.upsert({\r\n-  where: { email: 'franchise@gym.com' },\r\n-  update: {\r\n-    password: hashedPassword,\r\n-    role: 'franchise_admin',\r\n-    clubId: club.id,\r\n-  },\r\n-  create: {\r\n-    email: 'franchise@gym.com',\r\n-    password: hashedPassword,\r\n-    role: 'franchise_admin',\r\n-    clubId: club.id,\r\n-  },\r\n-});\r\n-\r\n-//membership plans\r\n-\r\n-  await prisma.membershipPlan.createMany({\r\n-    data: [\r\n-      {\r\n-        name: 'Basic',\r\n-        description: 'Access to gym equipment and showers',\r\n-        price: 29.99,\r\n-        durationInDays: 30,\r\n-      },\r\n-      {\r\n-        name: 'Premium',\r\n-        description: 'Includes group classes, personal trainer access',\r\n-        price: 59.99,\r\n-        durationInDays: 30,\r\n-      },\r\n-      {\r\n-        name: 'Annual',\r\n-        description: 'Yearly membership with full benefits',\r\n-        price: 499.99,\r\n-        durationInDays: 365,\r\n-      },\r\n-    ],\r\n-    skipDuplicates: true,\r\n-  });\r\n-\r\n-\r\n-  // 👇 Step 3: Create a trainer linked to the club\r\n-  await prisma.trainer.upsert({\r\n-    where: { email: 'trainer@gym.com' },\r\n-    update: {},\r\n-    create: {\r\n-      name: 'Jane Trainer',\r\n-      email: 'trainer@gym.com',\r\n-      clubId: club.id\r\n-    },\r\n-  });\r\n-\r\n-  console.log('✅ Seeded test club, users, and trainer');\r\n-}\r\n-\r\n-\r\n-//make schedules\r\n-\r\n-if (!trainer || !club) throw new Error('Missing trainer or club');\r\n-  await prisma.classSchedule.createMany({\r\n-    data: [\r\n-      {\r\n-        title: 'Morning Yoga',\r\n-        date: new Date('2025-07-15T08:00:00Z'),\r\n-        duration: 60,\r\n-        location: 'Room A',\r\n-        trainerId: trainer.id,\r\n-        clubId: club.id,\r\n-        maxCapacity: 20,\r\n-      },\r\n-      {\r\n-        title: 'HIIT Blast',\r\n-        date: new Date('2025-07-16T10:00:00Z'),\r\n-        duration: 45,\r\n-        location: 'Room B',\r\n-        trainerId: trainer.id,\r\n-        clubId: club.id,\r\n-        maxCapacity: 25,\r\n-      },\r\n-    ],\r\n-  });\r\n-\r\n-  console.log('✅ Seeded class schedules.');\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-main()\r\n-  .catch((e) => {\r\n-    console.error(e);\r\n-    process.exit(1);\r\n-  })\r\n-  .finally(() => prisma.$disconnect());\r\n-import { PrismaClient } from '@prisma/client';\r\n-import bcrypt from 'bcryptjs';\r\n-\r\n-const prisma = new PrismaClient();\r\n-\r\n-async function main() {\r\n-  const hashedPassword = await bcrypt.hash('password123', 10);\r\n-  const trainer = await prisma.trainer.findFirst(); // or create a dummy trainer\r\n-  const club = await prisma.club.findFirst();   \r\n-\r\n-  // 👇 Step 1: Create a dummy club\r\n-  const club = await prisma.club.upsert({\r\n-    where: { id: 'club1' },\r\n-    update: {},\r\n-    create: {\r\n-      id: 'club1',\r\n-      name: 'Golf Simulator',\r\n-      location: 'City Center'\r\n-    },\r\n-  });\r\n-\r\n-  // 👇 Step 2: Create users referencing that club\r\n-  // ✅ Step 2: Upsert super admin\r\n-await prisma.user.upsert({\r\n-  where: { email: 'super@gym.com' },\r\n-  update: {\r\n-    password: hashedPassword,\r\n-    role: 'super_admin',\r\n-    clubId: null,\r\n-  },\r\n-  create: {\r\n-    email: 'super@gym.com',\r\n-    password: hashedPassword,\r\n-    role: 'super_admin',\r\n-  },\r\n-});\r\n-\r\n-// ✅ Step 3: Upsert franchise admin\r\n-await prisma.user.upsert({\r\n-  where: { email: 'franchise@gym.com' },\r\n-  update: {\r\n-    password: hashedPassword,\r\n-    role: 'franchise_admin',\r\n-    clubId: club.id,\r\n-  },\r\n-  create: {\r\n-    email: 'franchise@gym.com',\r\n-    password: hashedPassword,\r\n-    role: 'franchise_admin',\r\n-    clubId: club.id,\r\n-  },\r\n-});\r\n-\r\n-//membership plans\r\n-\r\n-  await prisma.membershipPlan.createMany({\r\n-    data: [\r\n-      {\r\n-        name: 'Basic',\r\n-        description: 'Access to gym equipment and showers',\r\n-        price: 29.99,\r\n-        durationInDays: 30,\r\n-      },\r\n-      {\r\n-        name: 'Premium',\r\n-        description: 'Includes group classes, personal trainer access',\r\n-        price: 59.99,\r\n-        durationInDays: 30,\r\n-      },\r\n-      {\r\n-        name: 'Annual',\r\n-        description: 'Yearly membership with full benefits',\r\n-        price: 499.99,\r\n-        durationInDays: 365,\r\n-      },\r\n-    ],\r\n-    skipDuplicates: true,\r\n-  });\r\n-\r\n-\r\n-  // 👇 Step 3: Create a trainer linked to the club\r\n-  await prisma.trainer.upsert({\r\n-    where: { email: 'trainer@gym.com' },\r\n-    update: {},\r\n-    create: {\r\n-      name: 'Jane Trainer',\r\n-      email: 'trainer@gym.com',\r\n-      clubId: club.id\r\n-    },\r\n-  });\r\n-\r\n-  console.log('✅ Seeded test club, users, and trainer');\r\n-}\r\n-\r\n-\r\n-//make schedules\r\n-\r\n-if (!trainer || !club) throw new Error('Missing trainer or club');\r\n-  await prisma.classSchedule.createMany({\r\n-    data: [\r\n-      {\r\n-        title: 'Morning Yoga',\r\n-        date: new Date('2025-07-15T08:00:00Z'),\r\n-        duration: 60,\r\n-        location: 'Room A',\r\n-        trainerId: trainer.id,\r\n-        clubId: club.id,\r\n-        maxCapacity: 20,\r\n-      },\r\n-      {\r\n-        title: 'HIIT Blast',\r\n-        date: new Date('2025-07-16T10:00:00Z'),\r\n-        duration: 45,\r\n-        location: 'Room B',\r\n-        trainerId: trainer.id,\r\n-        clubId: club.id,\r\n-        maxCapacity: 25,\r\n-      },\r\n-    ],\r\n-  });\r\n-\r\n-  console.log('✅ Seeded class schedules.');\r\n-}\r\n-\r\n-\r\n-\r\n-\r\n-main()\r\n-  .catch((e) => {\r\n-    console.error(e);\r\n-    process.exit(1);\r\n-  })\r\n-  .finally(() => prisma.$disconnect());\r\n-import { PrismaClient } from '@prisma/client';\r\n-import bcrypt from 'bcryptjs';\r\n-\r\n-const prisma = new PrismaClient();\r\n-\r\n-async function main() {\r\n-  const hashedPassword = await bcrypt.hash('password123', 10);\r\n-\r\n-  // 👇 Step 1: Create a dummy club\r\n-  const club = await prisma.club.upsert({\r\n-    where: { id: 'club1' },\r\n-    update: {},\r\n-    create: {\r\n-      id: 'club1',\r\n-      name: 'Golf Simulator',\r\n-      location: 'City Center'\r\n-    },\r\n-  });\r\n-\r\n-  // 👇 Step 2: Create users referencing that club\r\n-  // ✅ Step 2: Upsert super admin\r\n-await prisma.user.upsert({\r\n-  where: { email: 'super@gym.com' },\r\n-  update: {\r\n-    password: hashedPassword,\r\n-    role: 'super_admin',\r\n-    clubId: null,\r\n-  },\r\n-  create: {\r\n-    email: 'super@gym.com',\r\n-    password: hashedPassword,\r\n-    role: 'super_admin',\r\n-  },\r\n-});\r\n-\r\n-// ✅ Step 3: Upsert franchise admin\r\n-await prisma.user.upsert({\r\n-  where: { email: 'franchise@gym.com' },\r\n-  update: {\r\n-    password: hashedPassword,\r\n-    role: 'franchise_admin',\r\n-    clubId: club.id,\r\n-  },\r\n-  create: {\r\n-    email: 'franchise@gym.com',\r\n-    password: hashedPassword,\r\n-    role: 'franchise_admin',\r\n-    clubId: club.id,\r\n-  },\r\n-});\r\n-\r\n-\r\n-  // 👇 Step 3: Create a trainer linked to the club\r\n-  await prisma.trainer.upsert({\r\n-    where: { email: 'trainer@gym.com' },\r\n-    update: {},\r\n-    create: {\r\n-      name: 'Jane Trainer',\r\n-      email: 'trainer@gym.com',\r\n-      clubId: club.id\r\n-    },\r\n-  });\r\n-\r\n-  console.log('✅ Seeded test club, users, and trainer');\r\n-}\r\n-\r\n-main()\r\n-  .catch((e) => {\r\n-    console.error(e);\r\n-    process.exit(1);\r\n-  })\r\n-  .finally(() => prisma.$disconnect());\r\n-import { PrismaClient } from '@prisma/client';\r\n-import bcrypt from 'bcryptjs';\r\n-\r\n-const prisma = new PrismaClient();\r\n-\r\n-async function main() {\r\n-  const hashedPassword = await bcrypt.hash('password123', 10);\r\n-\r\n-  // 👇 Step 1: Create a dummy club\r\n-  const club = await prisma.club.upsert({\r\n-    where: { id: 'club1' },\r\n-    update: {},\r\n-    create: {\r\n-      id: 'club1',\r\n-      name: 'Golf Simulator',\r\n-      location: 'City Center'\r\n-    },\r\n-  });\r\n-\r\n-  // 👇 Step 2: Create users referencing that club\r\n-  await prisma.user.createMany({\r\n-    data: [\r\n-      {\r\n-        email: 'super@gym.com',\r\n-        password: hashedPassword,\r\n-        role: 'super_admin',\r\n-      },\r\n-      {\r\n-        email: 'franchise@gym.com',\r\n-        password: hashedPassword,\r\n-        role: 'franchise_admin',\r\n-        clubId: club.id,\r\n-      }\r\n-    ],\r\n-    skipDuplicates: true,\r\n-  });\r\n-\r\n-  // 👇 Step 3: Create a trainer linked to the club\r\n-  await prisma.trainer.upsert({\r\n-    where: { email: 'trainer@gym.com' },\r\n-    update: {},\r\n-    create: {\r\n-      name: 'Jane Trainer',\r\n-      email: 'trainer@gym.com',\r\n-      clubId: club.id\r\n-    },\r\n-  });\r\n-\r\n-  console.log('✅ Seeded test club, users, and trainer');\r\n-}\r\n-\r\n-main()\r\n-  .catch((e) => {\r\n-    console.error(e);\r\n-    process.exit(1);\r\n-  })\r\n-  .finally(() => prisma.$disconnect());\r\n"
                },
                {
                    "date": 1752420150143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n \r\n const prisma = new PrismaClient();\r\n \r\n async function main() {\r\n-const hashedPassword = await bcrypt.hash('password123', 10);\r\n+  const hashedPassword = await bcrypt.hash('password123', 10);\r\n \r\n   // 👇 Step 1: Upsert club\r\n   const club = await prisma.club.upsert({\r\n     where: { id: 'club1' },\r\n@@ -46,18 +46,38 @@\n       clubId: club.id,\r\n     },\r\n   });\r\n \r\n-  // 👇 Step 3: Create trainer\r\n-  const trainer = await prisma.trainer.upsert({\r\n-    where: { email: 'trainer@gym.com' },\r\n-    update: {},\r\n-    create: {\r\n-      name: 'Jane Trainer',\r\n-      email: 'trainer@gym.com',\r\n-      clubId: club.id,\r\n-    },\r\n-  });\r\n+  // 👇 Step 3: Upsert multiple trainers\r\n+  const trainers = await Promise.all([\r\n+    prisma.trainer.upsert({\r\n+      where: { email: 'trainer1@gym.com' },\r\n+      update: {},\r\n+      create: {\r\n+        name: 'Mike Bell',\r\n+        email: 'trainer1@gym.com',\r\n+        clubId: club.id,\r\n+      },\r\n+    }),\r\n+    prisma.trainer.upsert({\r\n+      where: { email: 'trainer2@gym.com' },\r\n+      update: {},\r\n+      create: {\r\n+        name: 'Alyssa Kathan',\r\n+        email: 'trainer2@gym.com',\r\n+        clubId: club.id,\r\n+      },\r\n+    }),\r\n+    prisma.trainer.upsert({\r\n+      where: { email: 'trainer3@gym.com' },\r\n+      update: {},\r\n+      create: {\r\n+        name: 'Jordan Sparks',\r\n+        email: 'trainer3@gym.com',\r\n+        clubId: club.id,\r\n+      },\r\n+    }),\r\n+  ]);\r\n \r\n   // 👇 Step 4: Seed membership plans\r\n   await prisma.membershipPlan.createMany({\r\n     data: [\r\n@@ -82,36 +102,44 @@\n     ],\r\n     skipDuplicates: true,\r\n   });\r\n \r\n-  // 👇 Step 5: Seed class schedules\r\n+  // 👇 Step 5: Seed class schedules for all trainers\r\n   await prisma.classSchedule.createMany({\r\n     data: [\r\n       {\r\n         title: 'Morning Yoga',\r\n         date: new Date('2025-07-15T08:00:00Z'),\r\n         duration: 60,\r\n         location: 'Room A',\r\n-        trainerId: trainer.id,\r\n+        trainerId: trainers[0].id,\r\n         clubId: club.id,\r\n         maxCapacity: 20,\r\n       },\r\n       {\r\n         title: 'HIIT Blast',\r\n-        date: new Date('2025-07-16T10:00:00Z'),\r\n+        date: new Date('2025-07-15T10:00:00Z'),\r\n         duration: 45,\r\n         location: 'Room B',\r\n-        trainerId: trainer.id,\r\n+        trainerId: trainers[1].id,\r\n         clubId: club.id,\r\n         maxCapacity: 25,\r\n       },\r\n+      {\r\n+        title: 'Evening Stretch',\r\n+        date: new Date('2025-07-15T18:00:00Z'),\r\n+        duration: 30,\r\n+        location: 'Room C',\r\n+        trainerId: trainers[2].id,\r\n+        clubId: club.id,\r\n+        maxCapacity: 15,\r\n+      },\r\n     ],\r\n   });\r\n \r\n-  console.log('✅ Seeded test club, users, trainer, plans, and schedules');\r\n+  console.log('✅ Seeded club, users, 3 trainers, membership plans, and schedules');\r\n }\r\n \r\n-\r\n main()\r\n   .catch((e) => {\r\n     console.error(e);\r\n     process.exit(1);\r\n"
                },
                {
                    "date": 1752440971446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,8 +135,18 @@\n       },\r\n     ],\r\n   });\r\n \r\n+  await prisma.location.createMany({\r\n+  data: [\r\n+    { name: 'Room A', clubId: club.id },\r\n+    { name: 'Room B', clubId: club.id },\r\n+    { name: 'Studio 1', clubId: club.id },\r\n+  ],\r\n+  skipDuplicates: true,\r\n+});\r\n+\r\n+\r\n   console.log('✅ Seeded club, users, 3 trainers, membership plans, and schedules');\r\n }\r\n \r\n main()\r\n"
                },
                {
                    "date": 1752443033560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,39 +103,39 @@\n     skipDuplicates: true,\r\n   });\r\n \r\n   // 👇 Step 5: Seed class schedules for all trainers\r\n-  await prisma.classSchedule.createMany({\r\n-    data: [\r\n-      {\r\n-        title: 'Morning Yoga',\r\n-        date: new Date('2025-07-15T08:00:00Z'),\r\n-        duration: 60,\r\n-        location: 'Room A',\r\n-        trainerId: trainers[0].id,\r\n-        clubId: club.id,\r\n-        maxCapacity: 20,\r\n-      },\r\n-      {\r\n-        title: 'HIIT Blast',\r\n-        date: new Date('2025-07-15T10:00:00Z'),\r\n-        duration: 45,\r\n-        location: 'Room B',\r\n-        trainerId: trainers[1].id,\r\n-        clubId: club.id,\r\n-        maxCapacity: 25,\r\n-      },\r\n-      {\r\n-        title: 'Evening Stretch',\r\n-        date: new Date('2025-07-15T18:00:00Z'),\r\n-        duration: 30,\r\n-        location: 'Room C',\r\n-        trainerId: trainers[2].id,\r\n-        clubId: club.id,\r\n-        maxCapacity: 15,\r\n-      },\r\n-    ],\r\n-  });\r\n+  // await prisma.classSchedule.createMany({\r\n+  //   data: [\r\n+  //     {\r\n+  //       title: 'Morning Yoga',\r\n+  //       date: new Date('2025-07-15T08:00:00Z'),\r\n+  //       duration: 60,\r\n+  //       location: 'Room A',\r\n+  //       trainerId: trainers[0].id,\r\n+  //       clubId: club.id,\r\n+  //       maxCapacity: 20,\r\n+  //     },\r\n+  //     {\r\n+  //       title: 'HIIT Blast',\r\n+  //       date: new Date('2025-07-15T10:00:00Z'),\r\n+  //       duration: 45,\r\n+  //       location: 'Room B',\r\n+  //       trainerId: trainers[1].id,\r\n+  //       clubId: club.id,\r\n+  //       maxCapacity: 25,\r\n+  //     },\r\n+  //     {\r\n+  //       title: 'Evening Stretch',\r\n+  //       date: new Date('2025-07-15T18:00:00Z'),\r\n+  //       duration: 30,\r\n+  //       location: 'Room C',\r\n+  //       trainerId: trainers[2].id,\r\n+  //       clubId: club.id,\r\n+  //       maxCapacity: 15,\r\n+  //     },\r\n+  //   ],\r\n+  // });\r\n \r\n   await prisma.location.createMany({\r\n   data: [\r\n     { name: 'Room A', clubId: club.id },\r\n"
                },
                {
                    "date": 1752443158809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,41 +102,10 @@\n     ],\r\n     skipDuplicates: true,\r\n   });\r\n \r\n-  // 👇 Step 5: Seed class schedules for all trainers\r\n-  // await prisma.classSchedule.createMany({\r\n-  //   data: [\r\n-  //     {\r\n-  //       title: 'Morning Yoga',\r\n-  //       date: new Date('2025-07-15T08:00:00Z'),\r\n-  //       duration: 60,\r\n-  //       location: 'Room A',\r\n-  //       trainerId: trainers[0].id,\r\n-  //       clubId: club.id,\r\n-  //       maxCapacity: 20,\r\n-  //     },\r\n-  //     {\r\n-  //       title: 'HIIT Blast',\r\n-  //       date: new Date('2025-07-15T10:00:00Z'),\r\n-  //       duration: 45,\r\n-  //       location: 'Room B',\r\n-  //       trainerId: trainers[1].id,\r\n-  //       clubId: club.id,\r\n-  //       maxCapacity: 25,\r\n-  //     },\r\n-  //     {\r\n-  //       title: 'Evening Stretch',\r\n-  //       date: new Date('2025-07-15T18:00:00Z'),\r\n-  //       duration: 30,\r\n-  //       location: 'Room C',\r\n-  //       trainerId: trainers[2].id,\r\n-  //       clubId: club.id,\r\n-  //       maxCapacity: 15,\r\n-  //     },\r\n-  //   ],\r\n-  // });\r\n \r\n+\r\n   await prisma.location.createMany({\r\n   data: [\r\n     { name: 'Room A', clubId: club.id },\r\n     { name: 'Room B', clubId: club.id },\r\n"
                },
                {
                    "date": 1752484326428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,8 +114,22 @@\n   skipDuplicates: true,\r\n });\r\n \r\n \r\n+await prisma.classSchedule.create({\r\n+  data: {\r\n+    title: 'Bootcamp Monday',\r\n+    date: new Date(), // use today's date for easier testing\r\n+    duration: 60,\r\n+    location: 'Room A',\r\n+    trainerId: trainers[0].id, // links to Mike Bell\r\n+    maxCapacity: 20,\r\n+    clubId: club.id,\r\n+  },\r\n+});\r\n+\r\n+\r\n+\r\n   console.log('✅ Seeded club, users, 3 trainers, membership plans, and schedules');\r\n }\r\n \r\n main()\r\n"
                },
                {
                    "date": 1752484345482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,22 +114,12 @@\n   skipDuplicates: true,\r\n });\r\n \r\n \r\n-await prisma.classSchedule.create({\r\n-  data: {\r\n-    title: 'Bootcamp Monday',\r\n-    date: new Date(), // use today's date for easier testing\r\n-    duration: 60,\r\n-    location: 'Room A',\r\n-    trainerId: trainers[0].id, // links to Mike Bell\r\n-    maxCapacity: 20,\r\n-    clubId: club.id,\r\n-  },\r\n-});\r\n \r\n \r\n \r\n+\r\n   console.log('✅ Seeded club, users, 3 trainers, membership plans, and schedules');\r\n }\r\n \r\n main()\r\n"
                },
                {
                    "date": 1752540397201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,8 +121,10 @@\n \r\n   console.log('✅ Seeded club, users, 3 trainers, membership plans, and schedules');\r\n }\r\n \r\n+//rest is  created manually like member, invoice, .. etc\r\n+\r\n main()\r\n   .catch((e) => {\r\n     console.error(e);\r\n     process.exit(1);\r\n"
                },
                {
                    "date": 1752573238925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,130 +1,51 @@\n+\r\n+// ⚠️ Dev seed only. NEVER run this in production.\r\n+\r\n import { PrismaClient } from '@prisma/client';\r\n import bcrypt from 'bcryptjs';\r\n \r\n const prisma = new PrismaClient();\r\n \r\n async function main() {\r\n   const hashedPassword = await bcrypt.hash('password123', 10);\r\n \r\n-  // 👇 Step 1: Upsert club\r\n-  const club = await prisma.club.upsert({\r\n-    where: { id: 'club1' },\r\n-    update: {},\r\n-    create: {\r\n-      id: 'club1',\r\n-      name: 'Golf Simulator',\r\n-      location: 'City Center',\r\n-    },\r\n-  });\r\n+ \r\n \r\n-  // 👇 Step 2: Upsert users\r\n-  await prisma.user.upsert({\r\n-    where: { email: 'super@gym.com' },\r\n-    update: {\r\n-      password: hashedPassword,\r\n-      role: 'super_admin',\r\n-      clubId: null,\r\n-    },\r\n-    create: {\r\n-      email: 'super@gym.com',\r\n-      password: hashedPassword,\r\n-      role: 'super_admin',\r\n-    },\r\n-  });\r\n+const club = await prisma.club.upsert({\r\n+  where: { id: 'club1' },\r\n+  update: {},\r\n+  create: {\r\n+    id: 'club1',\r\n+    name: 'Test Gym',\r\n+    location: 'Demo City',\r\n+    timezone: 'America/Chicago',\r\n+    clubEmail: 'testclub@gymfitness.com',\r\n+  },\r\n+});\r\n \r\n-  await prisma.user.upsert({\r\n-    where: { email: 'franchise@gym.com' },\r\n-    update: {\r\n-      password: hashedPassword,\r\n-      role: 'franchise_admin',\r\n-      clubId: club.id,\r\n-    },\r\n-    create: {\r\n-      email: 'franchise@gym.com',\r\n-      password: hashedPassword,\r\n-      role: 'franchise_admin',\r\n-      clubId: club.id,\r\n-    },\r\n-  });\r\n+await prisma.user.upsert({\r\n+  where: { email: 'super@gym.com' },\r\n+  update: {},\r\n+  create: {\r\n+    email: 'super@gym.com',\r\n+    password: hashedPassword,\r\n+    role: 'super_admin',\r\n+  },\r\n+});\r\n \r\n-  // 👇 Step 3: Upsert multiple trainers\r\n-  const trainers = await Promise.all([\r\n-    prisma.trainer.upsert({\r\n-      where: { email: 'trainer1@gym.com' },\r\n-      update: {},\r\n-      create: {\r\n-        name: 'Mike Bell',\r\n-        email: 'trainer1@gym.com',\r\n-        clubId: club.id,\r\n-      },\r\n-    }),\r\n-    prisma.trainer.upsert({\r\n-      where: { email: 'trainer2@gym.com' },\r\n-      update: {},\r\n-      create: {\r\n-        name: 'Alyssa Kathan',\r\n-        email: 'trainer2@gym.com',\r\n-        clubId: club.id,\r\n-      },\r\n-    }),\r\n-    prisma.trainer.upsert({\r\n-      where: { email: 'trainer3@gym.com' },\r\n-      update: {},\r\n-      create: {\r\n-        name: 'Jordan Sparks',\r\n-        email: 'trainer3@gym.com',\r\n-        clubId: club.id,\r\n-      },\r\n-    }),\r\n-  ]);\r\n-\r\n-  // 👇 Step 4: Seed membership plans\r\n-  await prisma.membershipPlan.createMany({\r\n-    data: [\r\n-      {\r\n-        name: 'Basic',\r\n-        description: 'Access to gym equipment and showers',\r\n-        price: 29.99,\r\n-        durationInDays: 30,\r\n-      },\r\n-      {\r\n-        name: 'Premium',\r\n-        description: 'Includes group classes, personal trainer access',\r\n-        price: 59.99,\r\n-        durationInDays: 30,\r\n-      },\r\n-      {\r\n-        name: 'Annual',\r\n-        description: 'Yearly membership with full benefits',\r\n-        price: 499.99,\r\n-        durationInDays: 365,\r\n-      },\r\n-    ],\r\n-    skipDuplicates: true,\r\n-  });\r\n-\r\n-\r\n-\r\n-  await prisma.location.createMany({\r\n-  data: [\r\n-    { name: 'Room A', clubId: club.id },\r\n-    { name: 'Room B', clubId: club.id },\r\n-    { name: 'Studio 1', clubId: club.id },\r\n-  ],\r\n-  skipDuplicates: true,\r\n+await prisma.user.upsert({\r\n+  where: { email: 'franchise@gym.com' },\r\n+  update: {},\r\n+  create: {\r\n+    email: 'franchise@gym.com',\r\n+    password: hashedPassword,\r\n+    role: 'franchise_admin',\r\n+    clubId: club.id,\r\n+  },\r\n });\r\n \r\n \r\n-\r\n-\r\n-\r\n-\r\n-  console.log('✅ Seeded club, users, 3 trainers, membership plans, and schedules');\r\n-}\r\n-\r\n-//rest is  created manually like member, invoice, .. etc\r\n-\r\n main()\r\n   .catch((e) => {\r\n     console.error(e);\r\n     process.exit(1);\r\n"
                },
                {
                    "date": 1752573329387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,10 +42,10 @@\n     role: 'franchise_admin',\r\n     clubId: club.id,\r\n   },\r\n });\r\n+}\r\n \r\n-\r\n main()\r\n   .catch((e) => {\r\n     console.error(e);\r\n     process.exit(1);\r\n"
                },
                {
                    "date": 1752576827039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,11 +39,23 @@\n   create: {\r\n     email: 'franchise@gym.com',\r\n     password: hashedPassword,\r\n     role: 'franchise_admin',\r\n-    clubId: club.id,\r\n+    clubId: null,\r\n   },\r\n });\r\n+\r\n+await prisma.user.upsert({\r\n+  where: { email: 'franchise2@gym.com' },\r\n+  update: {},\r\n+  create: {\r\n+    email: 'franchise2@gym.com',\r\n+    password: hashedPassword,\r\n+    role: 'franchise_admin',\r\n+    clubId: null,\r\n+  },\r\n+});\r\n+\r\n }\r\n \r\n main()\r\n   .catch((e) => {\r\n"
                },
                {
                    "date": 1752579149220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,8 +54,28 @@\n     clubId: null,\r\n   },\r\n });\r\n \r\n+await prisma.trainer.createMany({\r\n+  data: [\r\n+    {\r\n+      name: 'Alyssa Kathan',\r\n+      email: 'alyssa@gym.com',\r\n+      specialization: 'Strength Training',\r\n+      clubId: club.id,\r\n+    },\r\n+    {\r\n+      name: 'Jordan Sparks',\r\n+      email: 'jordan@gym.com',\r\n+      specialization: 'HIIT & Cardio',\r\n+      clubId: club.id,\r\n+    },\r\n+  ],\r\n+  skipDuplicates: true,\r\n+});\r\n+\r\n+\r\n+\r\n }\r\n \r\n main()\r\n   .catch((e) => {\r\n"
                },
                {
                    "date": 1752579597973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,14 +60,16 @@\n     {\r\n       name: 'Alyssa Kathan',\r\n       email: 'alyssa@gym.com',\r\n       specialization: 'Strength Training',\r\n+      phone: '123-456-7890',\r\n       clubId: club.id,\r\n     },\r\n     {\r\n       name: 'Jordan Sparks',\r\n       email: 'jordan@gym.com',\r\n       specialization: 'HIIT & Cardio',\r\n+      phone: '987-654-3210',\r\n       clubId: club.id,\r\n     },\r\n   ],\r\n   skipDuplicates: true,\r\n"
                },
                {
                    "date": 1752598020433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,119 @@\n+\r\n+// ⚠️ Dev seed only. NEVER run this in production.\r\n+\r\n+import { PrismaClient } from '@prisma/client';\r\n+import bcrypt from 'bcryptjs';\r\n+\r\n+const prisma = new PrismaClient();\r\n+\r\n+async function main() {\r\n+  const hashedPassword = await bcrypt.hash('password123', 10);\r\n+\r\n+ \r\n+\r\n+const club = await prisma.club.upsert({\r\n+  where: { id: 'club1' },\r\n+  update: {},\r\n+  create: {\r\n+    id: 'club1',\r\n+    name: 'Test Gym',\r\n+    location: 'Demo City',\r\n+    timezone: 'America/Chicago',\r\n+    clubEmail: 'testclub@gymfitness.com',\r\n+  },\r\n+});\r\n+\r\n+await prisma.user.upsert({\r\n+  where: { email: 'super@gym.com' },\r\n+  update: {},\r\n+  create: {\r\n+    email: 'super@gym.com',\r\n+    password: hashedPassword,\r\n+    role: 'super_admin',\r\n+  },\r\n+});\r\n+\r\n+await prisma.user.upsert({\r\n+  where: { email: 'franchise@gym.com' },\r\n+  update: {},\r\n+  create: {\r\n+    email: 'franchise@gym.com',\r\n+    password: hashedPassword,\r\n+    role: 'franchise_admin',\r\n+    clubId: null,\r\n+  },\r\n+});\r\n+\r\n+await prisma.user.upsert({\r\n+  where: { email: 'franchise2@gym.com' },\r\n+  update: {},\r\n+  create: {\r\n+    email: 'franchise2@gym.com',\r\n+    password: hashedPassword,\r\n+    role: 'franchise_admin',\r\n+    clubId: null,\r\n+  },\r\n+});\r\n+\r\n+await prisma.trainer.createMany({\r\n+  data: [\r\n+    {\r\n+      name: 'Alyssa Kathan',\r\n+      email: 'alyssa@gym.com',\r\n+      specialization: 'Strength Training',\r\n+      phone: '123-456-7890',\r\n+      clubId: club.id,\r\n+    },\r\n+    {\r\n+      name: 'Jordan Sparks',\r\n+      email: 'jordan@gym.com',\r\n+      specialization: 'HIIT & Cardio',\r\n+      phone: '987-654-3210',\r\n+      clubId: club.id,\r\n+    },\r\n+  ],\r\n+  skipDuplicates: true,\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+const roles = ['super_admin', 'franchise_admin', 'trainer', 'staff'] as const;\r\n+  const keys = [\r\n+    'view_members',\r\n+    'edit_members',\r\n+    'view_reports',\r\n+    'edit_schedule',\r\n+    'manage_billing',\r\n+    'assign_trainers',\r\n+  ] as const;\r\n+\r\n+  for (const role of roles) {\r\n+    for (const key of keys) {\r\n+      await prisma.permission.upsert({\r\n+        where: {\r\n+          role_key: {\r\n+            role,\r\n+            key,\r\n+          },\r\n+        },\r\n+        update: {},\r\n+        create: {\r\n+          role,\r\n+          key,\r\n+          allowed: role === 'super_admin', // Default: only super_admin gets all initially\r\n+        },\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  console.log('✅ Seed complete: users, trainers, permissions, club.');\r\n+}\r\n+\r\n+\r\n+main()\r\n+  .catch((e) => {\r\n+    console.error(e);\r\n+    process.exit(1);\r\n+  })\r\n+  .finally(() => prisma.$disconnect());\r\n"
                },
                {
                    "date": 1752619205277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,8 +106,19 @@\n       });\r\n     }\r\n   }\r\n \r\n+  await prisma.trainingResource.create({\r\n+  data: {\r\n+    title: 'How to Check In Members',\r\n+    description: 'This guide explains member check-in flow',\r\n+    type: 'video',\r\n+    videoUrl: 'https://www.youtube.com/embed/dQw4w9WgXcQ',\r\n+    roles: ['franchise_admin', 'staff'],\r\n+    tags: ['checkin', 'operations'],\r\n+  },\r\n+});\r\n+\r\n   console.log('✅ Seed complete: users, trainers, permissions, club.');\r\n }\r\n \r\n \r\n"
                },
                {
                    "date": 1752623664887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,8 +117,20 @@\n     tags: ['checkin', 'operations'],\r\n   },\r\n });\r\n \r\n+await prisma.trainingResource.create({\r\n+  data: {\r\n+    title: 'Gym SOP PDF',\r\n+    description: 'Standard Operating Procedures for staff',\r\n+    type: 'document',\r\n+    fileUrl: '/uploads/gym-sop.pdf',\r\n+    tags: ['operations', 'safety'],\r\n+    roles: ['staff', 'trainer'],\r\n+  },\r\n+});\r\n+\r\n+\r\n   console.log('✅ Seed complete: users, trainers, permissions, club.');\r\n }\r\n \r\n \r\n"
                },
                {
                    "date": 1752623786498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n   data: {\r\n     title: 'How to Check In Members',\r\n     description: 'This guide explains member check-in flow',\r\n     type: 'video',\r\n-    videoUrl: 'https://www.youtube.com/embed/dQw4w9WgXcQ',\r\n+    videoUrl: 'https://www.youtube.com/watch?v=I2JM92yfs7g&list=RDI2JM92yfs7g&start_radio=1&ab_channel=90%27sDard-BollywoodSongs',\r\n     roles: ['franchise_admin', 'staff'],\r\n     tags: ['checkin', 'operations'],\r\n   },\r\n });\r\n"
                }
            ],
            "date": 1752122385177,
            "name": "Commit-0",
            "content": "import bcrypt from 'bcryptjs';\r\nimport prisma from '../src/lib/prisma';\r\n\r\nasync function seed() {\r\n  await prisma.user.createMany({\r\n    data: [\r\n      {\r\n        email: 'super@gym.com',\r\n        password: await bcrypt.hash('super123', 10),\r\n        role: 'super_admin',\r\n      },\r\n      {\r\n        email: 'franchise@gym.com',\r\n        password: await bcrypt.hash('fran123', 10),\r\n        role: 'franchise_admin',\r\n        clubId: 'CLUB001',\r\n      },\r\n    ],\r\n  });\r\n}\r\n\r\nseed().then(() => {\r\n  console.log('Seeding done.');\r\n});\r\n"
        }
    ]
}